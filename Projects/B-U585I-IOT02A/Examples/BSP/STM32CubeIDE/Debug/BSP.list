
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1c0  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800f3f8  0800f3f8  0001f3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe68  0800fe68  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  0800fe68  0800fe68  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fe68  0800fe68  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fe68  0800fe68  0001fe68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fe70  0800fe70  0001fe70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800fe78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e90  20000290  08010108  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20001120  08010108  00021120  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ac39  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eac  00000000  00000000  0004af42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002258  00000000  00000000  0004edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a5d  00000000  00000000  00051048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00045800  00000000  00000000  00052aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b142  00000000  00000000  000982a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c1c39  00000000  00000000  000c33e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000acc0  00000000  00000000  00285020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0028fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000290 	.word	0x20000290
 8000254:	00000000 	.word	0x00000000
 8000258:	0800f3dc 	.word	0x0800f3dc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000294 	.word	0x20000294
 8000274:	0800f3dc 	.word	0x0800f3dc

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  LED6_GPIO_CLK_ENABLE();
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <BSP_LED_Init+0x98>)
 8000c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <BSP_LED_Init+0x98>)
 8000c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <BSP_LED_Init+0x98>)
 8000c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
  LED7_GPIO_CLK_ENABLE();
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <BSP_LED_Init+0x98>)
 8000c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c82:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <BSP_LED_Init+0x98>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <BSP_LED_Init+0x98>)
 8000c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4a10      	ldr	r2, [pc, #64]	; (8000cec <BSP_LED_Init+0x9c>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <BSP_LED_Init+0xa0>)
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	f107 0210 	add.w	r2, r7, #16
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fa3c 	bl	800513c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <BSP_LED_Init+0xa0>)
 8000cc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <BSP_LED_Init+0x9c>)
 8000cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f004 fce5 	bl	80056a8 <HAL_GPIO_WritePin>

  return ret;
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	46020c00 	.word	0x46020c00
 8000cec:	0800f8e8 	.word	0x0800f8e8
 8000cf0:	20000000 	.word	0x20000000

08000cf4 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <BSP_LED_On+0x34>)
 8000d02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <BSP_LED_On+0x38>)
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	f004 fcc8 	bl	80056a8 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]

  return ret;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	0800f8e8 	.word	0x0800f8e8

08000d30 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <BSP_LED_Off+0x34>)
 8000d3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <BSP_LED_Off+0x38>)
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f004 fcaa 	bl	80056a8 <HAL_GPIO_WritePin>
  ret = BSP_ERROR_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]

  return ret;
 8000d58:	68fb      	ldr	r3, [r7, #12]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000000 	.word	0x20000000
 8000d68:	0800f8e8 	.word	0x0800f8e8

08000d6c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback,};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY,};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE,};

  if (Button != BUTTON_USER)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <BSP_PB_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d86:	f06f 0301 	mvn.w	r3, #1
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8c:	e05c      	b.n	8000e48 <BSP_PB_Init+0xdc>
  }
  else
  {
    /* Enable the BUTTON clock*/
    BUTTON_USER_GPIO_CLK_ENABLE();
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <BSP_PB_Init+0xe8>)
 8000d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d94:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <BSP_PB_Init+0xe8>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <BSP_PB_Init+0xe8>)
 8000da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]

    if (ButtonMode == BUTTON_MODE_GPIO)
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10c      	bne.n	8000dda <BSP_PB_Init+0x6e>
    {
      /* Configure Button pin as input */
      gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
      HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <BSP_PB_Init+0xec>)
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 f9b2 	bl	800513c <HAL_GPIO_Init>
 8000dd8:	e036      	b.n	8000e48 <BSP_PB_Init+0xdc>
    }
    else /* (ButtonMode == BUTTON_MODE_EXTI) */
    {
      /* Configure Button pin as input with External interrupt */
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <BSP_PB_Init+0xf0>)
 8000ddc:	617b      	str	r3, [r7, #20]

      HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <BSP_PB_Init+0xec>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	f107 0210 	add.w	r2, r7, #16
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 f9a5 	bl	800513c <HAL_GPIO_Init>

      (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <BSP_PB_Init+0xf4>)
 8000dfe:	441a      	add	r2, r3
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4918      	ldr	r1, [pc, #96]	; (8000e64 <BSP_PB_Init+0xf8>)
 8000e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f004 f93a 	bl	8005084 <HAL_EXTI_GetHandle>
      (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <BSP_PB_Init+0xf4>)
 8000e1c:	1898      	adds	r0, r3, r2
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <BSP_PB_Init+0xfc>)
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	461a      	mov	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f004 f8ff 	bl	800502c <HAL_EXTI_RegisterCallback>

      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000e2e:	2018      	movs	r0, #24
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <BSP_PB_Init+0x100>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f003 fe75 	bl	8004b2a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e40:	2318      	movs	r3, #24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 fe8b 	bl	8004b5e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	46020c00 	.word	0x46020c00
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	10110000 	.word	0x10110000
 8000e60:	200002ac 	.word	0x200002ac
 8000e64:	0800f8f0 	.word	0x0800f8f0
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000010 	.word	0x20000010

08000e70 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f009 fd83 	bl	800a980 <BSP_PB_Callback>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <BSP_AUDIO_IN_IRQHandler>:
  * @param  Instance Audio in instance.
  * @param  Device Device of the audio in stream.
  * @retval None.
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t Device)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  if (Instance == 0U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d109      	bne.n	8000ea4 <BSP_AUDIO_IN_IRQHandler+0x24>
  {
    if (Device == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d103      	bne.n	8000e9e <BSP_AUDIO_IN_IRQHandler+0x1e>
    {
      HAL_DMA_IRQHandler(&haudio_mdf[0]);
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8000e98:	f003 ff54 	bl	8004d44 <HAL_DMA_IRQHandler>
    else /* Device == AUDIO_IN_DEVICE_DIGITAL_MIC2 */
    {
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
    }
  }
}
 8000e9c:	e002      	b.n	8000ea4 <BSP_AUDIO_IN_IRQHandler+0x24>
      HAL_DMA_IRQHandler(&haudio_mdf[1]);
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <BSP_AUDIO_IN_IRQHandler+0x30>)
 8000ea0:	f003 ff50 	bl	8004d44 <HAL_DMA_IRQHandler>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200002b8 	.word	0x200002b8
 8000eb0:	20000330 	.word	0x20000330

08000eb4 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <BSP_I2C2_Init+0x64>)
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <BSP_I2C2_Init+0x68>)
 8000ec2:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <BSP_I2C2_Init+0x6c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d11f      	bne.n	8000f0c <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <BSP_I2C2_Init+0x6c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <BSP_I2C2_Init+0x6c>)
 8000ed4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <BSP_I2C2_Init+0x64>)
 8000ed8:	f004 fefe 	bl	8005cd8 <HAL_I2C_GetState>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d114      	bne.n	8000f0c <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <BSP_I2C2_Init+0x64>)
 8000ee4:	f000 fb60 	bl	80015a8 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8000ee8:	f006 fd3a 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 8000eec:	4603      	mov	r3, r0
 8000eee:	490d      	ldr	r1, [pc, #52]	; (8000f24 <BSP_I2C2_Init+0x70>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f8e3 	bl	80010bc <I2C_GetTiming>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4807      	ldr	r0, [pc, #28]	; (8000f18 <BSP_I2C2_Init+0x64>)
 8000efc:	f000 f838 	bl	8000f70 <MX_I2C2_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f06:	f06f 0307 	mvn.w	r3, #7
 8000f0a:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000db0 	.word	0x20000db0
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	200003a8 	.word	0x200003a8
 8000f24:	000186a0 	.word	0x000186a0

08000f28 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <BSP_I2C2_DeInit+0x40>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <BSP_I2C2_DeInit+0x40>)
 8000f3a:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <BSP_I2C2_DeInit+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <BSP_I2C2_DeInit+0x44>)
 8000f46:	f000 fb95 	bl	8001674 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <BSP_I2C2_DeInit+0x44>)
 8000f4c:	f004 fc53 	bl	80057f6 <HAL_I2C_DeInit>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8000f56:	f06f 0307 	mvn.w	r3, #7
 8000f5a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003a8 	.word	0x200003a8
 8000f6c:	20000db0 	.word	0x20000db0

08000f70 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f004 fb92 	bl	80056d8 <HAL_I2C_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e014      	b.n	8000fea <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f005 f946 	bl	8006258 <HAL_I2CEx_ConfigAnalogFilter>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e008      	b.n	8000fea <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f005 f987 	bl	80062ee <HAL_I2CEx_ConfigDigitalFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	60ba      	str	r2, [r7, #8]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	81fb      	strh	r3, [r7, #14]
 8001002:	460b      	mov	r3, r1
 8001004:	81bb      	strh	r3, [r7, #12]
 8001006:	4613      	mov	r3, r2
 8001008:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800100a:	89b9      	ldrh	r1, [r7, #12]
 800100c:	89f8      	ldrh	r0, [r7, #14]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2201      	movs	r2, #1
 8001016:	f000 fb4f 	bl	80016b8 <I2C2_WriteReg>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00c      	b.n	8001040 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <BSP_I2C2_WriteReg+0x58>)
 8001028:	f004 fe64 	bl	8005cf4 <HAL_I2C_GetError>
 800102c:	4603      	mov	r3, r0
 800102e:	2b04      	cmp	r3, #4
 8001030:	d103      	bne.n	800103a <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001032:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e002      	b.n	8001040 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800103a:	f06f 0303 	mvn.w	r3, #3
 800103e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8001040:	697b      	ldr	r3, [r7, #20]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000db0 	.word	0x20000db0

08001050 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af02      	add	r7, sp, #8
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	461a      	mov	r2, r3
 800105a:	4603      	mov	r3, r0
 800105c:	81fb      	strh	r3, [r7, #14]
 800105e:	460b      	mov	r3, r1
 8001060:	81bb      	strh	r3, [r7, #12]
 8001062:	4613      	mov	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001066:	89b9      	ldrh	r1, [r7, #12]
 8001068:	89f8      	ldrh	r0, [r7, #14]
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2201      	movs	r2, #1
 8001072:	f000 fb47 	bl	8001704 <I2C2_ReadReg>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00c      	b.n	800109c <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <BSP_I2C2_ReadReg+0x58>)
 8001084:	f004 fe36 	bl	8005cf4 <HAL_I2C_GetError>
 8001088:	4603      	mov	r3, r0
 800108a:	2b04      	cmp	r3, #4
 800108c:	d103      	bne.n	8001096 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800108e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e002      	b.n	800109c <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001096:	f06f 0303 	mvn.w	r3, #3
 800109a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 800109c:	697b      	ldr	r3, [r7, #20]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000db0 	.word	0x20000db0

080010ac <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80010b0:	f003 fc30 	bl	8004914 <HAL_GetTick>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d06b      	beq.n	80011a8 <I2C_GetTiming+0xec>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d068      	beq.n	80011a8 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	e060      	b.n	800119e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80010dc:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <I2C_GetTiming+0xf8>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	212c      	movs	r1, #44	; 0x2c
 80010e2:	fb01 f303 	mul.w	r3, r1, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	3304      	adds	r3, #4
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d352      	bcc.n	8001198 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <I2C_GetTiming+0xf8>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	212c      	movs	r1, #44	; 0x2c
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	3308      	adds	r3, #8
 8001100:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d847      	bhi.n	8001198 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f856 	bl	80011bc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f940 	bl	8001398 <I2C_Compute_SCLL_SCLH>
 8001118:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b7f      	cmp	r3, #127	; 0x7f
 800111e:	d842      	bhi.n	80011a6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001120:	4925      	ldr	r1, [pc, #148]	; (80011b8 <I2C_GetTiming+0xfc>)
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8001132:	4821      	ldr	r0, [pc, #132]	; (80011b8 <I2C_GetTiming+0xfc>)
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4403      	add	r3, r0
 8001140:	3304      	adds	r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	051b      	lsls	r3, r3, #20
 8001146:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 800114a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800114c:	481a      	ldr	r0, [pc, #104]	; (80011b8 <I2C_GetTiming+0xfc>)
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4403      	add	r3, r0
 800115a:	3308      	adds	r3, #8
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
 8001160:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8001164:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <I2C_GetTiming+0xfc>)
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4403      	add	r3, r0
 8001174:	330c      	adds	r3, #12
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800117c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <I2C_GetTiming+0xfc>)
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4403      	add	r3, r0
 800118c:	3310      	adds	r3, #16
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8001192:	430b      	orrs	r3, r1
 8001194:	617b      	str	r3, [r7, #20]
        }
        break;
 8001196:	e006      	b.n	80011a6 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	3301      	adds	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d99b      	bls.n	80010dc <I2C_GetTiming+0x20>
 80011a4:	e000      	b.n	80011a8 <I2C_GetTiming+0xec>
        break;
 80011a6:	bf00      	nop
      }
    }
  }

  return ret;
 80011a8:	697b      	ldr	r3, [r7, #20]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0800f8f4 	.word	0x0800f8f4
 80011b8:	200003ac 	.word	0x200003ac

080011bc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80011bc:	b480      	push	{r7}
 80011be:	b08f      	sub	sp, #60	; 0x3c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80011c6:	2310      	movs	r3, #16
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	085a      	lsrs	r2, r3, #1
 80011ce:	4b6e      	ldr	r3, [pc, #440]	; (8001388 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80011d0:	4413      	add	r3, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011d8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80011da:	2332      	movs	r3, #50	; 0x32
 80011dc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80011de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011e2:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80011e4:	4a69      	ldr	r2, [pc, #420]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	212c      	movs	r1, #44	; 0x2c
 80011ea:	fb01 f303 	mul.w	r3, r1, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	3324      	adds	r3, #36	; 0x24
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	212c      	movs	r1, #44	; 0x2c
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	330c      	adds	r3, #12
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001208:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800120a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800120c:	495f      	ldr	r1, [pc, #380]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	202c      	movs	r0, #44	; 0x2c
 8001212:	fb00 f303 	mul.w	r3, r0, r3
 8001216:	440b      	add	r3, r1
 8001218:	3328      	adds	r3, #40	; 0x28
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3303      	adds	r3, #3
 800121e:	69f9      	ldr	r1, [r7, #28]
 8001220:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001228:	4a58      	ldr	r2, [pc, #352]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	212c      	movs	r1, #44	; 0x2c
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	3310      	adds	r3, #16
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	4a54      	ldr	r2, [pc, #336]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	212c      	movs	r1, #44	; 0x2c
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	4413      	add	r3, r2
 8001246:	3320      	adds	r3, #32
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800124c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800124e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001250:	494e      	ldr	r1, [pc, #312]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	202c      	movs	r0, #44	; 0x2c
 8001256:	fb00 f303 	mul.w	r3, r0, r3
 800125a:	440b      	add	r3, r1
 800125c:	3328      	adds	r3, #40	; 0x28
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	69f9      	ldr	r1, [r7, #28]
 8001264:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800126c:	4a47      	ldr	r2, [pc, #284]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	212c      	movs	r1, #44	; 0x2c
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	3320      	adds	r3, #32
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	4a43      	ldr	r2, [pc, #268]	; (800138c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	212c      	movs	r1, #44	; 0x2c
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	4413      	add	r3, r2
 800128a:	3314      	adds	r3, #20
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4403      	add	r3, r0
 8001290:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8001292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001294:	2b00      	cmp	r3, #0
 8001296:	dc01      	bgt.n	800129c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dc01      	bgt.n	80012a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012aa:	e062      	b.n	8001372 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
 80012b0:	e059      	b.n	8001366 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	3301      	adds	r3, #1
 80012b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b8:	3201      	adds	r2, #1
 80012ba:	fb03 f202 	mul.w	r2, r3, r2
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d348      	bcc.n	8001360 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	e042      	b.n	800135a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	3301      	adds	r3, #1
 80012d8:	6a3a      	ldr	r2, [r7, #32]
 80012da:	fb03 f202 	mul.w	r2, r3, r2
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80012e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d332      	bcc.n	8001354 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d82e      	bhi.n	8001354 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 80012f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d02a      	beq.n	8001354 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4924      	ldr	r1, [pc, #144]	; (8001394 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001310:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	491f      	ldr	r1, [pc, #124]	; (8001394 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	440b      	add	r3, r1
 8001322:	3304      	adds	r3, #4
 8001324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001326:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4919      	ldr	r1, [pc, #100]	; (8001394 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	3308      	adds	r3, #8
 800133a:	6a3a      	ldr	r2, [r7, #32]
 800133c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800134a:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b7f      	cmp	r3, #127	; 0x7f
 8001352:	d812      	bhi.n	800137a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	3301      	adds	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d9b9      	bls.n	80012d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	3301      	adds	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d9a2      	bls.n	80012b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136e:	3301      	adds	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	2b0f      	cmp	r3, #15
 8001376:	d999      	bls.n	80012ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8001378:	e000      	b.n	800137c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800137a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800137c:	373c      	adds	r7, #60	; 0x3c
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	3b9aca00 	.word	0x3b9aca00
 800138c:	0800f8f4 	.word	0x0800f8f4
 8001390:	20000dac 	.word	0x20000dac
 8001394:	200003ac 	.word	0x200003ac

08001398 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001398:	b480      	push	{r7}
 800139a:	b093      	sub	sp, #76	; 0x4c
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	085a      	lsrs	r2, r3, #1
 80013ac:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 80013ae:	4413      	add	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 80013b8:	4a78      	ldr	r2, [pc, #480]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	212c      	movs	r1, #44	; 0x2c
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	085a      	lsrs	r2, r3, #1
 80013c8:	4b73      	ldr	r3, [pc, #460]	; (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 80013ca:	4413      	add	r3, r2
 80013cc:	4973      	ldr	r1, [pc, #460]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	202c      	movs	r0, #44	; 0x2c
 80013d2:	fb00 f202 	mul.w	r2, r0, r2
 80013d6:	440a      	add	r2, r1
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	fbb3 f3f2 	udiv	r3, r3, r2
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80013e0:	2332      	movs	r3, #50	; 0x32
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80013e4:	4a6d      	ldr	r2, [pc, #436]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	212c      	movs	r1, #44	; 0x2c
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	3328      	adds	r3, #40	; 0x28
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80013fc:	4a67      	ldr	r2, [pc, #412]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	212c      	movs	r1, #44	; 0x2c
 8001402:	fb01 f303 	mul.w	r3, r1, r3
 8001406:	4413      	add	r3, r2
 8001408:	3304      	adds	r3, #4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a62      	ldr	r2, [pc, #392]	; (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8001414:	4a61      	ldr	r2, [pc, #388]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	212c      	movs	r1, #44	; 0x2c
 800141a:	fb01 f303 	mul.w	r3, r1, r3
 800141e:	4413      	add	r3, r2
 8001420:	3308      	adds	r3, #8
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a5c      	ldr	r2, [pc, #368]	; (8001598 <I2C_Compute_SCLL_SCLH+0x200>)
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001430:	2300      	movs	r3, #0
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
 8001434:	e0a3      	b.n	800157e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001436:	495a      	ldr	r1, [pc, #360]	; (80015a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8001438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001450:	2300      	movs	r3, #0
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001454:	e08c      	b.n	8001570 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	441a      	add	r2, r3
 800145c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800145e:	3301      	adds	r3, #1
 8001460:	6979      	ldr	r1, [r7, #20]
 8001462:	fb03 f101 	mul.w	r1, r3, r1
 8001466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	440b      	add	r3, r1
 800146c:	4413      	add	r3, r2
 800146e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001470:	4a4a      	ldr	r2, [pc, #296]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	212c      	movs	r1, #44	; 0x2c
 8001476:	fb01 f303 	mul.w	r3, r1, r3
 800147a:	4413      	add	r3, r2
 800147c:	3318      	adds	r3, #24
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	429a      	cmp	r2, r3
 8001484:	d971      	bls.n	800156a <I2C_Compute_SCLL_SCLH+0x1d2>
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001494:	429a      	cmp	r2, r3
 8001496:	d268      	bcs.n	800156a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001498:	2300      	movs	r3, #0
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
 800149c:	e062      	b.n	8001564 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	441a      	add	r2, r3
 80014a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a6:	3301      	adds	r3, #1
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	fb03 f101 	mul.w	r1, r3, r1
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	440b      	add	r3, r1
 80014b4:	4413      	add	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	441a      	add	r2, r3
 80014be:	4937      	ldr	r1, [pc, #220]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	202c      	movs	r0, #44	; 0x2c
 80014c4:	fb00 f303 	mul.w	r3, r0, r3
 80014c8:	440b      	add	r3, r1
 80014ca:	3320      	adds	r3, #32
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	441a      	add	r2, r3
 80014d0:	4932      	ldr	r1, [pc, #200]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	202c      	movs	r0, #44	; 0x2c
 80014d6:	fb00 f303 	mul.w	r3, r0, r3
 80014da:	440b      	add	r3, r1
 80014dc:	3324      	adds	r3, #36	; 0x24
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d338      	bcc.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d834      	bhi.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
 80014f4:	4a29      	ldr	r2, [pc, #164]	; (800159c <I2C_Compute_SCLL_SCLH+0x204>)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	212c      	movs	r1, #44	; 0x2c
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4413      	add	r3, r2
 8001500:	331c      	adds	r3, #28
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	429a      	cmp	r2, r3
 8001508:	d329      	bcc.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800150a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d225      	bcs.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151c:	2b00      	cmp	r3, #0
 800151e:	da02      	bge.n	8001526 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001522:	425b      	negs	r3, r3
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	429a      	cmp	r2, r3
 800152c:	d917      	bls.n	800155e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8001532:	491b      	ldr	r1, [pc, #108]	; (80015a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8001534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3310      	adds	r3, #16
 8001542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001544:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8001546:	4916      	ldr	r1, [pc, #88]	; (80015a0 <I2C_Compute_SCLL_SCLH+0x208>)
 8001548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	330c      	adds	r3, #12
 8001556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001558:	601a      	str	r2, [r3, #0]
              ret = count;
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001560:	3301      	adds	r3, #1
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
 8001564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001566:	2bff      	cmp	r3, #255	; 0xff
 8001568:	d999      	bls.n	800149e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800156a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156c:	3301      	adds	r3, #1
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	f67f af6f 	bls.w	8001456 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157a:	3301      	adds	r3, #1
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <I2C_Compute_SCLL_SCLH+0x20c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001584:	429a      	cmp	r2, r3
 8001586:	f4ff af56 	bcc.w	8001436 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800158a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800158c:	4618      	mov	r0, r3
 800158e:	374c      	adds	r7, #76	; 0x4c
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	3b9aca00 	.word	0x3b9aca00
 800159c:	0800f8f4 	.word	0x0800f8f4
 80015a0:	200003ac 	.word	0x200003ac
 80015a4:	20000dac 	.word	0x20000dac

080015a8 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <I2C2_MspInit+0xc4>)
 80015b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b6:	4a2d      	ldr	r2, [pc, #180]	; (800166c <I2C2_MspInit+0xc4>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <I2C2_MspInit+0xc4>)
 80015c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 80015ce:	4b27      	ldr	r3, [pc, #156]	; (800166c <I2C2_MspInit+0xc4>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d4:	4a25      	ldr	r2, [pc, #148]	; (800166c <I2C2_MspInit+0xc4>)
 80015d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <I2C2_MspInit+0xc4>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 80015ec:	2310      	movs	r3, #16
 80015ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80015f8:	2302      	movs	r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 80015fc:	2304      	movs	r3, #4
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	481a      	ldr	r0, [pc, #104]	; (8001670 <I2C2_MspInit+0xc8>)
 8001608:	f003 fd98 	bl	800513c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 800160c:	2320      	movs	r3, #32
 800160e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8001614:	2301      	movs	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 800161c:	2304      	movs	r3, #4
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <I2C2_MspInit+0xc8>)
 8001628:	f003 fd88 	bl	800513c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <I2C2_MspInit+0xc4>)
 800162e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <I2C2_MspInit+0xc4>)
 8001634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001638:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <I2C2_MspInit+0xc4>)
 800163e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <I2C2_MspInit+0xc4>)
 800164c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <I2C2_MspInit+0xc4>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001654:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <I2C2_MspInit+0xc4>)
 8001658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <I2C2_MspInit+0xc4>)
 800165c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001660:	6753      	str	r3, [r2, #116]	; 0x74
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	46020c00 	.word	0x46020c00
 8001670:	42021c00 	.word	0x42021c00

08001674 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 800167c:	2310      	movs	r3, #16
 800167e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4619      	mov	r1, r3
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <I2C2_MspDeInit+0x3c>)
 8001686:	f003 ff31 	bl	80054ec <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800168a:	2320      	movs	r3, #32
 800168c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	; (80016b0 <I2C2_MspDeInit+0x3c>)
 8001694:	f003 ff2a 	bl	80054ec <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <I2C2_MspDeInit+0x40>)
 800169a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <I2C2_MspDeInit+0x40>)
 80016a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	42021c00 	.word	0x42021c00
 80016b4:	46020c00 	.word	0x46020c00

080016b8 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af04      	add	r7, sp, #16
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	4603      	mov	r3, r0
 80016c2:	81fb      	strh	r3, [r7, #14]
 80016c4:	460b      	mov	r3, r1
 80016c6:	81bb      	strh	r3, [r7, #12]
 80016c8:	4613      	mov	r3, r2
 80016ca:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80016cc:	8978      	ldrh	r0, [r7, #10]
 80016ce:	89ba      	ldrh	r2, [r7, #12]
 80016d0:	89f9      	ldrh	r1, [r7, #14]
 80016d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	8b3b      	ldrh	r3, [r7, #24]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4603      	mov	r3, r0
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <I2C2_WriteReg+0x48>)
 80016e4:	f004 f8ca 	bl	800587c <HAL_I2C_Mem_Write>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e001      	b.n	80016f6 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80016f2:	f06f 0307 	mvn.w	r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000db0 	.word	0x20000db0

08001704 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af04      	add	r7, sp, #16
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4603      	mov	r3, r0
 800170e:	81fb      	strh	r3, [r7, #14]
 8001710:	460b      	mov	r3, r1
 8001712:	81bb      	strh	r3, [r7, #12]
 8001714:	4613      	mov	r3, r2
 8001716:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8001718:	8978      	ldrh	r0, [r7, #10]
 800171a:	89ba      	ldrh	r2, [r7, #12]
 800171c:	89f9      	ldrh	r1, [r7, #14]
 800171e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	8b3b      	ldrh	r3, [r7, #24]
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4603      	mov	r3, r0
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <I2C2_ReadReg+0x48>)
 8001730:	f004 f9b8 	bl	8005aa4 <HAL_I2C_Mem_Read>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800173a:	2300      	movs	r3, #0
 800173c:	e001      	b.n	8001742 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800173e:	f06f 0307 	mvn.w	r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000db0 	.word	0x20000db0

08001750 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <BSP_CAMERA_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff ffd1 	bl	8001750 <BSP_CAMERA_LineEventCallback>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ffd0 	bl	8001764 <BSP_CAMERA_FrameEventCallback>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff ffcf 	bl	8001778 <BSP_CAMERA_VsyncEventCallback>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff ffce 	bl	800178c <BSP_CAMERA_ErrorCallback>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d903      	bls.n	8001814 <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800180c:	f06f 0301 	mvn.w	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e03a      	b.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d108      	bne.n	800182c <BSP_MOTION_SENSOR_Init+0x34>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001824:	f06f 030a 	mvn.w	r3, #10
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e02e      	b.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <BSP_MOTION_SENSOR_Init+0x4c>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800183c:	f06f 030a 	mvn.w	r3, #10
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e022      	b.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <BSP_MOTION_SENSOR_Init+0x66>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f000 fb50 	bl	8001ef0 <ISM330DHCX_Probe>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00c      	beq.n	8001870 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001856:	f06f 0304 	mvn.w	r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e008      	b.n	8001870 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f000 fbbc 	bl	8001fdc <IIS2MDC_Probe>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 800186a:	f06f 0304 	mvn.w	r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <BSP_MOTION_SENSOR_Init+0x9c>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	431a      	orrs	r2, r3
 8001882:	4904      	ldr	r1, [pc, #16]	; (8001894 <BSP_MOTION_SENSOR_Init+0x9c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000e4c 	.word	0x20000e4c

08001898 <BSP_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance.
  * @param  Capabilities Pointer to motion sensor capabilities.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetCapabilities(uint32_t Instance, MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Capabilities == NULL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d802      	bhi.n	80018b2 <BSP_MOTION_SENSOR_GetCapabilities+0x1a>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <BSP_MOTION_SENSOR_GetCapabilities+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80018b2:	f06f 0301 	mvn.w	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e01b      	b.n	80018f2 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <BSP_MOTION_SENSOR_GetCapabilities+0x64>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <BSP_MOTION_SENSOR_GetCapabilities+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e011      	b.n	80018f2 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
  }
  else
  {
    /* Get the capabilities of the motion sensor */
    if (Motion_Sensor_Drv[Instance]->GetCapabilities(Motion_Sensor_CompObj[Instance], Capabilities) < 0)
 80018ce:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <BSP_MOTION_SENSOR_GetCapabilities+0x68>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	490a      	ldr	r1, [pc, #40]	; (8001904 <BSP_MOTION_SENSOR_GetCapabilities+0x6c>)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	4610      	mov	r0, r2
 80018e4:	4798      	blx	r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da02      	bge.n	80018f2 <BSP_MOTION_SENSOR_GetCapabilities+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80018ec:	f06f 0304 	mvn.w	r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000e4c 	.word	0x20000e4c
 8001900:	20000e5c 	.word	0x20000e5c
 8001904:	20000e54 	.word	0x20000e54

08001908 <BSP_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance.
  * @param  Id Pointer to motion sensor ID.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Id == NULL))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d802      	bhi.n	8001922 <BSP_MOTION_SENSOR_ReadID+0x1a>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <BSP_MOTION_SENSOR_ReadID+0x22>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001922:	f06f 0301 	mvn.w	r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e01b      	b.n	8001962 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else if (Motion_Sensor_Ctx[Instance].Functions == 0U)
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <BSP_MOTION_SENSOR_ReadID+0x64>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <BSP_MOTION_SENSOR_ReadID+0x36>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e011      	b.n	8001962 <BSP_MOTION_SENSOR_ReadID+0x5a>
  }
  else
  {
    /* Read the motion sensor ID */
    if (Motion_Sensor_Drv[Instance]->ReadID(Motion_Sensor_CompObj[Instance], Id) < 0)
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <BSP_MOTION_SENSOR_ReadID+0x68>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	490a      	ldr	r1, [pc, #40]	; (8001974 <BSP_MOTION_SENSOR_ReadID+0x6c>)
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001950:	6839      	ldr	r1, [r7, #0]
 8001952:	4610      	mov	r0, r2
 8001954:	4798      	blx	r3
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	da02      	bge.n	8001962 <BSP_MOTION_SENSOR_ReadID+0x5a>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800195c:	f06f 0304 	mvn.w	r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000e4c 	.word	0x20000e4c
 8001970:	20000e5c 	.word	0x20000e5c
 8001974:	20000e54 	.word	0x20000e54

08001978 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d903      	bls.n	8001994 <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 800198c:	f06f 0301 	mvn.w	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e045      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <BSP_MOTION_SENSOR_Enable+0x34>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80019a4:	f06f 030a 	mvn.w	r3, #10
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e039      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <BSP_MOTION_SENSOR_Enable+0x4c>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80019bc:	f06f 030a 	mvn.w	r3, #10
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e02d      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80019c4:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <BSP_MOTION_SENSOR_Enable+0xb4>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <BSP_MOTION_SENSOR_Enable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e021      	b.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d006      	beq.n	80019f0 <BSP_MOTION_SENSOR_Enable+0x78>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d101      	bne.n	80019ec <BSP_MOTION_SENSOR_Enable+0x74>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e002      	b.n	80019f2 <BSP_MOTION_SENSOR_Enable+0x7a>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e000      	b.n	80019f2 <BSP_MOTION_SENSOR_Enable+0x7a>
 80019f0:	2300      	movs	r3, #0
 80019f2:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 80019f4:	7af9      	ldrb	r1, [r7, #11]
 80019f6:	480e      	ldr	r0, [pc, #56]	; (8001a30 <BSP_MOTION_SENSOR_Enable+0xb8>)
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	490a      	ldr	r1, [pc, #40]	; (8001a34 <BSP_MOTION_SENSOR_Enable+0xbc>)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a10:	4610      	mov	r0, r2
 8001a12:	4798      	blx	r3
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da02      	bge.n	8001a20 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001a1a:	f06f 0304 	mvn.w	r3, #4
 8001a1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8001a20:	68fb      	ldr	r3, [r7, #12]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000e4c 	.word	0x20000e4c
 8001a30:	20000e64 	.word	0x20000e64
 8001a34:	20000e54 	.word	0x20000e54

08001a38 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d802      	bhi.n	8001a54 <BSP_MOTION_SENSOR_GetAxes+0x1c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001a54:	f06f 0301 	mvn.w	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e046      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d108      	bne.n	8001a74 <BSP_MOTION_SENSOR_GetAxes+0x3c>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a6c:	f06f 030a 	mvn.w	r3, #10
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e03a      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <BSP_MOTION_SENSOR_GetAxes+0x54>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001a84:	f06f 030a 	mvn.w	r3, #10
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e02e      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e022      	b.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d006      	beq.n	8001ab8 <BSP_MOTION_SENSOR_GetAxes+0x80>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d101      	bne.n	8001ab4 <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e002      	b.n	8001aba <BSP_MOTION_SENSOR_GetAxes+0x82>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e000      	b.n	8001aba <BSP_MOTION_SENSOR_GetAxes+0x82>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8001abc:	7cf9      	ldrb	r1, [r7, #19]
 8001abe:	480e      	ldr	r0, [pc, #56]	; (8001af8 <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	490a      	ldr	r1, [pc, #40]	; (8001afc <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	4610      	mov	r0, r2
 8001adc:	4798      	blx	r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da02      	bge.n	8001aea <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001ae4:	f06f 0304 	mvn.w	r3, #4
 8001ae8:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001aea:	697b      	ldr	r3, [r7, #20]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000e4c 	.word	0x20000e4c
 8001af8:	20000e64 	.word	0x20000e64
 8001afc:	20000e54 	.word	0x20000e54

08001b00 <BSP_MOTION_SENSOR_GetSensitivity>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Sensitivity Pointer to sensitivity.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float_t *Sensitivity)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Sensitivity == NULL))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d802      	bhi.n	8001b1c <BSP_MOTION_SENSOR_GetSensitivity+0x1c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <BSP_MOTION_SENSOR_GetSensitivity+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001b1c:	f06f 0301 	mvn.w	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e046      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <BSP_MOTION_SENSOR_GetSensitivity+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b34:	f06f 030a 	mvn.w	r3, #10
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e03a      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <BSP_MOTION_SENSOR_GetSensitivity+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001b4c:	f06f 030a 	mvn.w	r3, #10
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e02e      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <BSP_MOTION_SENSOR_GetSensitivity+0xbc>)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <BSP_MOTION_SENSOR_GetSensitivity+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e022      	b.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
  }
  else
  {
    /* Get the motion sensor sensitivity */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d006      	beq.n	8001b80 <BSP_MOTION_SENSOR_GetSensitivity+0x80>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d101      	bne.n	8001b7c <BSP_MOTION_SENSOR_GetSensitivity+0x7c>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e002      	b.n	8001b82 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e000      	b.n	8001b82 <BSP_MOTION_SENSOR_GetSensitivity+0x82>
 8001b80:	2300      	movs	r3, #0
 8001b82:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetSensitivity(Motion_Sensor_CompObj[Instance], Sensitivity) < 0)
 8001b84:	7cf9      	ldrb	r1, [r7, #19]
 8001b86:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <BSP_MOTION_SENSOR_GetSensitivity+0xc0>)
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	490a      	ldr	r1, [pc, #40]	; (8001bc4 <BSP_MOTION_SENSOR_GetSensitivity+0xc4>)
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4798      	blx	r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da02      	bge.n	8001bb2 <BSP_MOTION_SENSOR_GetSensitivity+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001bac:	f06f 0304 	mvn.w	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001bb2:	697b      	ldr	r3, [r7, #20]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000e4c 	.word	0x20000e4c
 8001bc0:	20000e64 	.word	0x20000e64
 8001bc4:	20000e54 	.word	0x20000e54

08001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Pointer to output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Odr == NULL))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d802      	bhi.n	8001be4 <BSP_MOTION_SENSOR_GetOutputDataRate+0x1c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <BSP_MOTION_SENSOR_GetOutputDataRate+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001be4:	f06f 0301 	mvn.w	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e046      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <BSP_MOTION_SENSOR_GetOutputDataRate+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001bfc:	f06f 030a 	mvn.w	r3, #10
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e03a      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <BSP_MOTION_SENSOR_GetOutputDataRate+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001c14:	f06f 030a 	mvn.w	r3, #10
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e02e      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <BSP_MOTION_SENSOR_GetOutputDataRate+0xbc>)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <BSP_MOTION_SENSOR_GetOutputDataRate+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e022      	b.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
  }
  else
  {
    /* Get the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d006      	beq.n	8001c48 <BSP_MOTION_SENSOR_GetOutputDataRate+0x80>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d101      	bne.n	8001c44 <BSP_MOTION_SENSOR_GetOutputDataRate+0x7c>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e002      	b.n	8001c4a <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e000      	b.n	8001c4a <BSP_MOTION_SENSOR_GetOutputDataRate+0x82>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001c4c:	7cf9      	ldrb	r1, [r7, #19]
 8001c4e:	480e      	ldr	r0, [pc, #56]	; (8001c88 <BSP_MOTION_SENSOR_GetOutputDataRate+0xc0>)
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	490a      	ldr	r1, [pc, #40]	; (8001c8c <BSP_MOTION_SENSOR_GetOutputDataRate+0xc4>)
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4798      	blx	r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da02      	bge.n	8001c7a <BSP_MOTION_SENSOR_GetOutputDataRate+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001c74:	f06f 0304 	mvn.w	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001c7a:	697b      	ldr	r3, [r7, #20]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000e4c 	.word	0x20000e4c
 8001c88:	20000e64 	.word	0x20000e64
 8001c8c:	20000e54 	.word	0x20000e54

08001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d903      	bls.n	8001cb0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001ca8:	f06f 0301 	mvn.w	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e047      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d108      	bne.n	8001cc8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001cc0:	f06f 030a 	mvn.w	r3, #10
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e03b      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001cd8:	f06f 030a 	mvn.w	r3, #10
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e02f      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x68>
  {
    status = BSP_ERROR_NO_INIT;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e023      	b.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d006      	beq.n	8001d0c <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d101      	bne.n	8001d08 <BSP_MOTION_SENSOR_SetOutputDataRate+0x78>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e002      	b.n	8001d0e <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e000      	b.n	8001d0e <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 8001d10:	7cf9      	ldrb	r1, [r7, #19]
 8001d12:	480f      	ldr	r0, [pc, #60]	; (8001d50 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc0>)
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	490b      	ldr	r1, [pc, #44]	; (8001d54 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc4>)
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d2c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d30:	4610      	mov	r0, r2
 8001d32:	4798      	blx	r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da02      	bge.n	8001d40 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001d3a:	f06f 0304 	mvn.w	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001d40:	697b      	ldr	r3, [r7, #20]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000e4c 	.word	0x20000e4c
 8001d50:	20000e64 	.word	0x20000e64
 8001d54:	20000e54 	.word	0x20000e54

08001d58 <BSP_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Pointer to full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Fullscale == NULL))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d802      	bhi.n	8001d74 <BSP_MOTION_SENSOR_GetFullScale+0x1c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <BSP_MOTION_SENSOR_GetFullScale+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001d74:	f06f 0301 	mvn.w	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e046      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <BSP_MOTION_SENSOR_GetFullScale+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001d8c:	f06f 030a 	mvn.w	r3, #10
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e03a      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d108      	bne.n	8001dac <BSP_MOTION_SENSOR_GetFullScale+0x54>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <BSP_MOTION_SENSOR_GetFullScale+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001da4:	f06f 030a 	mvn.w	r3, #10
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e02e      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001dac:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <BSP_MOTION_SENSOR_GetFullScale+0xbc>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <BSP_MOTION_SENSOR_GetFullScale+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8001dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e022      	b.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
  }
  else
  {
    /* Get the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d006      	beq.n	8001dd8 <BSP_MOTION_SENSOR_GetFullScale+0x80>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d101      	bne.n	8001dd4 <BSP_MOTION_SENSOR_GetFullScale+0x7c>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e002      	b.n	8001dda <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e000      	b.n	8001dda <BSP_MOTION_SENSOR_GetFullScale+0x82>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001ddc:	7cf9      	ldrb	r1, [r7, #19]
 8001dde:	480e      	ldr	r0, [pc, #56]	; (8001e18 <BSP_MOTION_SENSOR_GetFullScale+0xc0>)
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	490a      	ldr	r1, [pc, #40]	; (8001e1c <BSP_MOTION_SENSOR_GetFullScale+0xc4>)
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4798      	blx	r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da02      	bge.n	8001e0a <BSP_MOTION_SENSOR_GetFullScale+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001e04:	f06f 0304 	mvn.w	r3, #4
 8001e08:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8001e0a:	697b      	ldr	r3, [r7, #20]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000e4c 	.word	0x20000e4c
 8001e18:	20000e64 	.word	0x20000e64
 8001e1c:	20000e54 	.word	0x20000e54

08001e20 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d903      	bls.n	8001e3e <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001e36:	f06f 0301 	mvn.w	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e04d      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d108      	bne.n	8001e56 <BSP_MOTION_SENSOR_SetFullScale+0x36>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <BSP_MOTION_SENSOR_SetFullScale+0x36>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001e4e:	f06f 030a 	mvn.w	r3, #10
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e041      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d108      	bne.n	8001e6e <BSP_MOTION_SENSOR_SetFullScale+0x4e>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <BSP_MOTION_SENSOR_SetFullScale+0x4e>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001e66:	f06f 030a 	mvn.w	r3, #10
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e035      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <BSP_MOTION_SENSOR_SetFullScale+0x66>
  {
    status = BSP_ERROR_NO_INIT;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e029      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d006      	beq.n	8001e9a <BSP_MOTION_SENSOR_SetFullScale+0x7a>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d101      	bne.n	8001e96 <BSP_MOTION_SENSOR_SetFullScale+0x76>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e002      	b.n	8001e9c <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e000      	b.n	8001e9c <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d103      	bne.n	8001eac <BSP_MOTION_SENSOR_SetFullScale+0x8c>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001ea4:	f06f 030a 	mvn.w	r3, #10
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e016      	b.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 8001eac:	7cf9      	ldrb	r1, [r7, #19]
 8001eae:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <BSP_MOTION_SENSOR_SetFullScale+0xc8>)
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	490a      	ldr	r1, [pc, #40]	; (8001eec <BSP_MOTION_SENSOR_SetFullScale+0xcc>)
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4798      	blx	r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da02      	bge.n	8001eda <BSP_MOTION_SENSOR_SetFullScale+0xba>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8001ed4:	f06f 0304 	mvn.w	r3, #4
 8001ed8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 8001eda:	697b      	ldr	r3, [r7, #20]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000e4c 	.word	0x20000e4c
 8001ee8:	20000e64 	.word	0x20000e64
 8001eec:	20000e54 	.word	0x20000e54

08001ef0 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8001f00:	23d7      	movs	r3, #215	; 0xd7
 8001f02:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <ISM330DHCX_Probe+0xbc>)
 8001f06:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <ISM330DHCX_Probe+0xc0>)
 8001f0a:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <ISM330DHCX_Probe+0xc4>)
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <ISM330DHCX_Probe+0xc8>)
 8001f12:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <ISM330DHCX_Probe+0xcc>)
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4828      	ldr	r0, [pc, #160]	; (8001fc0 <ISM330DHCX_Probe+0xd0>)
 8001f20:	f000 fd0a 	bl	8002938 <ISM330DHCX_RegisterBusIO>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8001f2a:	f06f 0307 	mvn.w	r3, #7
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f30:	e037      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 8001f32:	f107 030f 	add.w	r3, r7, #15
 8001f36:	4619      	mov	r1, r3
 8001f38:	4821      	ldr	r0, [pc, #132]	; (8001fc0 <ISM330DHCX_Probe+0xd0>)
 8001f3a:	f000 fe17 	bl	8002b6c <ISM330DHCX_ReadID>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8001f44:	f06f 0304 	mvn.w	r3, #4
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4a:	e02a      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b6b      	cmp	r3, #107	; 0x6b
 8001f50:	d003      	beq.n	8001f5a <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8001f52:	f06f 0306 	mvn.w	r3, #6
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f58:	e023      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <ISM330DHCX_Probe+0xd4>)
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <ISM330DHCX_Probe+0xd0>)
 8001f5e:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <ISM330DHCX_Probe+0xd8>)
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <ISM330DHCX_Probe+0xdc>)
 8001f64:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <ISM330DHCX_Probe+0xd8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <ISM330DHCX_Probe+0xd4>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4610      	mov	r0, r2
 8001f72:	4798      	blx	r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	da03      	bge.n	8001f82 <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8001f7a:	f06f 0304 	mvn.w	r3, #4
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f80:	e00f      	b.n	8001fa2 <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <ISM330DHCX_Probe+0xe0>)
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <ISM330DHCX_Probe+0xe4>)
 8001f90:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <ISM330DHCX_Probe+0xe0>)
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <ISM330DHCX_Probe+0xe8>)
 8001fa0:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	08000eb5 	.word	0x08000eb5
 8001fb0:	08000f29 	.word	0x08000f29
 8001fb4:	08001051 	.word	0x08001051
 8001fb8:	08000ff5 	.word	0x08000ff5
 8001fbc:	080010ad 	.word	0x080010ad
 8001fc0:	20000e7c 	.word	0x20000e7c
 8001fc4:	20000e54 	.word	0x20000e54
 8001fc8:	20000e5c 	.word	0x20000e5c
 8001fcc:	20000048 	.word	0x20000048
 8001fd0:	20000e64 	.word	0x20000e64
 8001fd4:	2000007c 	.word	0x2000007c
 8001fd8:	20000058 	.word	0x20000058

08001fdc <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 8001fec:	233d      	movs	r3, #61	; 0x3d
 8001fee:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <IIS2MDC_Probe+0xac>)
 8001ff2:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <IIS2MDC_Probe+0xb0>)
 8001ff6:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <IIS2MDC_Probe+0xb4>)
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <IIS2MDC_Probe+0xb8>)
 8001ffe:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <IIS2MDC_Probe+0xbc>)
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4824      	ldr	r0, [pc, #144]	; (800209c <IIS2MDC_Probe+0xc0>)
 800200c:	f000 f852 	bl	80020b4 <IIS2MDC_RegisterBusIO>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8002016:	f06f 0307 	mvn.w	r3, #7
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201c:	e02f      	b.n	800207e <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 800201e:	f107 030f 	add.w	r3, r7, #15
 8002022:	4619      	mov	r1, r3
 8002024:	481d      	ldr	r0, [pc, #116]	; (800209c <IIS2MDC_Probe+0xc0>)
 8002026:	f000 f8fc 	bl	8002222 <IIS2MDC_ReadID>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8002030:	f06f 0304 	mvn.w	r3, #4
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002036:	e022      	b.n	800207e <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d003      	beq.n	8002046 <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800203e:	f06f 0306 	mvn.w	r3, #6
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002044:	e01b      	b.n	800207e <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <IIS2MDC_Probe+0xc4>)
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <IIS2MDC_Probe+0xc0>)
 800204a:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <IIS2MDC_Probe+0xc8>)
 800204e:	4a16      	ldr	r2, [pc, #88]	; (80020a8 <IIS2MDC_Probe+0xcc>)
 8002050:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <IIS2MDC_Probe+0xc8>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <IIS2MDC_Probe+0xc4>)
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	4610      	mov	r0, r2
 800205e:	4798      	blx	r3
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	da03      	bge.n	800206e <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8002066:	f06f 0304 	mvn.w	r3, #4
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206c:	e007      	b.n	800207e <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <IIS2MDC_Probe+0xd0>)
 800207a:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <IIS2MDC_Probe+0xd4>)
 800207c:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002080:	4618      	mov	r0, r3
 8002082:	3730      	adds	r7, #48	; 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	08000eb5 	.word	0x08000eb5
 800208c:	08000f29 	.word	0x08000f29
 8002090:	08001051 	.word	0x08001051
 8002094:	08000ff5 	.word	0x08000ff5
 8002098:	080010ad 	.word	0x080010ad
 800209c:	20000eac 	.word	0x20000eac
 80020a0:	20000e54 	.word	0x20000e54
 80020a4:	20000e5c 	.word	0x20000e5c
 80020a8:	20000014 	.word	0x20000014
 80020ac:	20000e64 	.word	0x20000e64
 80020b0:	20000024 	.word	0x20000024

080020b4 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e04b      	b.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	7b1a      	ldrb	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <IIS2MDC_RegisterBusIO+0xc0>)
 800210c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <IIS2MDC_RegisterBusIO+0xc4>)
 8002112:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e01e      	b.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4798      	blx	r3
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e014      	b.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	331c      	adds	r3, #28
 8002154:	2101      	movs	r1, #1
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fbc8 	bl	80028ec <iis2mdc_i2c_interface_set>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002166:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002168:	68fb      	ldr	r3, [r7, #12]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	0800256f 	.word	0x0800256f
 8002178:	080025d1 	.word	0x080025d1

0800217c <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	331c      	adds	r3, #28
 8002188:	2101      	movs	r1, #1
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fb06 	bl	800279c <iis2mdc_block_data_update_set>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219a:	e028      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	331c      	adds	r3, #28
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fa75 	bl	8002692 <iis2mdc_operating_mode_set>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021b2:	e01c      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	331c      	adds	r3, #28
 80021b8:	2103      	movs	r1, #3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fa8f 	bl	80026de <iis2mdc_data_rate_set>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ca:	e010      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	331c      	adds	r3, #28
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fb64 	bl	80028a0 <iis2mdc_self_test_set>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e2:	e004      	b.n	80021ee <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f874 	bl	80022ec <IIS2MDC_MAG_Disable>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220e:	e004      	b.n	800221a <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	331c      	adds	r3, #28
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fb23 	bl	800287e <iis2mdc_device_id_get>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002242:	e000      	b.n	8002246 <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2232      	movs	r2, #50	; 0x32
 8002282:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <IIS2MDC_GetCapabilities+0x58>)
 8002298:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	42c80000 	.word	0x42c80000

080022ac <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e010      	b.n	80022e4 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	331c      	adds	r3, #28
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f9e2 	bl	8002692 <iis2mdc_operating_mode_set>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d8:	e004      	b.n	80022e4 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e010      	b.n	8002324 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	331c      	adds	r3, #28
 8002306:	2102      	movs	r1, #2
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f9c2 	bl	8002692 <iis2mdc_operating_mode_set>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002318:	e004      	b.n	8002324 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800233c:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	331c      	adds	r3, #28
 800235e:	f107 020b 	add.w	r2, r7, #11
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f9e1 	bl	800272c <iis2mdc_data_rate_get>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002374:	e023      	b.n	80023be <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d81b      	bhi.n	80023b4 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002395 	.word	0x08002395
 8002388:	0800239d 	.word	0x0800239d
 800238c:	080023a5 	.word	0x080023a5
 8002390:	080023ad 	.word	0x080023ad
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8002398:	601a      	str	r2, [r3, #0]
      break;
 800239a:	e00f      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 80023a0:	601a      	str	r2, [r3, #0]
      break;
 80023a2:	e00b      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 80023a8:	601a      	str	r2, [r3, #0]
      break;
 80023aa:	e007      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 80023b0:	601a      	str	r2, [r3, #0]
      break;
 80023b2:	e003      	b.n	80023bc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023b8:	60fb      	str	r3, [r7, #12]
      break;
 80023ba:	bf00      	nop
  }

  return ret;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	41200000 	.word	0x41200000
 80023cc:	41a00000 	.word	0x41a00000
 80023d0:	42480000 	.word	0x42480000
 80023d4:	42c80000 	.word	0x42c80000

080023d8 <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80023e4:	edd7 7a00 	vldr	s15, [r7]
 80023e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d801      	bhi.n	80023fa <IIS2MDC_MAG_SetOutputDataRate+0x22>
 80023f6:	2300      	movs	r3, #0
 80023f8:	e016      	b.n	8002428 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80023fa:	edd7 7a00 	vldr	s15, [r7]
 80023fe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	d801      	bhi.n	8002410 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 800240c:	2301      	movs	r3, #1
 800240e:	e00b      	b.n	8002428 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002410:	edd7 7a00 	vldr	s15, [r7]
 8002414:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002450 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8002418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	d801      	bhi.n	8002426 <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8002422:	2302      	movs	r3, #2
 8002424:	e000      	b.n	8002428 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002426:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8002428:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	331c      	adds	r3, #28
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f953 	bl	80026de <iis2mdc_data_rate_set>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002442:	e000      	b.n	8002446 <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	42480000 	.word	0x42480000

08002454 <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2232      	movs	r2, #50	; 0x32
 8002462:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b084      	sub	sp, #16
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	331c      	adds	r3, #28
 8002498:	f107 0208 	add.w	r2, r7, #8
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f9a2 	bl	80027e8 <iis2mdc_magnetic_raw_get>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ae:	e00c      	b.n	80024ca <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80024b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80024b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80024c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	331c      	adds	r3, #28
 80024e0:	f107 0210 	add.w	r2, r7, #16
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f97e 	bl	80027e8 <iis2mdc_magnetic_raw_get>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f6:	e036      	b.n	8002566 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff14 	bl	800232c <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002504:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	edd7 7a03 	vldr	s15, [r7, #12]
 8002514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 2a90 	vmov	r2, s15
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002530:	edd7 7a03 	vldr	s15, [r7, #12]
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800253c:	ee17 2a90 	vmov	r2, s15
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002544:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002550:	edd7 7a03 	vldr	s15, [r7, #12]
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800255c:	ee17 2a90 	vmov	r2, s15
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	461a      	mov	r2, r3
 800257a:	460b      	mov	r3, r1
 800257c:	72fb      	strb	r3, [r7, #11]
 800257e:	4613      	mov	r3, r2
 8002580:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10e      	bne.n	80025ac <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	695c      	ldr	r4, [r3, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	7b1b      	ldrb	r3, [r3, #12]
 8002596:	b298      	uxth	r0, r3
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	b299      	uxth	r1, r3
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	47a0      	blx	r4
 80025a8:	4603      	mov	r3, r0
 80025aa:	e00d      	b.n	80025c8 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	695c      	ldr	r4, [r3, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	7b1b      	ldrb	r3, [r3, #12]
 80025b4:	b298      	uxth	r0, r3
 80025b6:	7afb      	ldrb	r3, [r7, #11]
 80025b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	b299      	uxth	r1, r3
 80025c0:	893b      	ldrh	r3, [r7, #8]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	47a0      	blx	r4
 80025c6:	4603      	mov	r3, r0
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	461a      	mov	r2, r3
 80025dc:	460b      	mov	r3, r1
 80025de:	72fb      	strb	r3, [r7, #11]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10e      	bne.n	800260e <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	691c      	ldr	r4, [r3, #16]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	7b1b      	ldrb	r3, [r3, #12]
 80025f8:	b298      	uxth	r0, r3
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002600:	b2db      	uxtb	r3, r3
 8002602:	b299      	uxth	r1, r3
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	47a0      	blx	r4
 800260a:	4603      	mov	r3, r0
 800260c:	e00d      	b.n	800262a <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	691c      	ldr	r4, [r3, #16]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	7b1b      	ldrb	r3, [r3, #12]
 8002616:	b298      	uxth	r0, r3
 8002618:	7afb      	ldrb	r3, [r7, #11]
 800261a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800261e:	b2db      	uxtb	r3, r3
 8002620:	b299      	uxth	r1, r3
 8002622:	893b      	ldrh	r3, [r7, #8]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	47a0      	blx	r4
 8002628:	4603      	mov	r3, r0
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}

08002632 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002632:	b590      	push	{r4, r7, lr}
 8002634:	b087      	sub	sp, #28
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	461a      	mov	r2, r3
 800263e:	460b      	mov	r3, r1
 8002640:	72fb      	strb	r3, [r7, #11]
 8002642:	4613      	mov	r3, r2
 8002644:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	685c      	ldr	r4, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6898      	ldr	r0, [r3, #8]
 800264e:	893b      	ldrh	r3, [r7, #8]
 8002650:	7af9      	ldrb	r1, [r7, #11]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	47a0      	blx	r4
 8002656:	6178      	str	r0, [r7, #20]
  return ret;
 8002658:	697b      	ldr	r3, [r7, #20]
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}

08002662 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002662:	b590      	push	{r4, r7, lr}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	460b      	mov	r3, r1
 8002670:	72fb      	strb	r3, [r7, #11]
 8002672:	4613      	mov	r3, r2
 8002674:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681c      	ldr	r4, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6898      	ldr	r0, [r3, #8]
 800267e:	893b      	ldrh	r3, [r7, #8]
 8002680:	7af9      	ldrb	r1, [r7, #11]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	47a0      	blx	r4
 8002686:	6178      	str	r0, [r7, #20]
  return ret;
 8002688:	697b      	ldr	r3, [r7, #20]
}
 800268a:	4618      	mov	r0, r3
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}

08002692 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800269e:	f107 0208 	add.w	r2, r7, #8
 80026a2:	2301      	movs	r3, #1
 80026a4:	2160      	movs	r1, #96	; 0x60
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffc3 	bl	8002632 <iis2mdc_read_reg>
 80026ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10f      	bne.n	80026d4 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	7a3b      	ldrb	r3, [r7, #8]
 80026be:	f362 0301 	bfi	r3, r2, #0, #2
 80026c2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80026c4:	f107 0208 	add.w	r2, r7, #8
 80026c8:	2301      	movs	r3, #1
 80026ca:	2160      	movs	r1, #96	; 0x60
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffc8 	bl	8002662 <iis2mdc_write_reg>
 80026d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80026ea:	f107 0208 	add.w	r2, r7, #8
 80026ee:	2301      	movs	r3, #1
 80026f0:	2160      	movs	r1, #96	; 0x60
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff9d 	bl	8002632 <iis2mdc_read_reg>
 80026f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10f      	bne.n	8002720 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	b2da      	uxtb	r2, r3
 8002708:	7a3b      	ldrb	r3, [r7, #8]
 800270a:	f362 0383 	bfi	r3, r2, #2, #2
 800270e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002710:	f107 0208 	add.w	r2, r7, #8
 8002714:	2301      	movs	r3, #1
 8002716:	2160      	movs	r1, #96	; 0x60
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ffa2 	bl	8002662 <iis2mdc_write_reg>
 800271e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002720:	68fb      	ldr	r3, [r7, #12]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002736:	f107 0208 	add.w	r2, r7, #8
 800273a:	2301      	movs	r3, #1
 800273c:	2160      	movs	r1, #96	; 0x60
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff77 	bl	8002632 <iis2mdc_read_reg>
 8002744:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8002746:	7a3b      	ldrb	r3, [r7, #8]
 8002748:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b03      	cmp	r3, #3
 8002750:	d81a      	bhi.n	8002788 <iis2mdc_data_rate_get+0x5c>
 8002752:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <iis2mdc_data_rate_get+0x2c>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	08002769 	.word	0x08002769
 800275c:	08002771 	.word	0x08002771
 8002760:	08002779 	.word	0x08002779
 8002764:	08002781 	.word	0x08002781
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
      break;
 800276e:	e00f      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
      break;
 8002776:	e00b      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2202      	movs	r2, #2
 800277c:	701a      	strb	r2, [r3, #0]
      break;
 800277e:	e007      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2203      	movs	r2, #3
 8002784:	701a      	strb	r2, [r3, #0]
      break;
 8002786:	e003      	b.n	8002790 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
      break;
 800278e:	bf00      	nop
  }

  return ret;
 8002790:	68fb      	ldr	r3, [r7, #12]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop

0800279c <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027a8:	f107 0208 	add.w	r2, r7, #8
 80027ac:	2301      	movs	r3, #1
 80027ae:	2162      	movs	r1, #98	; 0x62
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff3e 	bl	8002632 <iis2mdc_read_reg>
 80027b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	7a3b      	ldrb	r3, [r7, #8]
 80027c8:	f362 1304 	bfi	r3, r2, #4, #1
 80027cc:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80027ce:	f107 0208 	add.w	r2, r7, #8
 80027d2:	2301      	movs	r3, #1
 80027d4:	2162      	movs	r1, #98	; 0x62
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ff43 	bl	8002662 <iis2mdc_write_reg>
 80027dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80027f2:	f107 020c 	add.w	r2, r7, #12
 80027f6:	2306      	movs	r3, #6
 80027f8:	2168      	movs	r1, #104	; 0x68
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ff19 	bl	8002632 <iis2mdc_read_reg>
 8002800:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002802:	7b7b      	ldrb	r3, [r7, #13]
 8002804:	b21a      	sxth	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	b29b      	uxth	r3, r3
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b29a      	uxth	r2, r3
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4413      	add	r3, r2
 800281c:	b29b      	uxth	r3, r3
 800281e:	b21a      	sxth	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	3302      	adds	r3, #2
 800282a:	b212      	sxth	r2, r2
 800282c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	3302      	adds	r3, #2
 8002832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002836:	b29b      	uxth	r3, r3
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	b29a      	uxth	r2, r3
 800283c:	7bbb      	ldrb	r3, [r7, #14]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4413      	add	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3302      	adds	r3, #2
 8002848:	b212      	sxth	r2, r2
 800284a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800284c:	7c7a      	ldrb	r2, [r7, #17]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	3304      	adds	r3, #4
 8002852:	b212      	sxth	r2, r2
 8002854:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	3304      	adds	r3, #4
 800285a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285e:	b29b      	uxth	r3, r3
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	b29a      	uxth	r2, r3
 8002864:	7c3b      	ldrb	r3, [r7, #16]
 8002866:	b29b      	uxth	r3, r3
 8002868:	4413      	add	r3, r2
 800286a:	b29a      	uxth	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3304      	adds	r3, #4
 8002870:	b212      	sxth	r2, r2
 8002872:	801a      	strh	r2, [r3, #0]
  return ret;
 8002874:	697b      	ldr	r3, [r7, #20]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8002888:	2301      	movs	r3, #1
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	214f      	movs	r1, #79	; 0x4f
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fecf 	bl	8002632 <iis2mdc_read_reg>
 8002894:	60f8      	str	r0, [r7, #12]
  return ret;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80028ac:	f107 0208 	add.w	r2, r7, #8
 80028b0:	2301      	movs	r3, #1
 80028b2:	2162      	movs	r1, #98	; 0x62
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff febc 	bl	8002632 <iis2mdc_read_reg>
 80028ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10f      	bne.n	80028e2 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	7a3b      	ldrb	r3, [r7, #8]
 80028cc:	f362 0341 	bfi	r3, r2, #1, #1
 80028d0:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80028d2:	f107 0208 	add.w	r2, r7, #8
 80028d6:	2301      	movs	r3, #1
 80028d8:	2162      	movs	r1, #98	; 0x62
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fec1 	bl	8002662 <iis2mdc_write_reg>
 80028e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80028f8:	f107 0208 	add.w	r2, r7, #8
 80028fc:	2301      	movs	r3, #1
 80028fe:	2162      	movs	r1, #98	; 0x62
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fe96 	bl	8002632 <iis2mdc_read_reg>
 8002906:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	7a3b      	ldrb	r3, [r7, #8]
 8002918:	f362 1345 	bfi	r3, r2, #5, #1
 800291c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800291e:	f107 0208 	add.w	r2, r7, #8
 8002922:	2301      	movs	r3, #1
 8002924:	2162      	movs	r1, #98	; 0x62
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fe9b 	bl	8002662 <iis2mdc_write_reg>
 800292c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d103      	bne.n	8002954 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 800294c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e04d      	b.n	80029f0 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	7b1a      	ldrb	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <ISM330DHCX_RegisterBusIO+0xc4>)
 8002990:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <ISM330DHCX_RegisterBusIO+0xc8>)
 8002996:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e020      	b.n	80029f0 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4798      	blx	r3
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e016      	b.n	80029f0 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d112      	bne.n	80029f0 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10d      	bne.n	80029f0 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80029d4:	230c      	movs	r3, #12
 80029d6:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	461a      	mov	r2, r3
 80029dc:	2112      	movs	r1, #18
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fd61 	bl	80034a6 <ISM330DHCX_Write_Reg>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80029f0:	68fb      	ldr	r3, [r7, #12]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	08003915 	.word	0x08003915
 8002a00:	0800394b 	.word	0x0800394b

08002a04 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	331c      	adds	r3, #28
 8002a10:	2101      	movs	r1, #1
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 fd18 	bl	8004448 <ism330dhcx_device_conf_set>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a22:	e078      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	331c      	adds	r3, #28
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 fd8f 	bl	800454e <ism330dhcx_auto_increment_set>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a3a:	e06c      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	331c      	adds	r3, #28
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fd5d 	bl	8004502 <ism330dhcx_reset_set>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a52:	e060      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	331c      	adds	r3, #28
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fd77 	bl	800454e <ism330dhcx_auto_increment_set>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8002a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6a:	e054      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	331c      	adds	r3, #28
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 fc2c 	bl	80042d0 <ism330dhcx_block_data_update_set>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	e048      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	331c      	adds	r3, #28
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 fd85 	bl	800459a <ism330dhcx_fifo_mode_set>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a9a:	e03c      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	331c      	adds	r3, #28
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fff6 	bl	8003a9c <ism330dhcx_xl_data_rate_set>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aba:	e02c      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	331c      	adds	r3, #28
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 ff8c 	bl	80039e0 <ism330dhcx_xl_full_scale_set>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ad2:	e020      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	331c      	adds	r3, #28
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 fa26 	bl	8003f34 <ism330dhcx_gy_data_rate_set>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af2:	e010      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	331c      	adds	r3, #28
 8002af8:	210c      	movs	r1, #12
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 f9a2 	bl	8003e44 <ism330dhcx_gy_full_scale_set>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0a:	e004      	b.n	8002b16 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f888 	bl	8002c3c <ISM330DHCX_ACC_Disable>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b36:	e015      	b.n	8002b64 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fa92 	bl	8003062 <ISM330DHCX_GYRO_Disable>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b48:	e00c      	b.n	8002b64 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	331c      	adds	r3, #28
 8002b7a:	6839      	ldr	r1, [r7, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fcaf 	bl	80044e0 <ism330dhcx_device_id_get>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8002b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b8c:	e000      	b.n	8002b90 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002bc0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <ISM330DHCX_GetCapabilities+0x58>)
 8002bd2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <ISM330DHCX_GetCapabilities+0x58>)
 8002bd8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	45d05800 	.word	0x45d05800

08002bf4 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e014      	b.n	8002c34 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f103 021c 	add.w	r2, r3, #28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f000 ff3f 	bl	8003a9c <ism330dhcx_xl_data_rate_set>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c28:	e004      	b.n	8002c34 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e01f      	b.n	8002c92 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f103 021c 	add.w	r2, r3, #28
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	332b      	adds	r3, #43	; 0x2b
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f001 f888 	bl	8003d74 <ism330dhcx_xl_data_rate_get>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c6e:	e010      	b.n	8002c92 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	331c      	adds	r3, #28
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 ff10 	bl	8003a9c <ism330dhcx_xl_data_rate_set>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c86:	e004      	b.n	8002c92 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	331c      	adds	r3, #28
 8002cae:	f107 020b 	add.w	r2, r7, #11
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 feb9 	bl	8003a2c <ism330dhcx_xl_full_scale_get>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc4:	e023      	b.n	8002d0e <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d81b      	bhi.n	8002d04 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002ce5 	.word	0x08002ce5
 8002cd8:	08002cfd 	.word	0x08002cfd
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf5 	.word	0x08002cf5
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8002ce8:	601a      	str	r2, [r3, #0]
      break;
 8002cea:	e00f      	b.n	8002d0c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8002cf0:	601a      	str	r2, [r3, #0]
      break;
 8002cf2:	e00b      	b.n	8002d0c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8002cf8:	601a      	str	r2, [r3, #0]
      break;
 8002cfa:	e007      	b.n	8002d0c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8002d00:	601a      	str	r2, [r3, #0]
      break;
 8002d02:	e003      	b.n	8002d0c <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d08:	60fb      	str	r3, [r7, #12]
      break;
 8002d0a:	bf00      	nop
  }

  return ret;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	3d79db23 	.word	0x3d79db23
 8002d1c:	3df9db23 	.word	0x3df9db23
 8002d20:	3e79db23 	.word	0x3e79db23
 8002d24:	3ef9db23 	.word	0x3ef9db23

08002d28 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	331c      	adds	r3, #28
 8002d3a:	f107 020b 	add.w	r2, r7, #11
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f817 	bl	8003d74 <ism330dhcx_xl_data_rate_get>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d50:	e04e      	b.n	8002df0 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8002d52:	7afb      	ldrb	r3, [r7, #11]
 8002d54:	2b0a      	cmp	r3, #10
 8002d56:	d846      	bhi.n	8002de6 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d8d 	.word	0x08002d8d
 8002d64:	08002d97 	.word	0x08002d97
 8002d68:	08002d9f 	.word	0x08002d9f
 8002d6c:	08002da7 	.word	0x08002da7
 8002d70:	08002daf 	.word	0x08002daf
 8002d74:	08002db7 	.word	0x08002db7
 8002d78:	08002dbf 	.word	0x08002dbf
 8002d7c:	08002dc7 	.word	0x08002dc7
 8002d80:	08002dcf 	.word	0x08002dcf
 8002d84:	08002dd7 	.word	0x08002dd7
 8002d88:	08002ddf 	.word	0x08002ddf
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
      break;
 8002d94:	e02b      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8002d9a:	601a      	str	r2, [r3, #0]
      break;
 8002d9c:	e027      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8002da2:	601a      	str	r2, [r3, #0]
      break;
 8002da4:	e023      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8002daa:	601a      	str	r2, [r3, #0]
      break;
 8002dac:	e01f      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8002db2:	601a      	str	r2, [r3, #0]
      break;
 8002db4:	e01b      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8002dba:	601a      	str	r2, [r3, #0]
      break;
 8002dbc:	e017      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8002dc2:	601a      	str	r2, [r3, #0]
      break;
 8002dc4:	e013      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8002dca:	601a      	str	r2, [r3, #0]
      break;
 8002dcc:	e00f      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8002dd2:	601a      	str	r2, [r3, #0]
      break;
 8002dd4:	e00b      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	4a0f      	ldr	r2, [pc, #60]	; (8002e18 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8002dda:	601a      	str	r2, [r3, #0]
      break;
 8002ddc:	e007      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8002de2:	601a      	str	r2, [r3, #0]
      break;
 8002de4:	e003      	b.n	8002dee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dea:	60fb      	str	r3, [r7, #12]
      break;
 8002dec:	bf00      	nop
  }

  return ret;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	41480000 	.word	0x41480000
 8002dfc:	41d00000 	.word	0x41d00000
 8002e00:	42500000 	.word	0x42500000
 8002e04:	42d00000 	.word	0x42d00000
 8002e08:	43500000 	.word	0x43500000
 8002e0c:	43d08000 	.word	0x43d08000
 8002e10:	44504000 	.word	0x44504000
 8002e14:	44d06000 	.word	0x44d06000
 8002e18:	45505000 	.word	0x45505000
 8002e1c:	45d05800 	.word	0x45d05800

08002e20 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d106      	bne.n	8002e44 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002e36:	ed97 0a00 	vldr	s0, [r7]
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fb4e 	bl	80034dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8002e40:	4603      	mov	r3, r0
 8002e42:	e005      	b.n	8002e50 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002e44:	ed97 0a00 	vldr	s0, [r7]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fbd3 	bl	80035f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8002e4e:	4603      	mov	r3, r0
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	331c      	adds	r3, #28
 8002e6a:	f107 020b 	add.w	r2, r7, #11
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fddb 	bl	8003a2c <ism330dhcx_xl_full_scale_get>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e80:	e023      	b.n	8002eca <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d81b      	bhi.n	8002ec0 <ISM330DHCX_ACC_GetFullScale+0x68>
 8002e88:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8002e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8e:	bf00      	nop
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002eb1 	.word	0x08002eb1
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
      break;
 8002ea6:	e00f      	b.n	8002ec8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	601a      	str	r2, [r3, #0]
      break;
 8002eae:	e00b      	b.n	8002ec8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	601a      	str	r2, [r3, #0]
      break;
 8002eb6:	e007      	b.n	8002ec8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	601a      	str	r2, [r3, #0]
      break;
 8002ebe:	e003      	b.n	8002ec8 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec4:	60fb      	str	r3, [r7, #12]
      break;
 8002ec6:	bf00      	nop
  }

  return ret;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	dd0b      	ble.n	8002efc <ISM330DHCX_ACC_SetFullScale+0x28>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	dd06      	ble.n	8002ef8 <ISM330DHCX_ACC_SetFullScale+0x24>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	dc01      	bgt.n	8002ef4 <ISM330DHCX_ACC_SetFullScale+0x20>
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e004      	b.n	8002efe <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e002      	b.n	8002efe <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e000      	b.n	8002efe <ISM330DHCX_ACC_SetFullScale+0x2a>
 8002efc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8002efe:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	331c      	adds	r3, #28
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fd69 	bl	80039e0 <ism330dhcx_xl_full_scale_set>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f18:	e000      	b.n	8002f1c <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	331c      	adds	r3, #28
 8002f32:	f107 0208 	add.w	r2, r7, #8
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 fa3a 	bl	80043b2 <ism330dhcx_acceleration_raw_get>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f48:	e00c      	b.n	8002f64 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002f4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002f52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002f5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	331c      	adds	r3, #28
 8002f80:	f107 0210 	add.w	r2, r7, #16
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fa13 	bl	80043b2 <ism330dhcx_acceleration_raw_get>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f96:	e03c      	b.n	8003012 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fe7c 	bl	8002c9c <ISM330DHCX_ACC_GetSensitivity>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fae:	e030      	b.n	8003012 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002fb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc8:	ee17 2a90 	vmov	r2, s15
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002fd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe8:	ee17 2a90 	vmov	r2, s15
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002ff0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003008:	ee17 2a90 	vmov	r2, s15
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	e014      	b.n	800305a <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f103 021c 	add.w	r2, r3, #28
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 ff78 	bl	8003f34 <ism330dhcx_gy_data_rate_set>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800304e:	e004      	b.n	800305a <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e01f      	b.n	80030b8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f103 021c 	add.w	r2, r3, #28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	332c      	adds	r3, #44	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f001 f8c1 	bl	800420c <ism330dhcx_gy_data_rate_get>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003094:	e010      	b.n	80030b8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	331c      	adds	r3, #28
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f000 ff49 	bl	8003f34 <ism330dhcx_gy_data_rate_set>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ac:	e004      	b.n	80030b8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	331c      	adds	r3, #28
 80030d2:	f107 020b 	add.w	r2, r7, #11
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fed9 	bl	8003e90 <ism330dhcx_gy_full_scale_get>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e8:	e039      	b.n	800315e <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80030ea:	7afb      	ldrb	r3, [r7, #11]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d831      	bhi.n	8003154 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 80030f0:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	08003135 	.word	0x08003135
 80030fc:	08003155 	.word	0x08003155
 8003100:	0800312d 	.word	0x0800312d
 8003104:	08003155 	.word	0x08003155
 8003108:	0800313d 	.word	0x0800313d
 800310c:	08003155 	.word	0x08003155
 8003110:	08003155 	.word	0x08003155
 8003114:	08003155 	.word	0x08003155
 8003118:	08003145 	.word	0x08003145
 800311c:	08003155 	.word	0x08003155
 8003120:	08003155 	.word	0x08003155
 8003124:	08003155 	.word	0x08003155
 8003128:	0800314d 	.word	0x0800314d
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8003130:	601a      	str	r2, [r3, #0]
      break;
 8003132:	e013      	b.n	800315c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4a0d      	ldr	r2, [pc, #52]	; (800316c <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8003138:	601a      	str	r2, [r3, #0]
      break;
 800313a:	e00f      	b.n	800315c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8003140:	601a      	str	r2, [r3, #0]
      break;
 8003142:	e00b      	b.n	800315c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4a0b      	ldr	r2, [pc, #44]	; (8003174 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8003148:	601a      	str	r2, [r3, #0]
      break;
 800314a:	e007      	b.n	800315c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8003150:	601a      	str	r2, [r3, #0]
      break;
 8003152:	e003      	b.n	800315c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003158:	60fb      	str	r3, [r7, #12]
      break;
 800315a:	bf00      	nop
  }

  return ret;
 800315c:	68fb      	ldr	r3, [r7, #12]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	408c0000 	.word	0x408c0000
 800316c:	410c0000 	.word	0x410c0000
 8003170:	418c0000 	.word	0x418c0000
 8003174:	420c0000 	.word	0x420c0000
 8003178:	428c0000 	.word	0x428c0000

0800317c <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	331c      	adds	r3, #28
 800318e:	f107 020b 	add.w	r2, r7, #11
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f001 f839 	bl	800420c <ism330dhcx_gy_data_rate_get>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031a4:	e04e      	b.n	8003244 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	2b0a      	cmp	r3, #10
 80031aa:	d846      	bhi.n	800323a <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031eb 	.word	0x080031eb
 80031bc:	080031f3 	.word	0x080031f3
 80031c0:	080031fb 	.word	0x080031fb
 80031c4:	08003203 	.word	0x08003203
 80031c8:	0800320b 	.word	0x0800320b
 80031cc:	08003213 	.word	0x08003213
 80031d0:	0800321b 	.word	0x0800321b
 80031d4:	08003223 	.word	0x08003223
 80031d8:	0800322b 	.word	0x0800322b
 80031dc:	08003233 	.word	0x08003233
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
      break;
 80031e8:	e02b      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 80031ee:	601a      	str	r2, [r3, #0]
      break;
 80031f0:	e027      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 80031f6:	601a      	str	r2, [r3, #0]
      break;
 80031f8:	e023      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	4a15      	ldr	r2, [pc, #84]	; (8003254 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 80031fe:	601a      	str	r2, [r3, #0]
      break;
 8003200:	e01f      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8003206:	601a      	str	r2, [r3, #0]
      break;
 8003208:	e01b      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 800320e:	601a      	str	r2, [r3, #0]
      break;
 8003210:	e017      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8003216:	601a      	str	r2, [r3, #0]
      break;
 8003218:	e013      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	4a11      	ldr	r2, [pc, #68]	; (8003264 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 800321e:	601a      	str	r2, [r3, #0]
      break;
 8003220:	e00f      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	4a10      	ldr	r2, [pc, #64]	; (8003268 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8003226:	601a      	str	r2, [r3, #0]
      break;
 8003228:	e00b      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4a0f      	ldr	r2, [pc, #60]	; (800326c <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800322e:	601a      	str	r2, [r3, #0]
      break;
 8003230:	e007      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8003236:	601a      	str	r2, [r3, #0]
      break;
 8003238:	e003      	b.n	8003242 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800323e:	60fb      	str	r3, [r7, #12]
      break;
 8003240:	bf00      	nop
  }

  return ret;
 8003242:	68fb      	ldr	r3, [r7, #12]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	41480000 	.word	0x41480000
 8003250:	41d00000 	.word	0x41d00000
 8003254:	42500000 	.word	0x42500000
 8003258:	42d00000 	.word	0x42d00000
 800325c:	43500000 	.word	0x43500000
 8003260:	43d08000 	.word	0x43d08000
 8003264:	44504000 	.word	0x44504000
 8003268:	44d06000 	.word	0x44d06000
 800326c:	45505000 	.word	0x45505000
 8003270:	45d05800 	.word	0x45d05800

08003274 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003286:	2b01      	cmp	r3, #1
 8003288:	d106      	bne.n	8003298 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800328a:	ed97 0a00 	vldr	s0, [r7]
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa32 	bl	80036f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8003294:	4603      	mov	r3, r0
 8003296:	e005      	b.n	80032a4 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003298:	ed97 0a00 	vldr	s0, [r7]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fab7 	bl	8003810 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80032a2:	4603      	mov	r3, r0
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	331c      	adds	r3, #28
 80032be:	f107 020b 	add.w	r2, r7, #11
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fde3 	bl	8003e90 <ism330dhcx_gy_full_scale_get>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d4:	e03c      	b.n	8003350 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 80032d6:	7afb      	ldrb	r3, [r7, #11]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d834      	bhi.n	8003346 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	08003321 	.word	0x08003321
 80032e8:	08003347 	.word	0x08003347
 80032ec:	08003319 	.word	0x08003319
 80032f0:	08003347 	.word	0x08003347
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003347 	.word	0x08003347
 80032fc:	08003347 	.word	0x08003347
 8003300:	08003347 	.word	0x08003347
 8003304:	08003333 	.word	0x08003333
 8003308:	08003347 	.word	0x08003347
 800330c:	08003347 	.word	0x08003347
 8003310:	08003347 	.word	0x08003347
 8003314:	0800333d 	.word	0x0800333d
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	227d      	movs	r2, #125	; 0x7d
 800331c:	601a      	str	r2, [r3, #0]
      break;
 800331e:	e016      	b.n	800334e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	22fa      	movs	r2, #250	; 0xfa
 8003324:	601a      	str	r2, [r3, #0]
      break;
 8003326:	e012      	b.n	800334e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800332e:	601a      	str	r2, [r3, #0]
      break;
 8003330:	e00d      	b.n	800334e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003338:	601a      	str	r2, [r3, #0]
      break;
 800333a:	e008      	b.n	800334e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003342:	601a      	str	r2, [r3, #0]
      break;
 8003344:	e003      	b.n	800334e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8003346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800334a:	60fb      	str	r3, [r7, #12]
      break;
 800334c:	bf00      	nop
  }

  return ret;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b7d      	cmp	r3, #125	; 0x7d
 8003366:	dd12      	ble.n	800338e <ISM330DHCX_GYRO_SetFullScale+0x36>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2bfa      	cmp	r3, #250	; 0xfa
 800336c:	dd0d      	ble.n	800338a <ISM330DHCX_GYRO_SetFullScale+0x32>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003374:	dd07      	ble.n	8003386 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337c:	dc01      	bgt.n	8003382 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 800337e:	2308      	movs	r3, #8
 8003380:	e006      	b.n	8003390 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003382:	230c      	movs	r3, #12
 8003384:	e004      	b.n	8003390 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003386:	2304      	movs	r3, #4
 8003388:	e002      	b.n	8003390 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800338e:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8003390:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	331c      	adds	r3, #28
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd52 	bl	8003e44 <ism330dhcx_gy_full_scale_set>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033aa:	e000      	b.n	80033ae <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	331c      	adds	r3, #28
 80033c4:	f107 0208 	add.w	r2, r7, #8
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 ffa6 	bl	800431c <ism330dhcx_angular_rate_raw_get>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033da:	e00c      	b.n	80033f6 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80033dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80033e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80033ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	331c      	adds	r3, #28
 800340c:	f107 0210 	add.w	r2, r7, #16
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ff82 	bl	800431c <ism330dhcx_angular_rate_raw_get>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800341e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003422:	e03c      	b.n	800349e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff fe48 	bl	80030c0 <ISM330DHCX_GYRO_GetSensitivity>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800343a:	e030      	b.n	800349e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800343c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003448:	edd7 7a03 	vldr	s15, [r7, #12]
 800344c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003454:	ee17 2a90 	vmov	r2, s15
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800345c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003468:	edd7 7a03 	vldr	s15, [r7, #12]
 800346c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003474:	ee17 2a90 	vmov	r2, s15
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800347c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003488:	edd7 7a03 	vldr	s15, [r7, #12]
 800348c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003494:	ee17 2a90 	vmov	r2, s15
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
 80034b2:	4613      	mov	r3, r2
 80034b4:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f103 001c 	add.w	r0, r3, #28
 80034bc:	1cba      	adds	r2, r7, #2
 80034be:	78f9      	ldrb	r1, [r7, #3]
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 fa75 	bl	80039b0 <ism330dhcx_write_reg>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034d0:	e000      	b.n	80034d4 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80034e8:	edd7 7a00 	vldr	s15, [r7]
 80034ec:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80034f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f8:	d801      	bhi.n	80034fe <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e058      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80034fe:	edd7 7a00 	vldr	s15, [r7]
 8003502:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	d801      	bhi.n	8003514 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003510:	2302      	movs	r3, #2
 8003512:	e04d      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003514:	edd7 7a00 	vldr	s15, [r7]
 8003518:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80035d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800351c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003524:	d801      	bhi.n	800352a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003526:	2303      	movs	r3, #3
 8003528:	e042      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800352a:	edd7 7a00 	vldr	s15, [r7]
 800352e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80035dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353a:	d801      	bhi.n	8003540 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 800353c:	2304      	movs	r3, #4
 800353e:	e037      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003540:	edd7 7a00 	vldr	s15, [r7]
 8003544:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80035e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003550:	d801      	bhi.n	8003556 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003552:	2305      	movs	r3, #5
 8003554:	e02c      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003556:	edd7 7a00 	vldr	s15, [r7]
 800355a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80035e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800355e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	d801      	bhi.n	800356c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003568:	2306      	movs	r3, #6
 800356a:	e021      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800356c:	edd7 7a00 	vldr	s15, [r7]
 8003570:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80035e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	d801      	bhi.n	8003582 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800357e:	2307      	movs	r3, #7
 8003580:	e016      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003582:	edd7 7a00 	vldr	s15, [r7]
 8003586:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80035ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800358a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	d801      	bhi.n	8003598 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003594:	2308      	movs	r3, #8
 8003596:	e00b      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003598:	edd7 7a00 	vldr	s15, [r7]
 800359c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80035f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80035a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	d801      	bhi.n	80035ae <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80035aa:	2309      	movs	r3, #9
 80035ac:	e000      	b.n	80035b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80035ae:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80035b0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	331c      	adds	r3, #28
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fa6e 	bl	8003a9c <ism330dhcx_xl_data_rate_set>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ca:	e000      	b.n	80035ce <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	42500000 	.word	0x42500000
 80035dc:	42d00000 	.word	0x42d00000
 80035e0:	43500000 	.word	0x43500000
 80035e4:	43d08000 	.word	0x43d08000
 80035e8:	44504000 	.word	0x44504000
 80035ec:	44d06000 	.word	0x44d06000
 80035f0:	45505000 	.word	0x45505000

080035f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003600:	edd7 7a00 	vldr	s15, [r7]
 8003604:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	d801      	bhi.n	8003616 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003612:	2301      	movs	r3, #1
 8003614:	e058      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003616:	edd7 7a00 	vldr	s15, [r7]
 800361a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800361e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003626:	d801      	bhi.n	800362c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003628:	2302      	movs	r3, #2
 800362a:	e04d      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800362c:	edd7 7a00 	vldr	s15, [r7]
 8003630:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80036dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363c:	d801      	bhi.n	8003642 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800363e:	2303      	movs	r3, #3
 8003640:	e042      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003642:	edd7 7a00 	vldr	s15, [r7]
 8003646:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80036e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800364a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	d801      	bhi.n	8003658 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003654:	2304      	movs	r3, #4
 8003656:	e037      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003658:	edd7 7a00 	vldr	s15, [r7]
 800365c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80036e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003668:	d801      	bhi.n	800366e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800366a:	2305      	movs	r3, #5
 800366c:	e02c      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800366e:	edd7 7a00 	vldr	s15, [r7]
 8003672:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80036e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d801      	bhi.n	8003684 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003680:	2306      	movs	r3, #6
 8003682:	e021      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003684:	edd7 7a00 	vldr	s15, [r7]
 8003688:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80036ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800368c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003694:	d801      	bhi.n	800369a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003696:	2307      	movs	r3, #7
 8003698:	e016      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800369a:	edd7 7a00 	vldr	s15, [r7]
 800369e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80036f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80036a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036aa:	d801      	bhi.n	80036b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80036ac:	2308      	movs	r3, #8
 80036ae:	e00b      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80036b0:	edd7 7a00 	vldr	s15, [r7]
 80036b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80036f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80036b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d801      	bhi.n	80036c6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80036c2:	2309      	movs	r3, #9
 80036c4:	e000      	b.n	80036c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80036c6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	42500000 	.word	0x42500000
 80036e0:	42d00000 	.word	0x42d00000
 80036e4:	43500000 	.word	0x43500000
 80036e8:	43d08000 	.word	0x43d08000
 80036ec:	44504000 	.word	0x44504000
 80036f0:	44d06000 	.word	0x44d06000
 80036f4:	45505000 	.word	0x45505000

080036f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003704:	edd7 7a00 	vldr	s15, [r7]
 8003708:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800370c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d801      	bhi.n	800371a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003716:	2301      	movs	r3, #1
 8003718:	e058      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800371a:	edd7 7a00 	vldr	s15, [r7]
 800371e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372a:	d801      	bhi.n	8003730 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800372c:	2302      	movs	r3, #2
 800372e:	e04d      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003730:	edd7 7a00 	vldr	s15, [r7]
 8003734:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80037f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003740:	d801      	bhi.n	8003746 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003742:	2303      	movs	r3, #3
 8003744:	e042      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003746:	edd7 7a00 	vldr	s15, [r7]
 800374a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80037f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800374e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	d801      	bhi.n	800375c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003758:	2304      	movs	r3, #4
 800375a:	e037      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800375c:	edd7 7a00 	vldr	s15, [r7]
 8003760:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80037fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	d801      	bhi.n	8003772 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800376e:	2305      	movs	r3, #5
 8003770:	e02c      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003772:	edd7 7a00 	vldr	s15, [r7]
 8003776:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003800 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800377a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	d801      	bhi.n	8003788 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003784:	2306      	movs	r3, #6
 8003786:	e021      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003788:	edd7 7a00 	vldr	s15, [r7]
 800378c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003804 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d801      	bhi.n	800379e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800379a:	2307      	movs	r3, #7
 800379c:	e016      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800379e:	edd7 7a00 	vldr	s15, [r7]
 80037a2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003808 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d801      	bhi.n	80037b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80037b0:	2308      	movs	r3, #8
 80037b2:	e00b      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80037b4:	edd7 7a00 	vldr	s15, [r7]
 80037b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800380c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80037bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	d801      	bhi.n	80037ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80037c6:	2309      	movs	r3, #9
 80037c8:	e000      	b.n	80037cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80037ca:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80037cc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	331c      	adds	r3, #28
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fbac 	bl	8003f34 <ism330dhcx_gy_data_rate_set>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037e6:	e000      	b.n	80037ea <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	42500000 	.word	0x42500000
 80037f8:	42d00000 	.word	0x42d00000
 80037fc:	43500000 	.word	0x43500000
 8003800:	43d08000 	.word	0x43d08000
 8003804:	44504000 	.word	0x44504000
 8003808:	44d06000 	.word	0x44d06000
 800380c:	45505000 	.word	0x45505000

08003810 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800381c:	edd7 7a00 	vldr	s15, [r7]
 8003820:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	d801      	bhi.n	8003832 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800382e:	2301      	movs	r3, #1
 8003830:	e058      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003832:	edd7 7a00 	vldr	s15, [r7]
 8003836:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800383a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	d801      	bhi.n	8003848 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003844:	2302      	movs	r3, #2
 8003846:	e04d      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003848:	edd7 7a00 	vldr	s15, [r7]
 800384c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80038f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003858:	d801      	bhi.n	800385e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800385a:	2303      	movs	r3, #3
 800385c:	e042      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800385e:	edd7 7a00 	vldr	s15, [r7]
 8003862:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80038fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386e:	d801      	bhi.n	8003874 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003870:	2304      	movs	r3, #4
 8003872:	e037      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003874:	edd7 7a00 	vldr	s15, [r7]
 8003878:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003900 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800387c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	d801      	bhi.n	800388a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003886:	2305      	movs	r3, #5
 8003888:	e02c      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800388a:	edd7 7a00 	vldr	s15, [r7]
 800388e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003904 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389a:	d801      	bhi.n	80038a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800389c:	2306      	movs	r3, #6
 800389e:	e021      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80038a0:	edd7 7a00 	vldr	s15, [r7]
 80038a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003908 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80038a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	d801      	bhi.n	80038b6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80038b2:	2307      	movs	r3, #7
 80038b4:	e016      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80038b6:	edd7 7a00 	vldr	s15, [r7]
 80038ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800390c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80038be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	d801      	bhi.n	80038cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80038c8:	2308      	movs	r3, #8
 80038ca:	e00b      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80038cc:	edd7 7a00 	vldr	s15, [r7]
 80038d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003910 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80038d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	d801      	bhi.n	80038e2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80038de:	2309      	movs	r3, #9
 80038e0:	e000      	b.n	80038e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80038e2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	42500000 	.word	0x42500000
 80038fc:	42d00000 	.word	0x42d00000
 8003900:	43500000 	.word	0x43500000
 8003904:	43d08000 	.word	0x43d08000
 8003908:	44504000 	.word	0x44504000
 800390c:	44d06000 	.word	0x44d06000
 8003910:	45505000 	.word	0x45505000

08003914 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	461a      	mov	r2, r3
 8003920:	460b      	mov	r3, r1
 8003922:	72fb      	strb	r3, [r7, #11]
 8003924:	4613      	mov	r3, r2
 8003926:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	695c      	ldr	r4, [r3, #20]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	7b1b      	ldrb	r3, [r3, #12]
 8003934:	b298      	uxth	r0, r3
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	b299      	uxth	r1, r3
 800393a:	893b      	ldrh	r3, [r7, #8]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	47a0      	blx	r4
 8003940:	4603      	mov	r3, r0
}
 8003942:	4618      	mov	r0, r3
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}

0800394a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800394a:	b590      	push	{r4, r7, lr}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	461a      	mov	r2, r3
 8003956:	460b      	mov	r3, r1
 8003958:	72fb      	strb	r3, [r7, #11]
 800395a:	4613      	mov	r3, r2
 800395c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	691c      	ldr	r4, [r3, #16]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	7b1b      	ldrb	r3, [r3, #12]
 800396a:	b298      	uxth	r0, r3
 800396c:	7afb      	ldrb	r3, [r7, #11]
 800396e:	b299      	uxth	r1, r3
 8003970:	893b      	ldrh	r3, [r7, #8]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	47a0      	blx	r4
 8003976:	4603      	mov	r3, r0
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	460b      	mov	r3, r1
 800398e:	72fb      	strb	r3, [r7, #11]
 8003990:	4613      	mov	r3, r2
 8003992:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685c      	ldr	r4, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6898      	ldr	r0, [r3, #8]
 800399c:	893b      	ldrh	r3, [r7, #8]
 800399e:	7af9      	ldrb	r1, [r7, #11]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	47a0      	blx	r4
 80039a4:	6178      	str	r0, [r7, #20]
  return ret;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd90      	pop	{r4, r7, pc}

080039b0 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	461a      	mov	r2, r3
 80039bc:	460b      	mov	r3, r1
 80039be:	72fb      	strb	r3, [r7, #11]
 80039c0:	4613      	mov	r3, r2
 80039c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681c      	ldr	r4, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6898      	ldr	r0, [r3, #8]
 80039cc:	893b      	ldrh	r3, [r7, #8]
 80039ce:	7af9      	ldrb	r1, [r7, #11]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	47a0      	blx	r4
 80039d4:	6178      	str	r0, [r7, #20]
  return ret;
 80039d6:	697b      	ldr	r3, [r7, #20]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd90      	pop	{r4, r7, pc}

080039e0 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80039ec:	f107 0208 	add.w	r2, r7, #8
 80039f0:	2301      	movs	r3, #1
 80039f2:	2110      	movs	r1, #16
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ffc3 	bl	8003980 <ism330dhcx_read_reg>
 80039fa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	7a3b      	ldrb	r3, [r7, #8]
 8003a0c:	f362 0383 	bfi	r3, r2, #2, #2
 8003a10:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003a12:	f107 0208 	add.w	r2, r7, #8
 8003a16:	2301      	movs	r3, #1
 8003a18:	2110      	movs	r1, #16
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ffc8 	bl	80039b0 <ism330dhcx_write_reg>
 8003a20:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003a36:	f107 0208 	add.w	r2, r7, #8
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	2110      	movs	r1, #16
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ff9e 	bl	8003980 <ism330dhcx_read_reg>
 8003a44:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8003a46:	7a3b      	ldrb	r3, [r7, #8]
 8003a48:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d81a      	bhi.n	8003a88 <ism330dhcx_xl_full_scale_get+0x5c>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <ism330dhcx_xl_full_scale_get+0x2c>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a71 	.word	0x08003a71
 8003a60:	08003a79 	.word	0x08003a79
 8003a64:	08003a81 	.word	0x08003a81
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
      break;
 8003a6e:	e00f      	b.n	8003a90 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
      break;
 8003a76:	e00b      	b.n	8003a90 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
      break;
 8003a7e:	e007      	b.n	8003a90 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2203      	movs	r2, #3
 8003a84:	701a      	strb	r2, [r3, #0]
      break;
 8003a86:	e003      	b.n	8003a90 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
      break;
 8003a8e:	bf00      	nop
  }

  return ret;
 8003a90:	68fb      	ldr	r3, [r7, #12]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop

08003a9c <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fd97 	bl	80045e6 <ism330dhcx_fsm_enable_get>
 8003ab8:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 80c4 	bne.w	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003ac2:	7b3b      	ldrb	r3, [r7, #12]
 8003ac4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ac8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003aca:	7b3b      	ldrb	r3, [r7, #12]
 8003acc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ad0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003ad6:	7b3b      	ldrb	r3, [r7, #12]
 8003ad8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003adc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003ae2:	7b3b      	ldrb	r3, [r7, #12]
 8003ae4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ae8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003aea:	4313      	orrs	r3, r2
 8003aec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003aee:	7b3b      	ldrb	r3, [r7, #12]
 8003af0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003af4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003af6:	4313      	orrs	r3, r2
 8003af8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003afa:	7b3b      	ldrb	r3, [r7, #12]
 8003afc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b00:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003b02:	4313      	orrs	r3, r2
 8003b04:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003b06:	7b3b      	ldrb	r3, [r7, #12]
 8003b08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003b0c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003b12:	7b3b      	ldrb	r3, [r7, #12]
 8003b14:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b18:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003b1e:	7b7b      	ldrb	r3, [r7, #13]
 8003b20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b24:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003b26:	4313      	orrs	r3, r2
 8003b28:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003b2a:	7b7b      	ldrb	r3, [r7, #13]
 8003b2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b30:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003b36:	7b7b      	ldrb	r3, [r7, #13]
 8003b38:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b3c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003b42:	7b7b      	ldrb	r3, [r7, #13]
 8003b44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003b48:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003b4e:	7b7b      	ldrb	r3, [r7, #13]
 8003b50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b54:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003b5a:	7b7b      	ldrb	r3, [r7, #13]
 8003b5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b60:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003b62:	4313      	orrs	r3, r2
 8003b64:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003b66:	7b7b      	ldrb	r3, [r7, #13]
 8003b68:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003b6c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003b72:	7b7b      	ldrb	r3, [r7, #13]
 8003b74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003b78:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d163      	bne.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8003b82:	f107 030b 	add.w	r3, r7, #11
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fd59 	bl	8004640 <ism330dhcx_fsm_data_rate_get>
 8003b8e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d159      	bne.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d853      	bhi.n	8003c44 <ism330dhcx_xl_data_rate_set+0x1a8>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <ism330dhcx_xl_data_rate_set+0x108>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bc7 	.word	0x08003bc7
 8003bac:	08003be5 	.word	0x08003be5
 8003bb0:	08003c0f 	.word	0x08003c0f
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bbe:	e044      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	75fb      	strb	r3, [r7, #23]
            break;
 8003bc4:	e041      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bd0:	e03b      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d102      	bne.n	8003bde <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	75fb      	strb	r3, [r7, #23]
            break;
 8003bdc:	e035      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	75fb      	strb	r3, [r7, #23]
            break;
 8003be2:	e032      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003bea:	2303      	movs	r3, #3
 8003bec:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003bee:	e02c      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d102      	bne.n	8003bfc <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	75fb      	strb	r3, [r7, #23]
            break;
 8003bfa:	e026      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d102      	bne.n	8003c08 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003c02:	2303      	movs	r3, #3
 8003c04:	75fb      	strb	r3, [r7, #23]
            break;
 8003c06:	e020      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c0c:	e01d      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c14:	2304      	movs	r3, #4
 8003c16:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003c18:	e017      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d102      	bne.n	8003c26 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c20:	2304      	movs	r3, #4
 8003c22:	75fb      	strb	r3, [r7, #23]
            break;
 8003c24:	e011      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d102      	bne.n	8003c32 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	75fb      	strb	r3, [r7, #23]
            break;
 8003c30:	e00b      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d102      	bne.n	8003c3e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c3c:	e005      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	75fb      	strb	r3, [r7, #23]
            break;
 8003c42:	e002      	b.n	8003c4a <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	75fb      	strb	r3, [r7, #23]
            break;
 8003c48:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d16c      	bne.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8003c54:	f107 030a 	add.w	r3, r7, #10
 8003c58:	4619      	mov	r1, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fd38 	bl	80046d0 <ism330dhcx_mlc_get>
 8003c60:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8003c62:	7abb      	ldrb	r3, [r7, #10]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d162      	bne.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8003c68:	f107 0309 	add.w	r3, r7, #9
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fd58 	bl	8004724 <ism330dhcx_mlc_data_rate_get>
 8003c74:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d158      	bne.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
        switch (mlc_odr) {
 8003c7c:	7a7b      	ldrb	r3, [r7, #9]
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d852      	bhi.n	8003d28 <ism330dhcx_xl_data_rate_set+0x28c>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003cab 	.word	0x08003cab
 8003c90:	08003cc9 	.word	0x08003cc9
 8003c94:	08003cf3 	.word	0x08003cf3
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <ism330dhcx_xl_data_rate_set+0x208>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003ca2:	e044      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	75fb      	strb	r3, [r7, #23]
            break;
 8003ca8:	e041      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <ism330dhcx_xl_data_rate_set+0x21a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003cb4:	e03b      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d102      	bne.n	8003cc2 <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	75fb      	strb	r3, [r7, #23]
            break;
 8003cc0:	e035      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8003cc6:	e032      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <ism330dhcx_xl_data_rate_set+0x238>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003cd2:	e02c      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d102      	bne.n	8003ce0 <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	75fb      	strb	r3, [r7, #23]
            break;
 8003cde:	e026      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d102      	bne.n	8003cec <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	75fb      	strb	r3, [r7, #23]
            break;
 8003cea:	e020      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	75fb      	strb	r3, [r7, #23]
            break;
 8003cf0:	e01d      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <ism330dhcx_xl_data_rate_set+0x262>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8003cfc:	e017      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003d04:	2304      	movs	r3, #4
 8003d06:	75fb      	strb	r3, [r7, #23]
            break;
 8003d08:	e011      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d102      	bne.n	8003d16 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003d10:	2304      	movs	r3, #4
 8003d12:	75fb      	strb	r3, [r7, #23]
            break;
 8003d14:	e00b      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d102      	bne.n	8003d22 <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d20:	e005      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	75fb      	strb	r3, [r7, #23]
            break;
 8003d26:	e002      	b.n	8003d2e <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	75fb      	strb	r3, [r7, #23]
            break;
 8003d2c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <ism330dhcx_xl_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d34:	f107 0208 	add.w	r2, r7, #8
 8003d38:	2301      	movs	r3, #1
 8003d3a:	2110      	movs	r1, #16
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fe1f 	bl	8003980 <ism330dhcx_read_reg>
 8003d42:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <ism330dhcx_xl_data_rate_set+0x2ce>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	7a3b      	ldrb	r3, [r7, #8]
 8003d54:	f362 1307 	bfi	r3, r2, #4, #4
 8003d58:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d5a:	f107 0208 	add.w	r2, r7, #8
 8003d5e:	2301      	movs	r3, #1
 8003d60:	2110      	movs	r1, #16
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fe24 	bl	80039b0 <ism330dhcx_write_reg>
 8003d68:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003d6a:	693b      	ldr	r3, [r7, #16]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8003d7e:	f107 0208 	add.w	r2, r7, #8
 8003d82:	2301      	movs	r3, #1
 8003d84:	2110      	movs	r1, #16
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fdfa 	bl	8003980 <ism330dhcx_read_reg>
 8003d8c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 8003d8e:	7a3b      	ldrb	r3, [r7, #8]
 8003d90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b0b      	cmp	r3, #11
 8003d98:	d84a      	bhi.n	8003e30 <ism330dhcx_xl_data_rate_get+0xbc>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <ism330dhcx_xl_data_rate_get+0x2c>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dd1 	.word	0x08003dd1
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003de1 	.word	0x08003de1
 8003dac:	08003de9 	.word	0x08003de9
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003e01 	.word	0x08003e01
 8003dbc:	08003e09 	.word	0x08003e09
 8003dc0:	08003e11 	.word	0x08003e11
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e29 	.word	0x08003e29
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
      break;
 8003dd6:	e02f      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
      break;
 8003dde:	e02b      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2202      	movs	r2, #2
 8003de4:	701a      	strb	r2, [r3, #0]
      break;
 8003de6:	e027      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2203      	movs	r2, #3
 8003dec:	701a      	strb	r2, [r3, #0]
      break;
 8003dee:	e023      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2204      	movs	r2, #4
 8003df4:	701a      	strb	r2, [r3, #0]
      break;
 8003df6:	e01f      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	701a      	strb	r2, [r3, #0]
      break;
 8003dfe:	e01b      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2206      	movs	r2, #6
 8003e04:	701a      	strb	r2, [r3, #0]
      break;
 8003e06:	e017      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	701a      	strb	r2, [r3, #0]
      break;
 8003e0e:	e013      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2208      	movs	r2, #8
 8003e14:	701a      	strb	r2, [r3, #0]
      break;
 8003e16:	e00f      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2209      	movs	r2, #9
 8003e1c:	701a      	strb	r2, [r3, #0]
      break;
 8003e1e:	e00b      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	220a      	movs	r2, #10
 8003e24:	701a      	strb	r2, [r3, #0]
      break;
 8003e26:	e007      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	220b      	movs	r2, #11
 8003e2c:	701a      	strb	r2, [r3, #0]
      break;
 8003e2e:	e003      	b.n	8003e38 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
      break;
 8003e36:	bf00      	nop
  }

  return ret;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop

08003e44 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e50:	f107 0208 	add.w	r2, r7, #8
 8003e54:	2301      	movs	r3, #1
 8003e56:	2111      	movs	r1, #17
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fd91 	bl	8003980 <ism330dhcx_read_reg>
 8003e5e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	7a3b      	ldrb	r3, [r7, #8]
 8003e70:	f362 0303 	bfi	r3, r2, #0, #4
 8003e74:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e76:	f107 0208 	add.w	r2, r7, #8
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	2111      	movs	r1, #17
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fd96 	bl	80039b0 <ism330dhcx_write_reg>
 8003e84:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8003e9a:	f107 0208 	add.w	r2, r7, #8
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	2111      	movs	r1, #17
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fd6c 	bl	8003980 <ism330dhcx_read_reg>
 8003ea8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8003eaa:	7a3b      	ldrb	r3, [r7, #8]
 8003eac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d834      	bhi.n	8003f20 <ism330dhcx_gy_full_scale_get+0x90>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <ism330dhcx_gy_full_scale_get+0x2c>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ef9 	.word	0x08003ef9
 8003ec0:	08003f19 	.word	0x08003f19
 8003ec4:	08003ef1 	.word	0x08003ef1
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	08003f21 	.word	0x08003f21
 8003ed4:	08003f21 	.word	0x08003f21
 8003ed8:	08003f21 	.word	0x08003f21
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f21 	.word	0x08003f21
 8003ee4:	08003f21 	.word	0x08003f21
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f11 	.word	0x08003f11
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
      break;
 8003ef6:	e017      	b.n	8003f28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
      break;
 8003efe:	e013      	b.n	8003f28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2204      	movs	r2, #4
 8003f04:	701a      	strb	r2, [r3, #0]
      break;
 8003f06:	e00f      	b.n	8003f28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	701a      	strb	r2, [r3, #0]
      break;
 8003f0e:	e00b      	b.n	8003f28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	220c      	movs	r2, #12
 8003f14:	701a      	strb	r2, [r3, #0]
      break;
 8003f16:	e007      	b.n	8003f28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
      break;
 8003f1e:	e003      	b.n	8003f28 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2202      	movs	r2, #2
 8003f24:	701a      	strb	r2, [r3, #0]
      break;
 8003f26:	bf00      	nop
  }

  return ret;
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop

08003f34 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fb4b 	bl	80045e6 <ism330dhcx_fsm_enable_get>
 8003f50:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 80c4 	bne.w	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003f5a:	7b3b      	ldrb	r3, [r7, #12]
 8003f5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f60:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003f62:	7b3b      	ldrb	r3, [r7, #12]
 8003f64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003f68:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003f6e:	7b3b      	ldrb	r3, [r7, #12]
 8003f70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003f74:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003f7a:	7b3b      	ldrb	r3, [r7, #12]
 8003f7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f80:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003f86:	7b3b      	ldrb	r3, [r7, #12]
 8003f88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003f8c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003f92:	7b3b      	ldrb	r3, [r7, #12]
 8003f94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003f98:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003f9e:	7b3b      	ldrb	r3, [r7, #12]
 8003fa0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003fa4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003faa:	7b3b      	ldrb	r3, [r7, #12]
 8003fac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003fb0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003fb6:	7b7b      	ldrb	r3, [r7, #13]
 8003fb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fbc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003fc2:	7b7b      	ldrb	r3, [r7, #13]
 8003fc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003fc8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003fce:	7b7b      	ldrb	r3, [r7, #13]
 8003fd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003fd4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003fda:	7b7b      	ldrb	r3, [r7, #13]
 8003fdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003fe0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003fe6:	7b7b      	ldrb	r3, [r7, #13]
 8003fe8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003fec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003ff2:	7b7b      	ldrb	r3, [r7, #13]
 8003ff4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ff8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8003ffe:	7b7b      	ldrb	r3, [r7, #13]
 8004000:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004004:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004006:	4313      	orrs	r3, r2
 8004008:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 800400a:	7b7b      	ldrb	r3, [r7, #13]
 800400c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004010:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004012:	4313      	orrs	r3, r2
 8004014:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004016:	2b01      	cmp	r3, #1
 8004018:	d163      	bne.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800401a:	f107 030b 	add.w	r3, r7, #11
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fb0d 	bl	8004640 <ism330dhcx_fsm_data_rate_get>
 8004026:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d159      	bne.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800402e:	7afb      	ldrb	r3, [r7, #11]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d853      	bhi.n	80040dc <ism330dhcx_gy_data_rate_set+0x1a8>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <ism330dhcx_gy_data_rate_set+0x108>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	0800404d 	.word	0x0800404d
 8004040:	0800405f 	.word	0x0800405f
 8004044:	0800407d 	.word	0x0800407d
 8004048:	080040a7 	.word	0x080040a7
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004056:	e044      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	75fb      	strb	r3, [r7, #23]
            break;
 800405c:	e041      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004064:	2302      	movs	r3, #2
 8004066:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004068:	e03b      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004070:	2302      	movs	r3, #2
 8004072:	75fb      	strb	r3, [r7, #23]
            break;
 8004074:	e035      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	75fb      	strb	r3, [r7, #23]
            break;
 800407a:	e032      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004082:	2303      	movs	r3, #3
 8004084:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004086:	e02c      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d102      	bne.n	8004094 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800408e:	2303      	movs	r3, #3
 8004090:	75fb      	strb	r3, [r7, #23]
            break;
 8004092:	e026      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d102      	bne.n	80040a0 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800409a:	2303      	movs	r3, #3
 800409c:	75fb      	strb	r3, [r7, #23]
            break;
 800409e:	e020      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	75fb      	strb	r3, [r7, #23]
            break;
 80040a4:	e01d      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040ac:	2304      	movs	r3, #4
 80040ae:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80040b0:	e017      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040b8:	2304      	movs	r3, #4
 80040ba:	75fb      	strb	r3, [r7, #23]
            break;
 80040bc:	e011      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d102      	bne.n	80040ca <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040c4:	2304      	movs	r3, #4
 80040c6:	75fb      	strb	r3, [r7, #23]
            break;
 80040c8:	e00b      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d102      	bne.n	80040d6 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80040d0:	2304      	movs	r3, #4
 80040d2:	75fb      	strb	r3, [r7, #23]
            break;
 80040d4:	e005      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	75fb      	strb	r3, [r7, #23]
            break;
 80040da:	e002      	b.n	80040e2 <ism330dhcx_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	75fb      	strb	r3, [r7, #23]
            break;
 80040e0:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d16c      	bne.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80040ec:	f107 030a 	add.w	r3, r7, #10
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 faec 	bl	80046d0 <ism330dhcx_mlc_get>
 80040f8:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 80040fa:	7abb      	ldrb	r3, [r7, #10]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d162      	bne.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004100:	f107 0309 	add.w	r3, r7, #9
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fb0c 	bl	8004724 <ism330dhcx_mlc_data_rate_get>
 800410c:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d158      	bne.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
        switch (mlc_odr) {
 8004114:	7a7b      	ldrb	r3, [r7, #9]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d852      	bhi.n	80041c0 <ism330dhcx_gy_data_rate_set+0x28c>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <ism330dhcx_gy_data_rate_set+0x1ec>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004131 	.word	0x08004131
 8004124:	08004143 	.word	0x08004143
 8004128:	08004161 	.word	0x08004161
 800412c:	0800418b 	.word	0x0800418b
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <ism330dhcx_gy_data_rate_set+0x208>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800413a:	e044      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	75fb      	strb	r3, [r7, #23]
            break;
 8004140:	e041      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <ism330dhcx_gy_data_rate_set+0x21a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004148:	2302      	movs	r3, #2
 800414a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800414c:	e03b      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d102      	bne.n	800415a <ism330dhcx_gy_data_rate_set+0x226>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004154:	2302      	movs	r3, #2
 8004156:	75fb      	strb	r3, [r7, #23]
            break;
 8004158:	e035      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	75fb      	strb	r3, [r7, #23]
            break;
 800415e:	e032      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <ism330dhcx_gy_data_rate_set+0x238>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004166:	2303      	movs	r3, #3
 8004168:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800416a:	e02c      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <ism330dhcx_gy_data_rate_set+0x244>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004172:	2303      	movs	r3, #3
 8004174:	75fb      	strb	r3, [r7, #23]
            break;
 8004176:	e026      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d102      	bne.n	8004184 <ism330dhcx_gy_data_rate_set+0x250>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 800417e:	2303      	movs	r3, #3
 8004180:	75fb      	strb	r3, [r7, #23]
            break;
 8004182:	e020      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	75fb      	strb	r3, [r7, #23]
            break;
 8004188:	e01d      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <ism330dhcx_gy_data_rate_set+0x262>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004190:	2304      	movs	r3, #4
 8004192:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004194:	e017      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <ism330dhcx_gy_data_rate_set+0x26e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800419c:	2304      	movs	r3, #4
 800419e:	75fb      	strb	r3, [r7, #23]
            break;
 80041a0:	e011      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d102      	bne.n	80041ae <ism330dhcx_gy_data_rate_set+0x27a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80041a8:	2304      	movs	r3, #4
 80041aa:	75fb      	strb	r3, [r7, #23]
            break;
 80041ac:	e00b      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d102      	bne.n	80041ba <ism330dhcx_gy_data_rate_set+0x286>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80041b4:	2304      	movs	r3, #4
 80041b6:	75fb      	strb	r3, [r7, #23]
            break;
 80041b8:	e005      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>
              odr_gy = val;
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	75fb      	strb	r3, [r7, #23]
            break;
 80041be:	e002      	b.n	80041c6 <ism330dhcx_gy_data_rate_set+0x292>

          default:
            odr_gy = val;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	75fb      	strb	r3, [r7, #23]
            break;
 80041c4:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0) {
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <ism330dhcx_gy_data_rate_set+0x2a8>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80041cc:	f107 0208 	add.w	r2, r7, #8
 80041d0:	2301      	movs	r3, #1
 80041d2:	2111      	movs	r1, #17
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fbd3 	bl	8003980 <ism330dhcx_read_reg>
 80041da:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <ism330dhcx_gy_data_rate_set+0x2ce>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	7a3b      	ldrb	r3, [r7, #8]
 80041ec:	f362 1307 	bfi	r3, r2, #4, #4
 80041f0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80041f2:	f107 0208 	add.w	r2, r7, #8
 80041f6:	2301      	movs	r3, #1
 80041f8:	2111      	movs	r1, #17
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fbd8 	bl	80039b0 <ism330dhcx_write_reg>
 8004200:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004202:	693b      	ldr	r3, [r7, #16]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004216:	f107 0208 	add.w	r2, r7, #8
 800421a:	2301      	movs	r3, #1
 800421c:	2111      	movs	r1, #17
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fbae 	bl	8003980 <ism330dhcx_read_reg>
 8004224:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8004226:	7a3b      	ldrb	r3, [r7, #8]
 8004228:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b0a      	cmp	r3, #10
 8004230:	d844      	bhi.n	80042bc <ism330dhcx_gy_data_rate_get+0xb0>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <ism330dhcx_gy_data_rate_get+0x2c>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	08004265 	.word	0x08004265
 800423c:	0800426d 	.word	0x0800426d
 8004240:	08004275 	.word	0x08004275
 8004244:	0800427d 	.word	0x0800427d
 8004248:	08004285 	.word	0x08004285
 800424c:	0800428d 	.word	0x0800428d
 8004250:	08004295 	.word	0x08004295
 8004254:	0800429d 	.word	0x0800429d
 8004258:	080042a5 	.word	0x080042a5
 800425c:	080042ad 	.word	0x080042ad
 8004260:	080042b5 	.word	0x080042b5
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
      break;
 800426a:	e02b      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
      break;
 8004272:	e027      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2202      	movs	r2, #2
 8004278:	701a      	strb	r2, [r3, #0]
      break;
 800427a:	e023      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2203      	movs	r2, #3
 8004280:	701a      	strb	r2, [r3, #0]
      break;
 8004282:	e01f      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2204      	movs	r2, #4
 8004288:	701a      	strb	r2, [r3, #0]
      break;
 800428a:	e01b      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2205      	movs	r2, #5
 8004290:	701a      	strb	r2, [r3, #0]
      break;
 8004292:	e017      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2206      	movs	r2, #6
 8004298:	701a      	strb	r2, [r3, #0]
      break;
 800429a:	e013      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2207      	movs	r2, #7
 80042a0:	701a      	strb	r2, [r3, #0]
      break;
 80042a2:	e00f      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2208      	movs	r2, #8
 80042a8:	701a      	strb	r2, [r3, #0]
      break;
 80042aa:	e00b      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2209      	movs	r2, #9
 80042b0:	701a      	strb	r2, [r3, #0]
      break;
 80042b2:	e007      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	220a      	movs	r2, #10
 80042b8:	701a      	strb	r2, [r3, #0]
      break;
 80042ba:	e003      	b.n	80042c4 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
      break;
 80042c2:	bf00      	nop
  }

  return ret;
 80042c4:	68fb      	ldr	r3, [r7, #12]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop

080042d0 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80042dc:	f107 0208 	add.w	r2, r7, #8
 80042e0:	2301      	movs	r3, #1
 80042e2:	2112      	movs	r1, #18
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fb4b 	bl	8003980 <ism330dhcx_read_reg>
 80042ea:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	7a3b      	ldrb	r3, [r7, #8]
 80042fc:	f362 1386 	bfi	r3, r2, #6, #1
 8004300:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004302:	f107 0208 	add.w	r2, r7, #8
 8004306:	2301      	movs	r3, #1
 8004308:	2112      	movs	r1, #18
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fb50 	bl	80039b0 <ism330dhcx_write_reg>
 8004310:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8004326:	f107 020c 	add.w	r2, r7, #12
 800432a:	2306      	movs	r3, #6
 800432c:	2122      	movs	r1, #34	; 0x22
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff fb26 	bl	8003980 <ism330dhcx_read_reg>
 8004334:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004336:	7b7b      	ldrb	r3, [r7, #13]
 8004338:	b21a      	sxth	r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004344:	b29b      	uxth	r3, r3
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	b29a      	uxth	r2, r3
 800434a:	7b3b      	ldrb	r3, [r7, #12]
 800434c:	b29b      	uxth	r3, r3
 800434e:	4413      	add	r3, r2
 8004350:	b29b      	uxth	r3, r3
 8004352:	b21a      	sxth	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	3302      	adds	r3, #2
 800435e:	b212      	sxth	r2, r2
 8004360:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3302      	adds	r3, #2
 8004366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436a:	b29b      	uxth	r3, r3
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	b29a      	uxth	r2, r3
 8004370:	7bbb      	ldrb	r3, [r7, #14]
 8004372:	b29b      	uxth	r3, r3
 8004374:	4413      	add	r3, r2
 8004376:	b29a      	uxth	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	3302      	adds	r3, #2
 800437c:	b212      	sxth	r2, r2
 800437e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004380:	7c7a      	ldrb	r2, [r7, #17]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3304      	adds	r3, #4
 8004386:	b212      	sxth	r2, r2
 8004388:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	3304      	adds	r3, #4
 800438e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004392:	b29b      	uxth	r3, r3
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	b29a      	uxth	r2, r3
 8004398:	7c3b      	ldrb	r3, [r7, #16]
 800439a:	b29b      	uxth	r3, r3
 800439c:	4413      	add	r3, r2
 800439e:	b29a      	uxth	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	3304      	adds	r3, #4
 80043a4:	b212      	sxth	r2, r2
 80043a6:	801a      	strh	r2, [r3, #0]
  return ret;
 80043a8:	697b      	ldr	r3, [r7, #20]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80043bc:	f107 020c 	add.w	r2, r7, #12
 80043c0:	2306      	movs	r3, #6
 80043c2:	2128      	movs	r1, #40	; 0x28
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff fadb 	bl	8003980 <ism330dhcx_read_reg>
 80043ca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80043cc:	7b7b      	ldrb	r3, [r7, #13]
 80043ce:	b21a      	sxth	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	b29a      	uxth	r2, r3
 80043e0:	7b3b      	ldrb	r3, [r7, #12]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	b21a      	sxth	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	3302      	adds	r3, #2
 80043f4:	b212      	sxth	r2, r2
 80043f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	3302      	adds	r3, #2
 80043fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004400:	b29b      	uxth	r3, r3
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	b29a      	uxth	r2, r3
 8004406:	7bbb      	ldrb	r3, [r7, #14]
 8004408:	b29b      	uxth	r3, r3
 800440a:	4413      	add	r3, r2
 800440c:	b29a      	uxth	r2, r3
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3302      	adds	r3, #2
 8004412:	b212      	sxth	r2, r2
 8004414:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004416:	7c7a      	ldrb	r2, [r7, #17]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	3304      	adds	r3, #4
 800441c:	b212      	sxth	r2, r2
 800441e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	3304      	adds	r3, #4
 8004424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004428:	b29b      	uxth	r3, r3
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	b29a      	uxth	r2, r3
 800442e:	7c3b      	ldrb	r3, [r7, #16]
 8004430:	b29b      	uxth	r3, r3
 8004432:	4413      	add	r3, r2
 8004434:	b29a      	uxth	r2, r3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	b212      	sxth	r2, r2
 800443c:	801a      	strh	r2, [r3, #0]
  return ret;
 800443e:	697b      	ldr	r3, [r7, #20]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004454:	f107 0208 	add.w	r2, r7, #8
 8004458:	2301      	movs	r3, #1
 800445a:	2118      	movs	r1, #24
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fa8f 	bl	8003980 <ism330dhcx_read_reg>
 8004462:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10f      	bne.n	800448a <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	b2da      	uxtb	r2, r3
 8004472:	7a3b      	ldrb	r3, [r7, #8]
 8004474:	f362 0341 	bfi	r3, r2, #1, #1
 8004478:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800447a:	f107 0208 	add.w	r2, r7, #8
 800447e:	2301      	movs	r3, #1
 8004480:	2118      	movs	r1, #24
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fa94 	bl	80039b0 <ism330dhcx_write_reg>
 8004488:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80044a0:	f107 0208 	add.w	r2, r7, #8
 80044a4:	2301      	movs	r3, #1
 80044a6:	2101      	movs	r1, #1
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fa69 	bl	8003980 <ism330dhcx_read_reg>
 80044ae:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10f      	bne.n	80044d6 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	7a3b      	ldrb	r3, [r7, #8]
 80044c0:	f362 1387 	bfi	r3, r2, #6, #2
 80044c4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80044c6:	f107 0208 	add.w	r2, r7, #8
 80044ca:	2301      	movs	r3, #1
 80044cc:	2101      	movs	r1, #1
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fa6e 	bl	80039b0 <ism330dhcx_write_reg>
 80044d4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80044d6:	68fb      	ldr	r3, [r7, #12]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80044ea:	2301      	movs	r3, #1
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	210f      	movs	r1, #15
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff fa45 	bl	8003980 <ism330dhcx_read_reg>
 80044f6:	60f8      	str	r0, [r7, #12]
  return ret;
 80044f8:	68fb      	ldr	r3, [r7, #12]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	2301      	movs	r3, #1
 8004514:	2112      	movs	r1, #18
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fa32 	bl	8003980 <ism330dhcx_read_reg>
 800451c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10f      	bne.n	8004544 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	b2da      	uxtb	r2, r3
 800452c:	7a3b      	ldrb	r3, [r7, #8]
 800452e:	f362 0300 	bfi	r3, r2, #0, #1
 8004532:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004534:	f107 0208 	add.w	r2, r7, #8
 8004538:	2301      	movs	r3, #1
 800453a:	2112      	movs	r1, #18
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fa37 	bl	80039b0 <ism330dhcx_write_reg>
 8004542:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800455a:	f107 0208 	add.w	r2, r7, #8
 800455e:	2301      	movs	r3, #1
 8004560:	2112      	movs	r1, #18
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fa0c 	bl	8003980 <ism330dhcx_read_reg>
 8004568:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10f      	bne.n	8004590 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	b2da      	uxtb	r2, r3
 8004578:	7a3b      	ldrb	r3, [r7, #8]
 800457a:	f362 0382 	bfi	r3, r2, #2, #1
 800457e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004580:	f107 0208 	add.w	r2, r7, #8
 8004584:	2301      	movs	r3, #1
 8004586:	2112      	movs	r1, #18
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff fa11 	bl	80039b0 <ism330dhcx_write_reg>
 800458e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	460b      	mov	r3, r1
 80045a4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80045a6:	f107 0208 	add.w	r2, r7, #8
 80045aa:	2301      	movs	r3, #1
 80045ac:	210a      	movs	r1, #10
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff f9e6 	bl	8003980 <ism330dhcx_read_reg>
 80045b4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10f      	bne.n	80045dc <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	7a3b      	ldrb	r3, [r7, #8]
 80045c6:	f362 0302 	bfi	r3, r2, #0, #3
 80045ca:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80045cc:	f107 0208 	add.w	r2, r7, #8
 80045d0:	2301      	movs	r3, #1
 80045d2:	210a      	movs	r1, #10
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff f9eb 	bl	80039b0 <ism330dhcx_write_reg>
 80045da:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80045f0:	2102      	movs	r1, #2
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff ff4e 	bl	8004494 <ism330dhcx_mem_bank_set>
 80045f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8004600:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8004602:	2301      	movs	r3, #1
 8004604:	2146      	movs	r1, #70	; 0x46
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff f9ba 	bl	8003980 <ism330dhcx_read_reg>
 800460c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8004618:	2301      	movs	r3, #1
 800461a:	2147      	movs	r1, #71	; 0x47
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff f9af 	bl	8003980 <ism330dhcx_read_reg>
 8004622:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800462a:	2100      	movs	r1, #0
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff31 	bl	8004494 <ism330dhcx_mem_bank_set>
 8004632:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004634:	68fb      	ldr	r3, [r7, #12]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800464a:	2102      	movs	r1, #2
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff21 	bl	8004494 <ism330dhcx_mem_bank_set>
 8004652:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800465a:	f107 0208 	add.w	r2, r7, #8
 800465e:	2301      	movs	r3, #1
 8004660:	215f      	movs	r1, #95	; 0x5f
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff f98c 	bl	8003980 <ism330dhcx_read_reg>
 8004668:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff ff0e 	bl	8004494 <ism330dhcx_mem_bank_set>
 8004678:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800467a:	7a3b      	ldrb	r3, [r7, #8]
 800467c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b03      	cmp	r3, #3
 8004684:	d81a      	bhi.n	80046bc <ism330dhcx_fsm_data_rate_get+0x7c>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046a5 	.word	0x080046a5
 8004694:	080046ad 	.word	0x080046ad
 8004698:	080046b5 	.word	0x080046b5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
      break;
 80046a2:	e00f      	b.n	80046c4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
      break;
 80046aa:	e00b      	b.n	80046c4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2202      	movs	r2, #2
 80046b0:	701a      	strb	r2, [r3, #0]
      break;
 80046b2:	e007      	b.n	80046c4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2203      	movs	r2, #3
 80046b8:	701a      	strb	r2, [r3, #0]
      break;
 80046ba:	e003      	b.n	80046c4 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
      break;
 80046c2:	bf00      	nop
  }

  return ret;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop

080046d0 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80046da:	2102      	movs	r1, #2
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fed9 	bl	8004494 <ism330dhcx_mem_bank_set>
 80046e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80046ea:	f107 0208 	add.w	r2, r7, #8
 80046ee:	2301      	movs	r3, #1
 80046f0:	2105      	movs	r1, #5
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff f944 	bl	8003980 <ism330dhcx_read_reg>
 80046f8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004700:	2100      	movs	r1, #0
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fec6 	bl	8004494 <ism330dhcx_mem_bank_set>
 8004708:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800470a:	7a3b      	ldrb	r3, [r7, #8]
 800470c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004718:	68fb      	ldr	r3, [r7, #12]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800472e:	2102      	movs	r1, #2
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff feaf 	bl	8004494 <ism330dhcx_mem_bank_set>
 8004736:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d107      	bne.n	800474e <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800473e:	f107 0208 	add.w	r2, r7, #8
 8004742:	2301      	movs	r3, #1
 8004744:	2160      	movs	r1, #96	; 0x60
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff f91a 	bl	8003980 <ism330dhcx_read_reg>
 800474c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d12a      	bne.n	80047aa <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8004754:	7a3b      	ldrb	r3, [r7, #8]
 8004756:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b03      	cmp	r3, #3
 800475e:	d81b      	bhi.n	8004798 <ism330dhcx_mlc_data_rate_get+0x74>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <ism330dhcx_mlc_data_rate_get+0x44>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	08004779 	.word	0x08004779
 800476c:	08004781 	.word	0x08004781
 8004770:	08004789 	.word	0x08004789
 8004774:	08004791 	.word	0x08004791
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2200      	movs	r2, #0
 800477c:	701a      	strb	r2, [r3, #0]
        break;
 800477e:	e00f      	b.n	80047a0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
        break;
 8004786:	e00b      	b.n	80047a0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2202      	movs	r2, #2
 800478c:	701a      	strb	r2, [r3, #0]
        break;
 800478e:	e007      	b.n	80047a0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2203      	movs	r2, #3
 8004794:	701a      	strb	r2, [r3, #0]
        break;
 8004796:	e003      	b.n	80047a0 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
        break;
 800479e:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80047a0:	2100      	movs	r1, #0
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fe76 	bl	8004494 <ism330dhcx_mem_bank_set>
 80047a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <SystemInit+0x68>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <SystemInit+0x68>)
 80047c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <SystemInit+0x6c>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <SystemInit+0x6c>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80047d4:	4b12      	ldr	r3, [pc, #72]	; (8004820 <SystemInit+0x6c>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80047da:	4b11      	ldr	r3, [pc, #68]	; (8004820 <SystemInit+0x6c>)
 80047dc:	2200      	movs	r2, #0
 80047de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <SystemInit+0x6c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <SystemInit+0x6c>)
 80047e6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80047ea:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80047ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <SystemInit+0x6c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <SystemInit+0x6c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <SystemInit+0x6c>)
 80047fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004802:	4b07      	ldr	r3, [pc, #28]	; (8004820 <SystemInit+0x6c>)
 8004804:	2200      	movs	r2, #0
 8004806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004808:	4b04      	ldr	r3, [pc, #16]	; (800481c <SystemInit+0x68>)
 800480a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800480e:	609a      	str	r2, [r3, #8]
  #endif
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000ed00 	.word	0xe000ed00
 8004820:	46020c00 	.word	0x46020c00

08004824 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_Init+0x4c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_Init+0x4c>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004834:	2003      	movs	r0, #3
 8004836:	f000 f96d 	bl	8004b14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800483a:	f002 ff6f 	bl	800771c <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_Init+0x50>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	490b      	ldr	r1, [pc, #44]	; (8004878 <HAL_Init+0x54>)
 800484a:	5ccb      	ldrb	r3, [r1, r3]
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <HAL_Init+0x58>)
 8004852:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004854:	200f      	movs	r0, #15
 8004856:	f000 f813 	bl	8004880 <HAL_InitTick>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e002      	b.n	800486a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004864:	f006 fb14 	bl	800ae90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40022000 	.word	0x40022000
 8004874:	46020c00 	.word	0x46020c00
 8004878:	0800f978 	.word	0x0800f978
 800487c:	200000a0 	.word	0x200000a0

08004880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <HAL_InitTick+0x60>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e021      	b.n	80048d8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_InitTick+0x64>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <HAL_InitTick+0x60>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4619      	mov	r1, r3
 800489e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f965 	bl	8004b7a <HAL_SYSTICK_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00e      	b.n	80048d8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b0f      	cmp	r3, #15
 80048be:	d80a      	bhi.n	80048d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048c0:	2200      	movs	r2, #0
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c8:	f000 f92f 	bl	8004b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048cc:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <HAL_InitTick+0x68>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200000a8 	.word	0x200000a8
 80048e4:	200000a0 	.word	0x200000a0
 80048e8:	200000a4 	.word	0x200000a4

080048ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_IncTick+0x20>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_IncTick+0x24>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_IncTick+0x24>)
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	200000a8 	.word	0x200000a8
 8004910:	20000ed8 	.word	0x20000ed8

08004914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return uwTick;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_GetTick+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000ed8 	.word	0x20000ed8

0800492c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004934:	f7ff ffee 	bl	8004914 <HAL_GetTick>
 8004938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d005      	beq.n	8004952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_Delay+0x44>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004952:	bf00      	nop
 8004954:	f7ff ffde 	bl	8004914 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d8f7      	bhi.n	8004954 <HAL_Delay+0x28>
  {
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200000a8 	.word	0x200000a8

08004974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004990:	4013      	ands	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800499c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049a6:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <__NVIC_SetPriorityGrouping+0x44>)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	60d3      	str	r3, [r2, #12]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <__NVIC_GetPriorityGrouping+0x18>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	f003 0307 	and.w	r3, r3, #7
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db0b      	blt.n	8004a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4907      	ldr	r1, [pc, #28]	; (8004a10 <__NVIC_EnableIRQ+0x38>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2001      	movs	r0, #1
 80049fa:	fa00 f202 	lsl.w	r2, r0, r2
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	e000e100 	.word	0xe000e100

08004a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	6039      	str	r1, [r7, #0]
 8004a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	db0a      	blt.n	8004a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	490c      	ldr	r1, [pc, #48]	; (8004a60 <__NVIC_SetPriority+0x4c>)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	0112      	lsls	r2, r2, #4
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	440b      	add	r3, r1
 8004a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a3c:	e00a      	b.n	8004a54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4908      	ldr	r1, [pc, #32]	; (8004a64 <__NVIC_SetPriority+0x50>)
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	440b      	add	r3, r1
 8004a52:	761a      	strb	r2, [r3, #24]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000e100 	.word	0xe000e100
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f1c3 0307 	rsb	r3, r3, #7
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	bf28      	it	cs
 8004a86:	2304      	movcs	r3, #4
 8004a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d902      	bls.n	8004a98 <NVIC_EncodePriority+0x30>
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3b03      	subs	r3, #3
 8004a96:	e000      	b.n	8004a9a <NVIC_EncodePriority+0x32>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	401a      	ands	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	43d9      	mvns	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac0:	4313      	orrs	r3, r2
         );
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3724      	adds	r7, #36	; 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae0:	d301      	bcc.n	8004ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e00f      	b.n	8004b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ae6:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <SysTick_Config+0x40>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aee:	210f      	movs	r1, #15
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004af4:	f7ff ff8e 	bl	8004a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <SysTick_Config+0x40>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <SysTick_Config+0x40>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	e000e010 	.word	0xe000e010

08004b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff ff29 	bl	8004974 <__NVIC_SetPriorityGrouping>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	4603      	mov	r3, r0
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	607a      	str	r2, [r7, #4]
 8004b36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b38:	f7ff ff40 	bl	80049bc <__NVIC_GetPriorityGrouping>
 8004b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7ff ff90 	bl	8004a68 <NVIC_EncodePriority>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff5f 	bl	8004a14 <__NVIC_SetPriority>
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	4603      	mov	r3, r0
 8004b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff33 	bl	80049d8 <__NVIC_EnableIRQ>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ffa4 	bl	8004ad0 <SysTick_Config>
 8004b88:	4603      	mov	r3, r0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01e      	beq.n	8004bec <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bba:	f043 0202 	orr.w	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bce:	4a39      	ldr	r2, [pc, #228]	; (8004cb4 <HAL_DCMI_IRQHandler+0x120>)
 8004bd0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f88b 	bl	8004cf2 <HAL_DMA_Abort_IT>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f866 	bl	8004cb8 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01e      	beq.n	8004c34 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	f043 0201 	orr.w	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <HAL_DCMI_IRQHandler+0x120>)
 8004c18:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f867 	bl	8004cf2 <HAL_DMA_Abort_IT>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f842 	bl	8004cb8 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2210      	movs	r2, #16
 8004c44:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fdaa 	bl	80017a0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d006      	beq.n	8004c64 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2208      	movs	r2, #8
 8004c5c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fdb4 	bl	80017cc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01d      	beq.n	8004caa <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d107      	bne.n	8004c8c <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 021e 	bic.w	r2, r2, #30
 8004c8a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fc fd86 	bl	80017b6 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08004cb9 	.word	0x08004cb9

08004cb8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d009      	beq.n	8004ce4 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7fc fd7c 	bl	80017e2 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e019      	b.n	8004d38 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e00e      	b.n	8004d38 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d30:	f043 0304 	orr.w	r3, r3, #4
 8004d34:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d54:	f023 030f 	bic.w	r3, r3, #15
 8004d58:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d62:	3b50      	subs	r3, #80	; 0x50
 8004d64:	09db      	lsrs	r3, r3, #7
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 8150 	beq.w	8005020 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d011      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	f043 0201 	orr.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d011      	beq.n	8004de4 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dd6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ddc:	f043 0202 	orr.w	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d011      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e08:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d011      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e3a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	f043 0208 	orr.w	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00c      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d055      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d04e      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ea2:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d137      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebe:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0202 	orr.w	r2, r2, #2
 8004ece:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004ee6:	e003      	b.n	8004ef0 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f00:	2201      	movs	r2, #1
 8004f02:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8087 	beq.w	8005024 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
        }

        return;
 8004f1e:	e081      	b.n	8005024 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2205      	movs	r2, #5
 8004f24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d039      	beq.n	8004fba <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d032      	beq.n	8004fba <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d012      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d111      	bne.n	8004f98 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	2201      	movs	r2, #1
 8004f82:	731a      	strb	r2, [r3, #12]
 8004f84:	e008      	b.n	8004f98 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004fa0:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d031      	beq.n	8005026 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0202 	orr.w	r2, r2, #2
 8004fd0:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004fe8:	e003      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	2201      	movs	r2, #1
 8005004:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
 800501e:	e002      	b.n	8005026 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_DMA_IRQHandler+0x2e2>
        return;
 8005024:	bf00      	nop
    }
  }
}
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	460b      	mov	r3, r1
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800503e:	7afb      	ldrb	r3, [r7, #11]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d011      	beq.n	8005068 <HAL_EXTI_RegisterCallback+0x3c>
 8005044:	2b02      	cmp	r3, #2
 8005046:	dc13      	bgt.n	8005070 <HAL_EXTI_RegisterCallback+0x44>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_EXTI_RegisterCallback+0x26>
 800504c:	2b01      	cmp	r3, #1
 800504e:	d007      	beq.n	8005060 <HAL_EXTI_RegisterCallback+0x34>
 8005050:	e00e      	b.n	8005070 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
      break;
 800505e:	e00a      	b.n	8005076 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	605a      	str	r2, [r3, #4]
      break;
 8005066:	e006      	b.n	8005076 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e002      	b.n	8005076 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
      break;
 8005074:	bf00      	nop
  }

  return status;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e003      	b.n	80050a0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800509e:	2300      	movs	r3, #0
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2201      	movs	r2, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	4b17      	ldr	r3, [pc, #92]	; (8005134 <HAL_EXTI_IRQHandler+0x88>)
 80050d6:	4413      	add	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4013      	ands	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <HAL_EXTI_IRQHandler+0x8c>)
 8005104:	4413      	add	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4013      	ands	r3, r2
 8005110:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4798      	blx	r3
    }
  }
}
 800512c:	bf00      	nop
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	4602200c 	.word	0x4602200c
 8005138:	46022010 	.word	0x46022010

0800513c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	; 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800514e:	e1ba      	b.n	80054c6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2101      	movs	r1, #1
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 81aa 	beq.w	80054c0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a55      	ldr	r2, [pc, #340]	; (80052c4 <HAL_GPIO_Init+0x188>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d15d      	bne.n	8005230 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800517a:	2201      	movs	r2, #1
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	4013      	ands	r3, r2
 8005188:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f003 0201 	and.w	r2, r3, #1
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	4313      	orrs	r3, r2
 800519c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80051a4:	4a48      	ldr	r2, [pc, #288]	; (80052c8 <HAL_GPIO_Init+0x18c>)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051ac:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80051ae:	4a46      	ldr	r2, [pc, #280]	; (80052c8 <HAL_GPIO_Init+0x18c>)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	08da      	lsrs	r2, r3, #3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3208      	adds	r2, #8
 80051c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	220f      	movs	r2, #15
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	4013      	ands	r3, r2
 80051dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	220b      	movs	r2, #11
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	08da      	lsrs	r2, r3, #3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3208      	adds	r2, #8
 80051fa:	69f9      	ldr	r1, [r7, #28]
 80051fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2203      	movs	r2, #3
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	4013      	ands	r3, r2
 8005216:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2202      	movs	r2, #2
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	4313      	orrs	r3, r2
 8005226:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e067      	b.n	8005300 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d003      	beq.n	8005240 <HAL_GPIO_Init+0x104>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b12      	cmp	r3, #18
 800523e:	d145      	bne.n	80052cc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	08da      	lsrs	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3208      	adds	r2, #8
 8005248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	220f      	movs	r2, #15
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	4013      	ands	r3, r2
 8005262:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	4313      	orrs	r3, r2
 800527c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	08da      	lsrs	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3208      	adds	r2, #8
 8005286:	69f9      	ldr	r1, [r7, #28]
 8005288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	2203      	movs	r2, #3
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	4013      	ands	r3, r2
 80052a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0203 	and.w	r2, r3, #3
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e01e      	b.n	8005300 <HAL_GPIO_Init+0x1c4>
 80052c2:	bf00      	nop
 80052c4:	46020000 	.word	0x46020000
 80052c8:	0800f9d0 	.word	0x0800f9d0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	2203      	movs	r2, #3
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0203 	and.w	r2, r3, #3
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d00b      	beq.n	8005320 <HAL_GPIO_Init+0x1e4>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d007      	beq.n	8005320 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005314:	2b11      	cmp	r3, #17
 8005316:	d003      	beq.n	8005320 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b12      	cmp	r3, #18
 800531e:	d130      	bne.n	8005382 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	2203      	movs	r2, #3
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	4013      	ands	r3, r2
 8005336:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	4313      	orrs	r3, r2
 8005348:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005356:	2201      	movs	r2, #1
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	43db      	mvns	r3, r3
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	4013      	ands	r3, r2
 8005364:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	f003 0201 	and.w	r2, r3, #1
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	4313      	orrs	r3, r2
 800537a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b03      	cmp	r3, #3
 8005388:	d017      	beq.n	80053ba <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	2203      	movs	r2, #3
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43db      	mvns	r3, r3
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	4013      	ands	r3, r2
 80053a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d07c      	beq.n	80054c0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80053c6:	4a47      	ldr	r2, [pc, #284]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	089b      	lsrs	r3, r3, #2
 80053cc:	3318      	adds	r3, #24
 80053ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	220f      	movs	r2, #15
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43db      	mvns	r3, r3
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	4013      	ands	r3, r2
 80053e8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	0a9a      	lsrs	r2, r3, #10
 80053ee:	4b3e      	ldr	r3, [pc, #248]	; (80054e8 <HAL_GPIO_Init+0x3ac>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	f002 0203 	and.w	r2, r2, #3
 80053f8:	00d2      	lsls	r2, r2, #3
 80053fa:	4093      	lsls	r3, r2
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	4313      	orrs	r3, r2
 8005400:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005402:	4938      	ldr	r1, [pc, #224]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	3318      	adds	r3, #24
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005410:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	43db      	mvns	r3, r3
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	4013      	ands	r3, r2
 800541e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005434:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800543a:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	43db      	mvns	r3, r3
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	4013      	ands	r3, r2
 8005448:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800545e:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 8005466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	43db      	mvns	r3, r3
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	4013      	ands	r3, r2
 8005474:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800548a:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005498:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	43db      	mvns	r3, r3
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80054b8:	4a0a      	ldr	r2, [pc, #40]	; (80054e4 <HAL_GPIO_Init+0x3a8>)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	3301      	adds	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f ae3d 	bne.w	8005150 <HAL_GPIO_Init+0x14>
  }
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	3724      	adds	r7, #36	; 0x24
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	46022000 	.word	0x46022000
 80054e8:	002f7f7f 	.word	0x002f7f7f

080054ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80054fe:	e0bc      	b.n	800567a <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005500:	2201      	movs	r2, #1
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80ad 	beq.w	8005674 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a5e      	ldr	r2, [pc, #376]	; (8005698 <HAL_GPIO_DeInit+0x1ac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d115      	bne.n	800554e <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8005522:	4a5e      	ldr	r2, [pc, #376]	; (800569c <HAL_GPIO_DeInit+0x1b0>)
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800552a:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800552c:	4a5b      	ldr	r2, [pc, #364]	; (800569c <HAL_GPIO_DeInit+0x1b0>)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8005538:	4b57      	ldr	r3, [pc, #348]	; (8005698 <HAL_GPIO_DeInit+0x1ac>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2101      	movs	r1, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	4954      	ldr	r1, [pc, #336]	; (8005698 <HAL_GPIO_DeInit+0x1ac>)
 8005548:	4013      	ands	r3, r2
 800554a:	600b      	str	r3, [r1, #0]
 800554c:	e053      	b.n	80055f6 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 800554e:	4a54      	ldr	r2, [pc, #336]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	3318      	adds	r3, #24
 8005556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800555a:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	220f      	movs	r2, #15
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4013      	ands	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	0a9a      	lsrs	r2, r3, #10
 8005574:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <HAL_GPIO_DeInit+0x1b8>)
 8005576:	4013      	ands	r3, r2
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	f002 0203 	and.w	r2, r2, #3
 800557e:	00d2      	lsls	r2, r2, #3
 8005580:	4093      	lsls	r3, r2
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	429a      	cmp	r2, r3
 8005586:	d136      	bne.n	80055f6 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 800558a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	43db      	mvns	r3, r3
 8005592:	4943      	ldr	r1, [pc, #268]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 8005594:	4013      	ands	r3, r2
 8005596:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 800559a:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 800559c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	493e      	ldr	r1, [pc, #248]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80055ac:	4b3c      	ldr	r3, [pc, #240]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	43db      	mvns	r3, r3
 80055b4:	493a      	ldr	r1, [pc, #232]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80055ba:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	4937      	ldr	r1, [pc, #220]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	220f      	movs	r2, #15
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 80055d8:	4a31      	ldr	r2, [pc, #196]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	3318      	adds	r3, #24
 80055e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	43da      	mvns	r2, r3
 80055e8:	482d      	ldr	r0, [pc, #180]	; (80056a0 <HAL_GPIO_DeInit+0x1b4>)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	089b      	lsrs	r3, r3, #2
 80055ee:	400a      	ands	r2, r1
 80055f0:	3318      	adds	r3, #24
 80055f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	2103      	movs	r1, #3
 8005600:	fa01 f303 	lsl.w	r3, r1, r3
 8005604:	431a      	orrs	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	08da      	lsrs	r2, r3, #3
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	3208      	adds	r2, #8
 8005612:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	220f      	movs	r2, #15
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	08d2      	lsrs	r2, r2, #3
 800562a:	4019      	ands	r1, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3208      	adds	r2, #8
 8005630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	2103      	movs	r1, #3
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	401a      	ands	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	2101      	movs	r1, #1
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	401a      	ands	r2, r3
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2103      	movs	r1, #3
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	43db      	mvns	r3, r3
 800566e:	401a      	ands	r2, r3
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	3301      	adds	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	fa22 f303 	lsr.w	r3, r2, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f af3c 	bne.w	8005500 <HAL_GPIO_DeInit+0x14>
  }
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3724      	adds	r7, #36	; 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	46020000 	.word	0x46020000
 800569c:	0800f9d0 	.word	0x0800f9d0
 80056a0:	46022000 	.word	0x46022000
 80056a4:	002f7f7f 	.word	0x002f7f7f

080056a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
 80056b4:	4613      	mov	r3, r2
 80056b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056b8:	787b      	ldrb	r3, [r7, #1]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056be:	887a      	ldrh	r2, [r7, #2]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80056c4:	e002      	b.n	80056cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80056c6:	887a      	ldrh	r2, [r7, #2]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e081      	b.n	80057ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8a8 	bl	8005854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005728:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005738:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d107      	bne.n	8005752 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	e006      	b.n	8005760 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800575e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d104      	bne.n	8005772 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005770:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005784:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e021      	b.n	800584c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f821 	bl	8005868 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	4608      	mov	r0, r1
 8005886:	4611      	mov	r1, r2
 8005888:	461a      	mov	r2, r3
 800588a:	4603      	mov	r3, r0
 800588c:	817b      	strh	r3, [r7, #10]
 800588e:	460b      	mov	r3, r1
 8005890:	813b      	strh	r3, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b20      	cmp	r3, #32
 80058a0:	f040 80f9 	bne.w	8005a96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_I2C_Mem_Write+0x34>
 80058aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0ed      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_I2C_Mem_Write+0x4e>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0e6      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058d2:	f7ff f81f 	bl	8004914 <HAL_GetTick>
 80058d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2319      	movs	r3, #25
 80058de:	2201      	movs	r2, #1
 80058e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fadd 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0d1      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2221      	movs	r2, #33	; 0x21
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2240      	movs	r2, #64	; 0x40
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a3a      	ldr	r2, [r7, #32]
 800590e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800591c:	88f8      	ldrh	r0, [r7, #6]
 800591e:	893a      	ldrh	r2, [r7, #8]
 8005920:	8979      	ldrh	r1, [r7, #10]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	4603      	mov	r3, r0
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f9ed 	bl	8005d0c <I2C_RequestMemoryWrite>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e0a9      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2bff      	cmp	r3, #255	; 0xff
 800594c:	d90e      	bls.n	800596c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	22ff      	movs	r2, #255	; 0xff
 8005952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005958:	b2da      	uxtb	r2, r3
 800595a:	8979      	ldrh	r1, [r7, #10]
 800595c:	2300      	movs	r3, #0
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fc45 	bl	80061f4 <I2C_TransferConfig>
 800596a:	e00f      	b.n	800598c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597a:	b2da      	uxtb	r2, r3
 800597c:	8979      	ldrh	r1, [r7, #10]
 800597e:	2300      	movs	r3, #0
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fc34 	bl	80061f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 fac7 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e07b      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d034      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x1c8>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d130      	bne.n	8005a44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2200      	movs	r2, #0
 80059ea:	2180      	movs	r1, #128	; 0x80
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fa59 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e04d      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2bff      	cmp	r3, #255	; 0xff
 8005a04:	d90e      	bls.n	8005a24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	8979      	ldrh	r1, [r7, #10]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fbe9 	bl	80061f4 <I2C_TransferConfig>
 8005a22:	e00f      	b.n	8005a44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	8979      	ldrh	r1, [r7, #10]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fbd8 	bl	80061f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d19e      	bne.n	800598c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 faa6 	bl	8005fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e01a      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2220      	movs	r2, #32
 8005a68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <HAL_I2C_Mem_Write+0x224>)
 8005a76:	400b      	ands	r3, r1
 8005a78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	fe00e800 	.word	0xfe00e800

08005aa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	4608      	mov	r0, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	817b      	strh	r3, [r7, #10]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	813b      	strh	r3, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	f040 80fd 	bne.w	8005cc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_I2C_Mem_Read+0x34>
 8005ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ade:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0f1      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_I2C_Mem_Read+0x4e>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e0ea      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005afa:	f7fe ff0b 	bl	8004914 <HAL_GetTick>
 8005afe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	2319      	movs	r3, #25
 8005b06:	2201      	movs	r2, #1
 8005b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f9c9 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0d5      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2222      	movs	r2, #34	; 0x22
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2240      	movs	r2, #64	; 0x40
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b44:	88f8      	ldrh	r0, [r7, #6]
 8005b46:	893a      	ldrh	r2, [r7, #8]
 8005b48:	8979      	ldrh	r1, [r7, #10]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	4603      	mov	r3, r0
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f92d 	bl	8005db4 <I2C_RequestMemoryRead>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0ad      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2bff      	cmp	r3, #255	; 0xff
 8005b74:	d90e      	bls.n	8005b94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	8979      	ldrh	r1, [r7, #10]
 8005b84:	4b52      	ldr	r3, [pc, #328]	; (8005cd0 <HAL_I2C_Mem_Read+0x22c>)
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fb31 	bl	80061f4 <I2C_TransferConfig>
 8005b92:	e00f      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	8979      	ldrh	r1, [r7, #10]
 8005ba6:	4b4a      	ldr	r3, [pc, #296]	; (8005cd0 <HAL_I2C_Mem_Read+0x22c>)
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fb20 	bl	80061f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f970 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e07c      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d034      	beq.n	8005c74 <HAL_I2C_Mem_Read+0x1d0>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d130      	bne.n	8005c74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2180      	movs	r1, #128	; 0x80
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f941 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e04d      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2bff      	cmp	r3, #255	; 0xff
 8005c34:	d90e      	bls.n	8005c54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	22ff      	movs	r2, #255	; 0xff
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	8979      	ldrh	r1, [r7, #10]
 8005c44:	2300      	movs	r3, #0
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fad1 	bl	80061f4 <I2C_TransferConfig>
 8005c52:	e00f      	b.n	8005c74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	8979      	ldrh	r1, [r7, #10]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fac0 	bl	80061f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d19a      	bne.n	8005bb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f98e 	bl	8005fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e01a      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2220      	movs	r2, #32
 8005c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6859      	ldr	r1, [r3, #4]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_I2C_Mem_Read+0x230>)
 8005ca6:	400b      	ands	r3, r1
 8005ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	80002400 	.word	0x80002400
 8005cd4:	fe00e800 	.word	0xfe00e800

08005cd8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce6:	b2db      	uxtb	r3, r3
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	4608      	mov	r0, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	817b      	strh	r3, [r7, #10]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	813b      	strh	r3, [r7, #8]
 8005d22:	4613      	mov	r3, r2
 8005d24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	8979      	ldrh	r1, [r7, #10]
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <I2C_RequestMemoryWrite+0xa4>)
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fa5d 	bl	80061f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8f0 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e02c      	b.n	8005da8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d105      	bne.n	8005d60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d54:	893b      	ldrh	r3, [r7, #8]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	629a      	str	r2, [r3, #40]	; 0x28
 8005d5e:	e015      	b.n	8005d8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d60:	893b      	ldrh	r3, [r7, #8]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f8d6 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e012      	b.n	8005da8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d82:	893b      	ldrh	r3, [r7, #8]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2200      	movs	r2, #0
 8005d94:	2180      	movs	r1, #128	; 0x80
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f884 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	80002000 	.word	0x80002000

08005db4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	817b      	strh	r3, [r7, #10]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	813b      	strh	r3, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	8979      	ldrh	r1, [r7, #10]
 8005dd4:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <I2C_RequestMemoryRead+0xa4>)
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fa0a 	bl	80061f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f89d 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e02c      	b.n	8005e4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d105      	bne.n	8005e06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dfa:	893b      	ldrh	r3, [r7, #8]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
 8005e04:	e015      	b.n	8005e32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e06:	893b      	ldrh	r3, [r7, #8]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	69b9      	ldr	r1, [r7, #24]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f883 	bl	8005f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e012      	b.n	8005e4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e28:	893b      	ldrh	r3, [r7, #8]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2140      	movs	r1, #64	; 0x40
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f831 	bl	8005ea4 <I2C_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	80002000 	.word	0x80002000

08005e5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d103      	bne.n	8005e7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2200      	movs	r2, #0
 8005e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d007      	beq.n	8005e98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	619a      	str	r2, [r3, #24]
  }
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb4:	e022      	b.n	8005efc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ebc:	d01e      	beq.n	8005efc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fe fd29 	bl	8004914 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d113      	bne.n	8005efc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e00f      	b.n	8005f1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d0cd      	beq.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f30:	e02c      	b.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f870 	bl	800601c <I2C_IsErrorOccurred>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e02a      	b.n	8005f9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4c:	d01e      	beq.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4e:	f7fe fce1 	bl	8004914 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d113      	bne.n	8005f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e007      	b.n	8005f9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d1cb      	bne.n	8005f32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fb0:	e028      	b.n	8006004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f830 	bl	800601c <I2C_IsErrorOccurred>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e026      	b.n	8006014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc6:	f7fe fca5 	bl	8004914 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d113      	bne.n	8006004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e007      	b.n	8006014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b20      	cmp	r3, #32
 8006010:	d1cf      	bne.n	8005fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08a      	sub	sp, #40	; 0x28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	d075      	beq.n	8006134 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2210      	movs	r2, #16
 800604e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006050:	e056      	b.n	8006100 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006058:	d052      	beq.n	8006100 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fe fc5b 	bl	8004914 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	d302      	bcc.n	8006070 <I2C_IsErrorOccurred+0x54>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d147      	bne.n	8006100 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800607a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006082:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006092:	d12e      	bne.n	80060f2 <I2C_IsErrorOccurred+0xd6>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609a:	d02a      	beq.n	80060f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d027      	beq.n	80060f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060b2:	f7fe fc2f 	bl	8004914 <HAL_GetTick>
 80060b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b8:	e01b      	b.n	80060f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060ba:	f7fe fc2b 	bl	8004914 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b19      	cmp	r3, #25
 80060c6:	d914      	bls.n	80060f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d1dc      	bne.n	80060ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b20      	cmp	r3, #32
 800610c:	d003      	beq.n	8006116 <I2C_IsErrorOccurred+0xfa>
 800610e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006112:	2b00      	cmp	r3, #0
 8006114:	d09d      	beq.n	8006052 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2220      	movs	r2, #32
 8006124:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006156:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	f043 0308 	orr.w	r3, r3, #8
 800616e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	f043 0302 	orr.w	r3, r3, #2
 8006190:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80061a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01c      	beq.n	80061e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fe56 	bl	8005e5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b0d      	ldr	r3, [pc, #52]	; (80061f0 <I2C_IsErrorOccurred+0x1d4>)
 80061bc:	400b      	ands	r3, r1
 80061be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80061e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3728      	adds	r7, #40	; 0x28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	fe00e800 	.word	0xfe00e800

080061f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	607b      	str	r3, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	817b      	strh	r3, [r7, #10]
 8006202:	4613      	mov	r3, r2
 8006204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006206:	897b      	ldrh	r3, [r7, #10]
 8006208:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800620c:	7a7b      	ldrb	r3, [r7, #9]
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006214:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	4313      	orrs	r3, r2
 800621e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006222:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	0d5b      	lsrs	r3, r3, #21
 800622e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <I2C_TransferConfig+0x60>)
 8006234:	430b      	orrs	r3, r1
 8006236:	43db      	mvns	r3, r3
 8006238:	ea02 0103 	and.w	r1, r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	03ff63ff 	.word	0x03ff63ff

08006258 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b20      	cmp	r3, #32
 800626c:	d138      	bne.n	80062e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006278:	2302      	movs	r3, #2
 800627a:	e032      	b.n	80062e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2224      	movs	r2, #36	; 0x24
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0201 	orr.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e000      	b.n	80062e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
  }
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b20      	cmp	r3, #32
 8006302:	d139      	bne.n	8006378 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800630e:	2302      	movs	r3, #2
 8006310:	e033      	b.n	800637a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2224      	movs	r2, #36	; 0x24
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006340:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	e000      	b.n	800637a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006378:	2302      	movs	r3, #2
  }
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
 80063a4:	e007      	b.n	80063b6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 0204 	bic.w	r2, r3, #4
 80063ae:	4905      	ldr	r1, [pc, #20]	; (80063c4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	40030400 	.word	0x40030400

080063c8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_ICACHE_Enable+0x1c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <HAL_ICACHE_Enable+0x1c>)
 80063d2:	f043 0301 	orr.w	r3, r3, #1
 80063d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40030400 	.word	0x40030400

080063e8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80063f0:	4b34      	ldr	r3, [pc, #208]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063f8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d101      	bne.n	8006406 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e057      	b.n	80064b6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640c:	d90a      	bls.n	8006424 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800640e:	4b2d      	ldr	r3, [pc, #180]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4313      	orrs	r3, r2
 800641a:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800641c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006420:	60d3      	str	r3, [r2, #12]
 8006422:	e007      	b.n	8006434 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006424:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800642c:	4925      	ldr	r1, [pc, #148]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4313      	orrs	r3, r2
 8006432:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006434:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a24      	ldr	r2, [pc, #144]	; (80064cc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	099b      	lsrs	r3, r3, #6
 8006440:	2232      	movs	r2, #50	; 0x32
 8006442:	fb02 f303 	mul.w	r3, r2, r3
 8006446:	4a21      	ldr	r2, [pc, #132]	; (80064cc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	099b      	lsrs	r3, r3, #6
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006452:	e002      	b.n	800645a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3b01      	subs	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800645a:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <HAL_PWREx_ControlVoltageScaling+0x84>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f3      	bne.n	8006454 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01b      	beq.n	80064aa <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a15      	ldr	r2, [pc, #84]	; (80064cc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006478:	fba2 2303 	umull	r2, r3, r2, r3
 800647c:	099b      	lsrs	r3, r3, #6
 800647e:	2232      	movs	r2, #50	; 0x32
 8006480:	fb02 f303 	mul.w	r3, r2, r3
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	099b      	lsrs	r3, r3, #6
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006490:	e002      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b01      	subs	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <HAL_PWREx_ControlVoltageScaling+0xc2>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f3      	bne.n	8006492 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e000      	b.n	80064b6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	46020800 	.word	0x46020800
 80064c8:	200000a0 	.word	0x200000a0
 80064cc:	10624dd3 	.word	0x10624dd3

080064d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80064d4:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80064dc:	4618      	mov	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	46020800 	.word	0x46020800

080064ec <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80064f4:	4b22      	ldr	r3, [pc, #136]	; (8006580 <HAL_PWREx_ConfigSupply+0x94>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a22      	ldr	r2, [pc, #136]	; (8006584 <HAL_PWREx_ConfigSupply+0x98>)
 80064fa:	fba2 2303 	umull	r2, r3, r2, r3
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2232      	movs	r2, #50	; 0x32
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <HAL_PWREx_ConfigSupply+0x98>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d113      	bne.n	8006540 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006518:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <HAL_PWREx_ConfigSupply+0x9c>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <HAL_PWREx_ConfigSupply+0x9c>)
 800651e:	f023 0302 	bic.w	r3, r3, #2
 8006522:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006524:	e002      	b.n	800652c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3b01      	subs	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <HAL_PWREx_ConfigSupply+0x9c>)
 800652e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b02      	cmp	r3, #2
 8006536:	d116      	bne.n	8006566 <HAL_PWREx_ConfigSupply+0x7a>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f3      	bne.n	8006526 <HAL_PWREx_ConfigSupply+0x3a>
 800653e:	e012      	b.n	8006566 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_PWREx_ConfigSupply+0x9c>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4a10      	ldr	r2, [pc, #64]	; (8006588 <HAL_PWREx_ConfigSupply+0x9c>)
 8006546:	f043 0302 	orr.w	r3, r3, #2
 800654a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800654c:	e002      	b.n	8006554 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3b01      	subs	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <HAL_PWREx_ConfigSupply+0x9c>)
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <HAL_PWREx_ConfigSupply+0x7a>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f3      	bne.n	800654e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e000      	b.n	8006572 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	200000a0 	.word	0x200000a0
 8006584:	10624dd3 	.word	0x10624dd3
 8006588:	46020800 	.word	0x46020800

0800658c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08e      	sub	sp, #56	; 0x38
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006594:	2300      	movs	r3, #0
 8006596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f000 bec3 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065a6:	4b9c      	ldr	r3, [pc, #624]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f003 030c 	and.w	r3, r3, #12
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065b0:	4b99      	ldr	r3, [pc, #612]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	f003 0303 	and.w	r3, r3, #3
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8172 	beq.w	80068ac <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <HAL_RCC_OscConfig+0x52>
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	f040 80e4 	bne.w	800679e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	f040 80e0 	bne.w	800679e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065de:	4b8e      	ldr	r3, [pc, #568]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d006      	beq.n	80065f8 <HAL_RCC_OscConfig+0x6c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d102      	bne.n	80065f8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f000 be9a 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065fc:	4b86      	ldr	r3, [pc, #536]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <HAL_RCC_OscConfig+0x86>
 8006608:	4b83      	ldr	r3, [pc, #524]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006610:	e005      	b.n	800661e <HAL_RCC_OscConfig+0x92>
 8006612:	4b81      	ldr	r3, [pc, #516]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006618:	041b      	lsls	r3, r3, #16
 800661a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800661e:	4293      	cmp	r3, r2
 8006620:	d255      	bcs.n	80066ce <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	4618      	mov	r0, r3
 800662e:	f001 f9ab 	bl	8007988 <RCC_SetFlashLatencyFromMSIRange>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f000 be77 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800663e:	4b76      	ldr	r3, [pc, #472]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	4a75      	ldr	r2, [pc, #468]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006648:	6093      	str	r3, [r2, #8]
 800664a:	4b73      	ldr	r3, [pc, #460]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	4970      	ldr	r1, [pc, #448]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006658:	4313      	orrs	r3, r2
 800665a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006664:	d309      	bcc.n	800667a <HAL_RCC_OscConfig+0xee>
 8006666:	4b6c      	ldr	r3, [pc, #432]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f023 021f 	bic.w	r2, r3, #31
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	4969      	ldr	r1, [pc, #420]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006674:	4313      	orrs	r3, r2
 8006676:	60cb      	str	r3, [r1, #12]
 8006678:	e07e      	b.n	8006778 <HAL_RCC_OscConfig+0x1ec>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	da0a      	bge.n	8006698 <HAL_RCC_OscConfig+0x10c>
 8006682:	4b65      	ldr	r3, [pc, #404]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	015b      	lsls	r3, r3, #5
 8006690:	4961      	ldr	r1, [pc, #388]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	60cb      	str	r3, [r1, #12]
 8006696:	e06f      	b.n	8006778 <HAL_RCC_OscConfig+0x1ec>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d30a      	bcc.n	80066b8 <HAL_RCC_OscConfig+0x12c>
 80066a2:	4b5d      	ldr	r3, [pc, #372]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	029b      	lsls	r3, r3, #10
 80066b0:	4959      	ldr	r1, [pc, #356]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60cb      	str	r3, [r1, #12]
 80066b6:	e05f      	b.n	8006778 <HAL_RCC_OscConfig+0x1ec>
 80066b8:	4b57      	ldr	r3, [pc, #348]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	03db      	lsls	r3, r3, #15
 80066c6:	4954      	ldr	r1, [pc, #336]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60cb      	str	r3, [r1, #12]
 80066cc:	e054      	b.n	8006778 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80066ce:	4b52      	ldr	r3, [pc, #328]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	4a51      	ldr	r2, [pc, #324]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066d8:	6093      	str	r3, [r2, #8]
 80066da:	4b4f      	ldr	r3, [pc, #316]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	494c      	ldr	r1, [pc, #304]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80066f4:	d309      	bcc.n	800670a <HAL_RCC_OscConfig+0x17e>
 80066f6:	4b48      	ldr	r3, [pc, #288]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f023 021f 	bic.w	r2, r3, #31
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	4945      	ldr	r1, [pc, #276]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006704:	4313      	orrs	r3, r2
 8006706:	60cb      	str	r3, [r1, #12]
 8006708:	e028      	b.n	800675c <HAL_RCC_OscConfig+0x1d0>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	da0a      	bge.n	8006728 <HAL_RCC_OscConfig+0x19c>
 8006712:	4b41      	ldr	r3, [pc, #260]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	015b      	lsls	r3, r3, #5
 8006720:	493d      	ldr	r1, [pc, #244]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	60cb      	str	r3, [r1, #12]
 8006726:	e019      	b.n	800675c <HAL_RCC_OscConfig+0x1d0>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006730:	d30a      	bcc.n	8006748 <HAL_RCC_OscConfig+0x1bc>
 8006732:	4b39      	ldr	r3, [pc, #228]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	029b      	lsls	r3, r3, #10
 8006740:	4935      	ldr	r1, [pc, #212]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006742:	4313      	orrs	r3, r2
 8006744:	60cb      	str	r3, [r1, #12]
 8006746:	e009      	b.n	800675c <HAL_RCC_OscConfig+0x1d0>
 8006748:	4b33      	ldr	r3, [pc, #204]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	03db      	lsls	r3, r3, #15
 8006756:	4930      	ldr	r1, [pc, #192]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006758:	4313      	orrs	r3, r2
 800675a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	4618      	mov	r0, r3
 8006768:	f001 f90e 	bl	8007988 <RCC_SetFlashLatencyFromMSIRange>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f000 bdda 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006778:	f001 f8d8 	bl	800792c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800677c:	4b27      	ldr	r3, [pc, #156]	; (800681c <HAL_RCC_OscConfig+0x290>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe f87d 	bl	8004880 <HAL_InitTick>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 800678c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 808a 	beq.w	80068aa <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8006796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800679a:	f000 bdc7 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d066      	beq.n	8006874 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80067b2:	f7fe f8af 	bl	8004914 <HAL_GetTick>
 80067b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80067b8:	e009      	b.n	80067ce <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067ba:	f7fe f8ab 	bl	8004914 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d902      	bls.n	80067ce <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	f000 bdaf 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0ef      	beq.n	80067ba <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	4a0e      	ldr	r2, [pc, #56]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80067e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067e4:	6093      	str	r3, [r2, #8]
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	4909      	ldr	r1, [pc, #36]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006800:	d30e      	bcc.n	8006820 <HAL_RCC_OscConfig+0x294>
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f023 021f 	bic.w	r2, r3, #31
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	4902      	ldr	r1, [pc, #8]	; (8006818 <HAL_RCC_OscConfig+0x28c>)
 8006810:	4313      	orrs	r3, r2
 8006812:	60cb      	str	r3, [r1, #12]
 8006814:	e04a      	b.n	80068ac <HAL_RCC_OscConfig+0x320>
 8006816:	bf00      	nop
 8006818:	46020c00 	.word	0x46020c00
 800681c:	200000a4 	.word	0x200000a4
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	da0a      	bge.n	800683e <HAL_RCC_OscConfig+0x2b2>
 8006828:	4b9b      	ldr	r3, [pc, #620]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	015b      	lsls	r3, r3, #5
 8006836:	4998      	ldr	r1, [pc, #608]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006838:	4313      	orrs	r3, r2
 800683a:	60cb      	str	r3, [r1, #12]
 800683c:	e036      	b.n	80068ac <HAL_RCC_OscConfig+0x320>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006846:	d30a      	bcc.n	800685e <HAL_RCC_OscConfig+0x2d2>
 8006848:	4b93      	ldr	r3, [pc, #588]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	029b      	lsls	r3, r3, #10
 8006856:	4990      	ldr	r1, [pc, #576]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006858:	4313      	orrs	r3, r2
 800685a:	60cb      	str	r3, [r1, #12]
 800685c:	e026      	b.n	80068ac <HAL_RCC_OscConfig+0x320>
 800685e:	4b8e      	ldr	r3, [pc, #568]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	03db      	lsls	r3, r3, #15
 800686c:	498a      	ldr	r1, [pc, #552]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800686e:	4313      	orrs	r3, r2
 8006870:	60cb      	str	r3, [r1, #12]
 8006872:	e01b      	b.n	80068ac <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006874:	4b88      	ldr	r3, [pc, #544]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a87      	ldr	r2, [pc, #540]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800687a:	f023 0301 	bic.w	r3, r3, #1
 800687e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006880:	f7fe f848 	bl	8004914 <HAL_GetTick>
 8006884:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006886:	e009      	b.n	800689c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006888:	f7fe f844 	bl	8004914 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d902      	bls.n	800689c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	f000 bd48 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800689c:	4b7e      	ldr	r3, [pc, #504]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1ef      	bne.n	8006888 <HAL_RCC_OscConfig+0x2fc>
 80068a8:	e000      	b.n	80068ac <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8094 	beq.w	80069e2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d005      	beq.n	80068cc <HAL_RCC_OscConfig+0x340>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	d110      	bne.n	80068e8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d10d      	bne.n	80068e8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068cc:	4b72      	ldr	r3, [pc, #456]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8083 	beq.w	80069e0 <HAL_RCC_OscConfig+0x454>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d17e      	bne.n	80069e0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f000 bd22 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x374>
 80068f2:	4b69      	ldr	r3, [pc, #420]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a68      	ldr	r2, [pc, #416]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e041      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006908:	d112      	bne.n	8006930 <HAL_RCC_OscConfig+0x3a4>
 800690a:	4b63      	ldr	r3, [pc, #396]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a62      	ldr	r2, [pc, #392]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b60      	ldr	r3, [pc, #384]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a5f      	ldr	r2, [pc, #380]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800691c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	4b5d      	ldr	r3, [pc, #372]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a5c      	ldr	r2, [pc, #368]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e029      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006938:	d112      	bne.n	8006960 <HAL_RCC_OscConfig+0x3d4>
 800693a:	4b57      	ldr	r3, [pc, #348]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a56      	ldr	r2, [pc, #344]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b54      	ldr	r3, [pc, #336]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a53      	ldr	r2, [pc, #332]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800694c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	4b51      	ldr	r3, [pc, #324]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a50      	ldr	r2, [pc, #320]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	e011      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
 8006960:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a4c      	ldr	r2, [pc, #304]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	4b4a      	ldr	r3, [pc, #296]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a49      	ldr	r2, [pc, #292]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	4b47      	ldr	r3, [pc, #284]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a46      	ldr	r2, [pc, #280]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 800697e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d014      	beq.n	80069b6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800698c:	f7fd ffc2 	bl	8004914 <HAL_GetTick>
 8006990:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006992:	e009      	b.n	80069a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006994:	f7fd ffbe 	bl	8004914 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b64      	cmp	r3, #100	; 0x64
 80069a0:	d902      	bls.n	80069a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	f000 bcc2 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069a8:	4b3b      	ldr	r3, [pc, #236]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0ef      	beq.n	8006994 <HAL_RCC_OscConfig+0x408>
 80069b4:	e015      	b.n	80069e2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80069b6:	f7fd ffad 	bl	8004914 <HAL_GetTick>
 80069ba:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069bc:	e009      	b.n	80069d2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069be:	f7fd ffa9 	bl	8004914 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b64      	cmp	r3, #100	; 0x64
 80069ca:	d902      	bls.n	80069d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	f000 bcad 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069d2:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ef      	bne.n	80069be <HAL_RCC_OscConfig+0x432>
 80069de:	e000      	b.n	80069e2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d066      	beq.n	8006abc <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_OscConfig+0x474>
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2b0c      	cmp	r3, #12
 80069f8:	d11a      	bne.n	8006a30 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d117      	bne.n	8006a30 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a00:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d006      	beq.n	8006a1a <HAL_RCC_OscConfig+0x48e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f000 bc89 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	491b      	ldr	r1, [pc, #108]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a2e:	e045      	b.n	8006abc <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d024      	beq.n	8006a82 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006a38:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a42:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a44:	f7fd ff66 	bl	8004914 <HAL_GetTick>
 8006a48:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a4a:	e009      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a4c:	f7fd ff62 	bl	8004914 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d902      	bls.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	f000 bc66 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a60:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0ef      	beq.n	8006a4c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	4907      	ldr	r1, [pc, #28]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]
 8006a80:	e01c      	b.n	8006abc <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a04      	ldr	r2, [pc, #16]	; (8006a98 <HAL_RCC_OscConfig+0x50c>)
 8006a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a8e:	f7fd ff41 	bl	8004914 <HAL_GetTick>
 8006a92:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a94:	e00c      	b.n	8006ab0 <HAL_RCC_OscConfig+0x524>
 8006a96:	bf00      	nop
 8006a98:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fd ff3a 	bl	8004914 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d902      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	f000 bc3e 	b.w	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ab0:	4baf      	ldr	r3, [pc, #700]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1ef      	bne.n	8006a9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80c7 	beq.w	8006c58 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ad0:	4ba7      	ldr	r3, [pc, #668]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d111      	bne.n	8006b02 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ade:	4ba4      	ldr	r3, [pc, #656]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae4:	4aa2      	ldr	r2, [pc, #648]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006ae6:	f043 0304 	orr.w	r3, r3, #4
 8006aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006aee:	4ba0      	ldr	r3, [pc, #640]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b02:	4b9c      	ldr	r3, [pc, #624]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d118      	bne.n	8006b40 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b0e:	4b99      	ldr	r3, [pc, #612]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b12:	4a98      	ldr	r2, [pc, #608]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b1a:	f7fd fefb 	bl	8004914 <HAL_GetTick>
 8006b1e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b22:	f7fd fef7 	bl	8004914 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e3fb      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b34:	4b8f      	ldr	r3, [pc, #572]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d05f      	beq.n	8006c08 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006b48:	4b89      	ldr	r3, [pc, #548]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b4e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d037      	beq.n	8006bce <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d006      	beq.n	8006b76 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e3da      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01b      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8006b80:	4b7b      	ldr	r3, [pc, #492]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b86:	4a7a      	ldr	r2, [pc, #488]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006b88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8006b90:	f7fd fec0 	bl	8004914 <HAL_GetTick>
 8006b94:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b98:	f7fd febc 	bl	8004914 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e3c0      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006baa:	4b71      	ldr	r3, [pc, #452]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006bac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1ef      	bne.n	8006b98 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006bb8:	4b6d      	ldr	r3, [pc, #436]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	496a      	ldr	r1, [pc, #424]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006bce:	4b68      	ldr	r3, [pc, #416]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bd4:	4a66      	ldr	r2, [pc, #408]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006bde:	f7fd fe99 	bl	8004914 <HAL_GetTick>
 8006be2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006be6:	f7fd fe95 	bl	8004914 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e399      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006bf8:	4b5d      	ldr	r3, [pc, #372]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006bfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ef      	beq.n	8006be6 <HAL_RCC_OscConfig+0x65a>
 8006c06:	e01b      	b.n	8006c40 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006c08:	4b59      	ldr	r3, [pc, #356]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c0e:	4a58      	ldr	r2, [pc, #352]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c10:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006c14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006c18:	f7fd fe7c 	bl	8004914 <HAL_GetTick>
 8006c1c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c20:	f7fd fe78 	bl	8004914 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e37c      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c32:	4b4f      	ldr	r3, [pc, #316]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1ef      	bne.n	8006c20 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d107      	bne.n	8006c58 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c48:	4b49      	ldr	r3, [pc, #292]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4e:	4a48      	ldr	r2, [pc, #288]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c50:	f023 0304 	bic.w	r3, r3, #4
 8006c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8112 	beq.w	8006e8a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c6c:	4b40      	ldr	r3, [pc, #256]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d111      	bne.n	8006c9e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c7a:	4b3d      	ldr	r3, [pc, #244]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c80:	4a3b      	ldr	r2, [pc, #236]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006c8a:	4b39      	ldr	r3, [pc, #228]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c9e:	4b35      	ldr	r3, [pc, #212]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d118      	bne.n	8006cdc <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006caa:	4b32      	ldr	r3, [pc, #200]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	4a31      	ldr	r2, [pc, #196]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cb6:	f7fd fe2d 	bl	8004914 <HAL_GetTick>
 8006cba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cbe:	f7fd fe29 	bl	8004914 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e32d      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <HAL_RCC_OscConfig+0x7e8>)
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f0      	beq.n	8006cbe <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01f      	beq.n	8006d28 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cfa:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006cfc:	f043 0304 	orr.w	r3, r3, #4
 8006d00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d04:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d0a:	4a19      	ldr	r2, [pc, #100]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d14:	e018      	b.n	8006d48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d16:	4b16      	ldr	r3, [pc, #88]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d1c:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d1e:	f043 0301 	orr.w	r3, r3, #1
 8006d22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d26:	e00f      	b.n	8006d48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d28:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d2e:	4a10      	ldr	r2, [pc, #64]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d3e:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <HAL_RCC_OscConfig+0x7e4>)
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d058      	beq.n	8006e02 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8006d50:	f7fd fde0 	bl	8004914 <HAL_GetTick>
 8006d54:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d56:	e00f      	b.n	8006d78 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d58:	f7fd fddc 	bl	8004914 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d906      	bls.n	8006d78 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e2de      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
 8006d6e:	bf00      	nop
 8006d70:	46020c00 	.word	0x46020c00
 8006d74:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d78:	4b9c      	ldr	r3, [pc, #624]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0e8      	beq.n	8006d58 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01b      	beq.n	8006dca <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d92:	4b96      	ldr	r3, [pc, #600]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d98:	4a94      	ldr	r2, [pc, #592]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006da2:	e00a      	b.n	8006dba <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da4:	f7fd fdb6 	bl	8004914 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e2b8      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006dba:	4b8c      	ldr	r3, [pc, #560]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0ed      	beq.n	8006da4 <HAL_RCC_OscConfig+0x818>
 8006dc8:	e053      	b.n	8006e72 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dca:	4b88      	ldr	r3, [pc, #544]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dd0:	4a86      	ldr	r2, [pc, #536]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ddc:	f7fd fd9a 	bl	8004914 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e29c      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006df2:	4b7e      	ldr	r3, [pc, #504]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1ed      	bne.n	8006ddc <HAL_RCC_OscConfig+0x850>
 8006e00:	e037      	b.n	8006e72 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006e02:	f7fd fd87 	bl	8004914 <HAL_GetTick>
 8006e06:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e08:	e00a      	b.n	8006e20 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e0a:	f7fd fd83 	bl	8004914 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e285      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e20:	4b72      	ldr	r3, [pc, #456]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1ed      	bne.n	8006e0a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006e2e:	4b6f      	ldr	r3, [pc, #444]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e3c:	4b6b      	ldr	r3, [pc, #428]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e42:	4a6a      	ldr	r2, [pc, #424]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e4c:	e00a      	b.n	8006e64 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4e:	f7fd fd61 	bl	8004914 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e263      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e64:	4b61      	ldr	r3, [pc, #388]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1ed      	bne.n	8006e4e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e72:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d107      	bne.n	8006e8a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e7a:	4b5c      	ldr	r3, [pc, #368]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e80:	4a5a      	ldr	r2, [pc, #360]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006e82:	f023 0304 	bic.w	r3, r3, #4
 8006e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d036      	beq.n	8006f04 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d019      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006e9e:	4b53      	ldr	r3, [pc, #332]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a52      	ldr	r2, [pc, #328]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ea8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006eaa:	f7fd fd33 	bl	8004914 <HAL_GetTick>
 8006eae:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eb2:	f7fd fd2f 	bl	8004914 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e233      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006ec4:	4b49      	ldr	r3, [pc, #292]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x926>
 8006ed0:	e018      	b.n	8006f04 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006ed2:	4b46      	ldr	r3, [pc, #280]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a45      	ldr	r2, [pc, #276]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006edc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ede:	f7fd fd19 	bl	8004914 <HAL_GetTick>
 8006ee2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ee6:	f7fd fd15 	bl	8004914 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e219      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006ef8:	4b3c      	ldr	r3, [pc, #240]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f0      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d036      	beq.n	8006f7e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d019      	beq.n	8006f4c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006f18:	4b34      	ldr	r3, [pc, #208]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a33      	ldr	r2, [pc, #204]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f24:	f7fd fcf6 	bl	8004914 <HAL_GetTick>
 8006f28:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006f2c:	f7fd fcf2 	bl	8004914 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e1f6      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f3e:	4b2b      	ldr	r3, [pc, #172]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0f0      	beq.n	8006f2c <HAL_RCC_OscConfig+0x9a0>
 8006f4a:	e018      	b.n	8006f7e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006f4c:	4b27      	ldr	r3, [pc, #156]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a26      	ldr	r2, [pc, #152]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f58:	f7fd fcdc 	bl	8004914 <HAL_GetTick>
 8006f5c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006f60:	f7fd fcd8 	bl	8004914 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e1dc      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006f72:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d07f      	beq.n	800708a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d062      	beq.n	8007058 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006f92:	4b16      	ldr	r3, [pc, #88]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f9c:	6093      	str	r3, [r2, #8]
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	4910      	ldr	r1, [pc, #64]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006fb8:	d309      	bcc.n	8006fce <HAL_RCC_OscConfig+0xa42>
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f023 021f 	bic.w	r2, r3, #31
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	4909      	ldr	r1, [pc, #36]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60cb      	str	r3, [r1, #12]
 8006fcc:	e02a      	b.n	8007024 <HAL_RCC_OscConfig+0xa98>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da0c      	bge.n	8006ff0 <HAL_RCC_OscConfig+0xa64>
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	015b      	lsls	r3, r3, #5
 8006fe4:	4901      	ldr	r1, [pc, #4]	; (8006fec <HAL_RCC_OscConfig+0xa60>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60cb      	str	r3, [r1, #12]
 8006fea:	e01b      	b.n	8007024 <HAL_RCC_OscConfig+0xa98>
 8006fec:	46020c00 	.word	0x46020c00
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff8:	d30a      	bcc.n	8007010 <HAL_RCC_OscConfig+0xa84>
 8006ffa:	4ba5      	ldr	r3, [pc, #660]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	029b      	lsls	r3, r3, #10
 8007008:	49a1      	ldr	r1, [pc, #644]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800700a:	4313      	orrs	r3, r2
 800700c:	60cb      	str	r3, [r1, #12]
 800700e:	e009      	b.n	8007024 <HAL_RCC_OscConfig+0xa98>
 8007010:	4b9f      	ldr	r3, [pc, #636]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	03db      	lsls	r3, r3, #15
 800701e:	499c      	ldr	r1, [pc, #624]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007020:	4313      	orrs	r3, r2
 8007022:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007024:	4b9a      	ldr	r3, [pc, #616]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a99      	ldr	r2, [pc, #612]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800702a:	f043 0310 	orr.w	r3, r3, #16
 800702e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007030:	f7fd fc70 	bl	8004914 <HAL_GetTick>
 8007034:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007036:	e008      	b.n	800704a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007038:	f7fd fc6c 	bl	8004914 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b02      	cmp	r3, #2
 8007044:	d901      	bls.n	800704a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e170      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800704a:	4b91      	ldr	r3, [pc, #580]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <HAL_RCC_OscConfig+0xaac>
 8007056:	e018      	b.n	800708a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007058:	4b8d      	ldr	r3, [pc, #564]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a8c      	ldr	r2, [pc, #560]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800705e:	f023 0310 	bic.w	r3, r3, #16
 8007062:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007064:	f7fd fc56 	bl	8004914 <HAL_GetTick>
 8007068:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800706c:	f7fd fc52 	bl	8004914 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e156      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800707e:	4b84      	ldr	r3, [pc, #528]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 814b 	beq.w	800732a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007094:	2300      	movs	r3, #0
 8007096:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800709a:	4b7d      	ldr	r3, [pc, #500]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f003 030c 	and.w	r3, r3, #12
 80070a2:	2b0c      	cmp	r3, #12
 80070a4:	f000 80fa 	beq.w	800729c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	f040 80cc 	bne.w	800724a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80070b2:	4b77      	ldr	r3, [pc, #476]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a76      	ldr	r2, [pc, #472]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80070b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070be:	f7fd fc29 	bl	8004914 <HAL_GetTick>
 80070c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c6:	f7fd fc25 	bl	8004914 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e129      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80070d8:	4b6d      	ldr	r3, [pc, #436]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f0      	bne.n	80070c6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070e4:	4b6a      	ldr	r3, [pc, #424]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80070e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d111      	bne.n	8007116 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80070f2:	4b67      	ldr	r3, [pc, #412]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80070f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070f8:	4a65      	ldr	r2, [pc, #404]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80070fa:	f043 0304 	orr.w	r3, r3, #4
 80070fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007102:	4b63      	ldr	r3, [pc, #396]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007116:	4b5f      	ldr	r3, [pc, #380]	; (8007294 <HAL_RCC_OscConfig+0xd08>)
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800711e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007122:	d102      	bne.n	800712a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800712a:	4b5a      	ldr	r3, [pc, #360]	; (8007294 <HAL_RCC_OscConfig+0xd08>)
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	4a59      	ldr	r2, [pc, #356]	; (8007294 <HAL_RCC_OscConfig+0xd08>)
 8007130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007134:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007136:	4b56      	ldr	r3, [pc, #344]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713e:	f023 0303 	bic.w	r3, r3, #3
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800714a:	3a01      	subs	r2, #1
 800714c:	0212      	lsls	r2, r2, #8
 800714e:	4311      	orrs	r1, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007154:	430a      	orrs	r2, r1
 8007156:	494e      	ldr	r1, [pc, #312]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007158:	4313      	orrs	r3, r2
 800715a:	628b      	str	r3, [r1, #40]	; 0x28
 800715c:	4b4c      	ldr	r3, [pc, #304]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800715e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007160:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <HAL_RCC_OscConfig+0xd0c>)
 8007162:	4013      	ands	r3, r2
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007168:	3a01      	subs	r2, #1
 800716a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007172:	3a01      	subs	r2, #1
 8007174:	0252      	lsls	r2, r2, #9
 8007176:	b292      	uxth	r2, r2
 8007178:	4311      	orrs	r1, r2
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800717e:	3a01      	subs	r2, #1
 8007180:	0412      	lsls	r2, r2, #16
 8007182:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007186:	4311      	orrs	r1, r2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800718c:	3a01      	subs	r2, #1
 800718e:	0612      	lsls	r2, r2, #24
 8007190:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007194:	430a      	orrs	r2, r1
 8007196:	493e      	ldr	r1, [pc, #248]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007198:	4313      	orrs	r3, r2
 800719a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800719c:	4b3c      	ldr	r3, [pc, #240]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	4a3b      	ldr	r2, [pc, #236]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071a2:	f023 0310 	bic.w	r3, r3, #16
 80071a6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80071a8:	4b39      	ldr	r3, [pc, #228]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80071b8:	00d2      	lsls	r2, r2, #3
 80071ba:	4935      	ldr	r1, [pc, #212]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80071c0:	4b33      	ldr	r3, [pc, #204]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	4a32      	ldr	r2, [pc, #200]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071c6:	f043 0310 	orr.w	r3, r3, #16
 80071ca:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80071cc:	4b30      	ldr	r3, [pc, #192]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	f023 020c 	bic.w	r2, r3, #12
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d8:	492d      	ldr	r1, [pc, #180]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80071de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d105      	bne.n	80071f2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80071e6:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <HAL_RCC_OscConfig+0xd08>)
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <HAL_RCC_OscConfig+0xd08>)
 80071ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80071f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80071fa:	4b25      	ldr	r3, [pc, #148]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 80071fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007200:	4a23      	ldr	r2, [pc, #140]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007202:	f023 0304 	bic.w	r3, r3, #4
 8007206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800720a:	4b21      	ldr	r3, [pc, #132]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	4a20      	ldr	r2, [pc, #128]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007214:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007216:	4b1e      	ldr	r3, [pc, #120]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800721c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007220:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007222:	f7fd fb77 	bl	8004914 <HAL_GetTick>
 8007226:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800722a:	f7fd fb73 	bl	8004914 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e077      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800723c:	4b14      	ldr	r3, [pc, #80]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f0      	beq.n	800722a <HAL_RCC_OscConfig+0xc9e>
 8007248:	e06f      	b.n	800732a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a10      	ldr	r2, [pc, #64]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007254:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007256:	f7fd fb5d 	bl	8004914 <HAL_GetTick>
 800725a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800725c:	e008      	b.n	8007270 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725e:	f7fd fb59 	bl	8004914 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e05d      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1f0      	bne.n	800725e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800727c:	4b04      	ldr	r3, [pc, #16]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	4a03      	ldr	r2, [pc, #12]	; (8007290 <HAL_RCC_OscConfig+0xd04>)
 8007282:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	6293      	str	r3, [r2, #40]	; 0x28
 800728c:	e04d      	b.n	800732a <HAL_RCC_OscConfig+0xd9e>
 800728e:	bf00      	nop
 8007290:	46020c00 	.word	0x46020c00
 8007294:	46020800 	.word	0x46020800
 8007298:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800729c:	4b25      	ldr	r3, [pc, #148]	; (8007334 <HAL_RCC_OscConfig+0xda8>)
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <HAL_RCC_OscConfig+0xda8>)
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d03a      	beq.n	8007326 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f003 0203 	and.w	r2, r3, #3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d133      	bne.n	8007326 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d12a      	bne.n	8007326 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	0b1b      	lsrs	r3, r3, #12
 80072d4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80072dc:	429a      	cmp	r2, r3
 80072de:	d122      	bne.n	8007326 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ea:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d11a      	bne.n	8007326 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	0a5b      	lsrs	r3, r3, #9
 80072f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072fe:	429a      	cmp	r2, r3
 8007300:	d111      	bne.n	8007326 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007310:	429a      	cmp	r2, r3
 8007312:	d108      	bne.n	8007326 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	0e1b      	lsrs	r3, r3, #24
 8007318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007322:	429a      	cmp	r2, r3
 8007324:	d001      	beq.n	800732a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3738      	adds	r7, #56	; 0x38
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	46020c00 	.word	0x46020c00

08007338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e1d9      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800734c:	4b9b      	ldr	r3, [pc, #620]	; (80075bc <HAL_RCC_ClockConfig+0x284>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d910      	bls.n	800737c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735a:	4b98      	ldr	r3, [pc, #608]	; (80075bc <HAL_RCC_ClockConfig+0x284>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 020f 	bic.w	r2, r3, #15
 8007362:	4996      	ldr	r1, [pc, #600]	; (80075bc <HAL_RCC_ClockConfig+0x284>)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	4313      	orrs	r3, r2
 8007368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	4b94      	ldr	r3, [pc, #592]	; (80075bc <HAL_RCC_ClockConfig+0x284>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e1c1      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	d010      	beq.n	80073aa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	695a      	ldr	r2, [r3, #20]
 800738c:	4b8c      	ldr	r3, [pc, #560]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007394:	429a      	cmp	r2, r3
 8007396:	d908      	bls.n	80073aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007398:	4b89      	ldr	r3, [pc, #548]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	4986      	ldr	r1, [pc, #536]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d012      	beq.n	80073dc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	4b81      	ldr	r3, [pc, #516]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	091b      	lsrs	r3, r3, #4
 80073c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d909      	bls.n	80073dc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80073c8:	4b7d      	ldr	r3, [pc, #500]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	497a      	ldr	r1, [pc, #488]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d010      	beq.n	800740a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	4b74      	ldr	r3, [pc, #464]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d908      	bls.n	800740a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80073f8:	4b71      	ldr	r3, [pc, #452]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	496e      	ldr	r1, [pc, #440]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007406:	4313      	orrs	r3, r2
 8007408:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d010      	beq.n	8007438 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	4b69      	ldr	r3, [pc, #420]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	429a      	cmp	r2, r3
 8007424:	d908      	bls.n	8007438 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007426:	4b66      	ldr	r3, [pc, #408]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f023 020f 	bic.w	r2, r3, #15
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	4963      	ldr	r1, [pc, #396]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007434:	4313      	orrs	r3, r2
 8007436:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 80d2 	beq.w	80075ea <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d143      	bne.n	80074da <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007452:	4b5b      	ldr	r3, [pc, #364]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d110      	bne.n	8007482 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007460:	4b57      	ldr	r3, [pc, #348]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007466:	4a56      	ldr	r2, [pc, #344]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007468:	f043 0304 	orr.w	r3, r3, #4
 800746c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007470:	4b53      	ldr	r3, [pc, #332]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	60bb      	str	r3, [r7, #8]
 800747c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007482:	f7fd fa47 	bl	8004914 <HAL_GetTick>
 8007486:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007488:	4b4e      	ldr	r3, [pc, #312]	; (80075c4 <HAL_RCC_ClockConfig+0x28c>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00f      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007494:	e008      	b.n	80074a8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007496:	f7fd fa3d 	bl	8004914 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e12b      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80074a8:	4b46      	ldr	r3, [pc, #280]	; (80075c4 <HAL_RCC_ClockConfig+0x28c>)
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80074ba:	4b41      	ldr	r3, [pc, #260]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80074bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074c0:	4a3f      	ldr	r2, [pc, #252]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80074c2:	f023 0304 	bic.w	r3, r3, #4
 80074c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80074ca:	4b3d      	ldr	r3, [pc, #244]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d121      	bne.n	800751a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e112      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d107      	bne.n	80074f2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074e2:	4b37      	ldr	r3, [pc, #220]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d115      	bne.n	800751a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e106      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d107      	bne.n	800750a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80074fa:	4b31      	ldr	r3, [pc, #196]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e0fa      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800750a:	4b2d      	ldr	r3, [pc, #180]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e0f2      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800751a:	4b29      	ldr	r3, [pc, #164]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f023 0203 	bic.w	r2, r3, #3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	4926      	ldr	r1, [pc, #152]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007528:	4313      	orrs	r3, r2
 800752a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800752c:	f7fd f9f2 	bl	8004914 <HAL_GetTick>
 8007530:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b03      	cmp	r3, #3
 8007538:	d112      	bne.n	8007560 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800753a:	e00a      	b.n	8007552 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800753c:	f7fd f9ea 	bl	8004914 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	f241 3288 	movw	r2, #5000	; 0x1388
 800754a:	4293      	cmp	r3, r2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e0d6      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007552:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 030c 	and.w	r3, r3, #12
 800755a:	2b0c      	cmp	r3, #12
 800755c:	d1ee      	bne.n	800753c <HAL_RCC_ClockConfig+0x204>
 800755e:	e044      	b.n	80075ea <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d112      	bne.n	800758e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007568:	e00a      	b.n	8007580 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800756a:	f7fd f9d3 	bl	8004914 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	f241 3288 	movw	r2, #5000	; 0x1388
 8007578:	4293      	cmp	r3, r2
 800757a:	d901      	bls.n	8007580 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e0bf      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007580:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f003 030c 	and.w	r3, r3, #12
 8007588:	2b08      	cmp	r3, #8
 800758a:	d1ee      	bne.n	800756a <HAL_RCC_ClockConfig+0x232>
 800758c:	e02d      	b.n	80075ea <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d123      	bne.n	80075de <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007596:	e00a      	b.n	80075ae <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fd f9bc 	bl	8004914 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e0a8      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <HAL_RCC_ClockConfig+0x288>)
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f003 030c 	and.w	r3, r3, #12
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1ee      	bne.n	8007598 <HAL_RCC_ClockConfig+0x260>
 80075ba:	e016      	b.n	80075ea <HAL_RCC_ClockConfig+0x2b2>
 80075bc:	40022000 	.word	0x40022000
 80075c0:	46020c00 	.word	0x46020c00
 80075c4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c8:	f7fd f9a4 	bl	8004914 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e090      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80075de:	4b4a      	ldr	r3, [pc, #296]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f003 030c 	and.w	r3, r3, #12
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d1ee      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d010      	beq.n	8007618 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	4b43      	ldr	r3, [pc, #268]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	429a      	cmp	r2, r3
 8007604:	d208      	bcs.n	8007618 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007606:	4b40      	ldr	r3, [pc, #256]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 020f 	bic.w	r2, r3, #15
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	493d      	ldr	r1, [pc, #244]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 8007614:	4313      	orrs	r3, r2
 8007616:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007618:	4b3c      	ldr	r3, [pc, #240]	; (800770c <HAL_RCC_ClockConfig+0x3d4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 030f 	and.w	r3, r3, #15
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d210      	bcs.n	8007648 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007626:	4b39      	ldr	r3, [pc, #228]	; (800770c <HAL_RCC_ClockConfig+0x3d4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f023 020f 	bic.w	r2, r3, #15
 800762e:	4937      	ldr	r1, [pc, #220]	; (800770c <HAL_RCC_ClockConfig+0x3d4>)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	4313      	orrs	r3, r2
 8007634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007636:	4b35      	ldr	r3, [pc, #212]	; (800770c <HAL_RCC_ClockConfig+0x3d4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d001      	beq.n	8007648 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e05b      	b.n	8007700 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d010      	beq.n	8007676 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007660:	429a      	cmp	r2, r3
 8007662:	d208      	bcs.n	8007676 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007664:	4b28      	ldr	r3, [pc, #160]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	4925      	ldr	r1, [pc, #148]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 8007672:	4313      	orrs	r3, r2
 8007674:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b00      	cmp	r3, #0
 8007680:	d012      	beq.n	80076a8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	4b20      	ldr	r3, [pc, #128]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	091b      	lsrs	r3, r3, #4
 800768c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007690:	429a      	cmp	r2, r3
 8007692:	d209      	bcs.n	80076a8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007694:	4b1c      	ldr	r3, [pc, #112]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	4919      	ldr	r1, [pc, #100]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0310 	and.w	r3, r3, #16
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d010      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695a      	ldr	r2, [r3, #20]
 80076b8:	4b13      	ldr	r3, [pc, #76]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d208      	bcs.n	80076d6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80076c4:	4b10      	ldr	r3, [pc, #64]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	490d      	ldr	r1, [pc, #52]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80076d6:	f000 f821 	bl	800771c <HAL_RCC_GetSysClockFreq>
 80076da:	4602      	mov	r2, r0
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <HAL_RCC_ClockConfig+0x3d0>)
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	490a      	ldr	r1, [pc, #40]	; (8007710 <HAL_RCC_ClockConfig+0x3d8>)
 80076e6:	5ccb      	ldrb	r3, [r1, r3]
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	4a09      	ldr	r2, [pc, #36]	; (8007714 <HAL_RCC_ClockConfig+0x3dc>)
 80076ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80076f0:	4b09      	ldr	r3, [pc, #36]	; (8007718 <HAL_RCC_ClockConfig+0x3e0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fd f8c3 	bl	8004880 <HAL_InitTick>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]

  return status;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	46020c00 	.word	0x46020c00
 800770c:	40022000 	.word	0x40022000
 8007710:	0800f978 	.word	0x0800f978
 8007714:	200000a0 	.word	0x200000a0
 8007718:	200000a4 	.word	0x200000a4

0800771c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800771c:	b480      	push	{r7}
 800771e:	b08b      	sub	sp, #44	; 0x2c
 8007720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800772a:	4b7b      	ldr	r3, [pc, #492]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f003 030c 	and.w	r3, r3, #12
 8007732:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007734:	4b78      	ldr	r3, [pc, #480]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_RCC_GetSysClockFreq+0x34>
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b0c      	cmp	r3, #12
 8007748:	d121      	bne.n	800778e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d11e      	bne.n	800778e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007750:	4b71      	ldr	r3, [pc, #452]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d107      	bne.n	800776c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800775c:	4b6e      	ldr	r3, [pc, #440]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800775e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007762:	0b1b      	lsrs	r3, r3, #12
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
 800776a:	e005      	b.n	8007778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800776c:	4b6a      	ldr	r3, [pc, #424]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	0f1b      	lsrs	r3, r3, #28
 8007772:	f003 030f 	and.w	r3, r3, #15
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007778:	4a68      	ldr	r2, [pc, #416]	; (800791c <HAL_RCC_GetSysClockFreq+0x200>)
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007780:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d110      	bne.n	80077aa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800778c:	e00d      	b.n	80077aa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800778e:	4b62      	ldr	r3, [pc, #392]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f003 030c 	and.w	r3, r3, #12
 8007796:	2b04      	cmp	r3, #4
 8007798:	d102      	bne.n	80077a0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800779a:	4b61      	ldr	r3, [pc, #388]	; (8007920 <HAL_RCC_GetSysClockFreq+0x204>)
 800779c:	623b      	str	r3, [r7, #32]
 800779e:	e004      	b.n	80077aa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d101      	bne.n	80077aa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077a6:	4b5e      	ldr	r3, [pc, #376]	; (8007920 <HAL_RCC_GetSysClockFreq+0x204>)
 80077a8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	f040 80ac 	bne.w	800790a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80077b2:	4b59      	ldr	r3, [pc, #356]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80077bc:	4b56      	ldr	r3, [pc, #344]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	0a1b      	lsrs	r3, r3, #8
 80077c2:	f003 030f 	and.w	r3, r3, #15
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80077ca:	4b53      	ldr	r3, [pc, #332]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	091b      	lsrs	r3, r3, #4
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80077d6:	4b50      	ldr	r3, [pc, #320]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8086 	beq.w	8007906 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d003      	beq.n	8007808 <HAL_RCC_GetSysClockFreq+0xec>
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d022      	beq.n	800784c <HAL_RCC_GetSysClockFreq+0x130>
 8007806:	e043      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eddf 6a44 	vldr	s13, [pc, #272]	; 8007924 <HAL_RCC_GetSysClockFreq+0x208>
 8007816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781a:	4b3f      	ldr	r3, [pc, #252]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800782a:	ed97 6a01 	vldr	s12, [r7, #4]
 800782e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007928 <HAL_RCC_GetSysClockFreq+0x20c>
 8007832:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007836:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800783a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007846:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800784a:	e046      	b.n	80078da <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	eddf 6a33 	vldr	s13, [pc, #204]	; 8007924 <HAL_RCC_GetSysClockFreq+0x208>
 800785a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785e:	4b2e      	ldr	r3, [pc, #184]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800786e:	ed97 6a01 	vldr	s12, [r7, #4]
 8007872:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007928 <HAL_RCC_GetSysClockFreq+0x20c>
 8007876:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800787a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800787e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007882:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800788e:	e024      	b.n	80078da <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a8:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80078aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078b8:	ed97 6a01 	vldr	s12, [r7, #4]
 80078bc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8007928 <HAL_RCC_GetSysClockFreq+0x20c>
 80078c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80078d8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80078da:	4b0f      	ldr	r3, [pc, #60]	; (8007918 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80078dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078de:	0e1b      	lsrs	r3, r3, #24
 80078e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078e4:	3301      	adds	r3, #1
 80078e6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078fe:	ee17 3a90 	vmov	r3, s15
 8007902:	623b      	str	r3, [r7, #32]
 8007904:	e001      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800790a:	6a3b      	ldr	r3, [r7, #32]
}
 800790c:	4618      	mov	r0, r3
 800790e:	372c      	adds	r7, #44	; 0x2c
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	46020c00 	.word	0x46020c00
 800791c:	0800f990 	.word	0x0800f990
 8007920:	00f42400 	.word	0x00f42400
 8007924:	4b742400 	.word	0x4b742400
 8007928:	46000000 	.word	0x46000000

0800792c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007930:	f7ff fef4 	bl	800771c <HAL_RCC_GetSysClockFreq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <HAL_RCC_GetHCLKFreq+0x28>)
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	4906      	ldr	r1, [pc, #24]	; (8007958 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007940:	5ccb      	ldrb	r3, [r1, r3]
 8007942:	fa22 f303 	lsr.w	r3, r2, r3
 8007946:	4a05      	ldr	r2, [pc, #20]	; (800795c <HAL_RCC_GetHCLKFreq+0x30>)
 8007948:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <HAL_RCC_GetHCLKFreq+0x30>)
 800794c:	681b      	ldr	r3, [r3, #0]
}
 800794e:	4618      	mov	r0, r3
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	46020c00 	.word	0x46020c00
 8007958:	0800f978 	.word	0x0800f978
 800795c:	200000a0 	.word	0x200000a0

08007960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007964:	f7ff ffe2 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	091b      	lsrs	r3, r3, #4
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4903      	ldr	r1, [pc, #12]	; (8007984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007976:	5ccb      	ldrb	r3, [r1, r3]
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	46020c00 	.word	0x46020c00
 8007984:	0800f988 	.word	0x0800f988

08007988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007990:	4b3e      	ldr	r3, [pc, #248]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007996:	f003 0304 	and.w	r3, r3, #4
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800799e:	f7fe fd97 	bl	80064d0 <HAL_PWREx_GetVoltageRange>
 80079a2:	6178      	str	r0, [r7, #20]
 80079a4:	e019      	b.n	80079da <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80079a6:	4b39      	ldr	r3, [pc, #228]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079ac:	4a37      	ldr	r2, [pc, #220]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079ae:	f043 0304 	orr.w	r3, r3, #4
 80079b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80079b6:	4b35      	ldr	r3, [pc, #212]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079c4:	f7fe fd84 	bl	80064d0 <HAL_PWREx_GetVoltageRange>
 80079c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079ca:	4b30      	ldr	r3, [pc, #192]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079d0:	4a2e      	ldr	r2, [pc, #184]	; (8007a8c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80079d2:	f023 0304 	bic.w	r3, r3, #4
 80079d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079e0:	d003      	beq.n	80079ea <RCC_SetFlashLatencyFromMSIRange+0x62>
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079e8:	d109      	bne.n	80079fe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079f0:	d202      	bcs.n	80079f8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80079f2:	2301      	movs	r3, #1
 80079f4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80079f6:	e033      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80079fc:	e030      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a04:	d208      	bcs.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0c:	d102      	bne.n	8007a14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007a0e:	2303      	movs	r3, #3
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	e025      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e035      	b.n	8007a84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1e:	d90f      	bls.n	8007a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d109      	bne.n	8007a3a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a2c:	d902      	bls.n	8007a34 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007a2e:	2300      	movs	r3, #0
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	e015      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007a34:	2301      	movs	r3, #1
 8007a36:	613b      	str	r3, [r7, #16]
 8007a38:	e012      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	e00f      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a46:	d109      	bne.n	8007a5c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4e:	d102      	bne.n	8007a56 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007a50:	2301      	movs	r3, #1
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	e004      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007a56:	2302      	movs	r3, #2
 8007a58:	613b      	str	r3, [r7, #16]
 8007a5a:	e001      	b.n	8007a60 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a60:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f023 020f 	bic.w	r2, r3, #15
 8007a68:	4909      	ldr	r1, [pc, #36]	; (8007a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d001      	beq.n	8007a82 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	46020c00 	.word	0x46020c00
 8007a90:	40022000 	.word	0x40022000

08007a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8007a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007acc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007a98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007a9a:	e003      	b.n	8007aa4 <LoopCopyDataInit>

08007a9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007a9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007aa0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007aa2:	3104      	adds	r1, #4

08007aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007aa4:	480b      	ldr	r0, [pc, #44]	; (8007ad4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007aa6:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007aa8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007aaa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007aac:	d3f6      	bcc.n	8007a9c <CopyDataInit>
	ldr	r2, =_sbss
 8007aae:	4a0b      	ldr	r2, [pc, #44]	; (8007adc <LoopForever+0x12>)
	b	LoopFillZerobss
 8007ab0:	e002      	b.n	8007ab8 <LoopFillZerobss>

08007ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007ab2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007ab4:	f842 3b04 	str.w	r3, [r2], #4

08007ab8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007ab8:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <LoopForever+0x16>)
	cmp	r2, r3
 8007aba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007abc:	d3f9      	bcc.n	8007ab2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007abe:	f7fc fe79 	bl	80047b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ac2:	f004 f98f 	bl	800bde4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007ac6:	f002 fd2b 	bl	800a520 <main>

08007aca <LoopForever>:

LoopForever:
    b LoopForever
 8007aca:	e7fe      	b.n	8007aca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8007acc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8007ad0:	0800fe78 	.word	0x0800fe78
	ldr	r0, =_sdata
 8007ad4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007ad8:	20000290 	.word	0x20000290
	ldr	r2, =_sbss
 8007adc:	20000290 	.word	0x20000290
	ldr	r3, = _ebss
 8007ae0:	20001120 	.word	0x20001120

08007ae4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007ae4:	e7fe      	b.n	8007ae4 <ADC1_IRQHandler>
	...

08007ae8 <Feature_Extraction_State_Machine_Translation>:

int board[SIZE][SIZE] =  {{{0},{0},{0},{0}}, {{0},{0},{0},{0}}, {{0},{0},{0},{0}}, {{0},{0},{0},{0}}};
int score = 0;

void Feature_Extraction_State_Machine_Translation(float * feature_1,
	float * feature_2, float * sig_mag_scale) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b0a8      	sub	sp, #160	; 0xa0
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
	float acc_x_filter_lp, acc_y_filter_lp;
	float acc_x_filter_hp;
	float acc_y_filter_hp;
	float acc_x_filter_hp_prev, acc_y_filter_hp_prev;
	float acc_x_filter_lp_prev, acc_y_filter_lp_prev;
	float vel_x = 0;
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float vel_x_prev = 0;
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	float vel_y = 0;
 8007b04:	f04f 0300 	mov.w	r3, #0
 8007b08:	67fb      	str	r3, [r7, #124]	; 0x7c
	float vel_y_prev = 0;
 8007b0a:	f04f 0300 	mov.w	r3, #0
 8007b0e:	67bb      	str	r3, [r7, #120]	; 0x78


	/*
	 * Define sample period
	 */
	sample_period = INTEGRATION_INTERVAL_DISP;
 8007b10:	4bdd      	ldr	r3, [pc, #884]	; (8007e88 <Feature_Extraction_State_Machine_Translation+0x3a0>)
 8007b12:	66fb      	str	r3, [r7, #108]	; 0x6c

	/*
	 * Set velocity magnitude threshold value (in millimeters/sec) for recognition of motion state.
	 */

	velocity_mag_threshold = 40;
 8007b14:	4bdd      	ldr	r3, [pc, #884]	; (8007e8c <Feature_Extraction_State_Machine_Translation+0x3a4>)
 8007b16:	66bb      	str	r3, [r7, #104]	; 0x68
	/*
	 * Set velocity difference threshold value (in millimeters/sec) for recognition of motion state
	 * termination by detection of no change between successive velocity samples.
	 */

	velocity_diff_threshold = 0.01;
 8007b18:	4bdd      	ldr	r3, [pc, #884]	; (8007e90 <Feature_Extraction_State_Machine_Translation+0x3a8>)
 8007b1a:	667b      	str	r3, [r7, #100]	; 0x64

	/*
	 * Compute high pass filter coefficients
	 */

	W_HP = 2 * 3.1416 * HIGH_PASS_FILTER_FREQUENCY_DISP;
 8007b1c:	4bdd      	ldr	r3, [pc, #884]	; (8007e94 <Feature_Extraction_State_Machine_Translation+0x3ac>)
 8007b1e:	663b      	str	r3, [r7, #96]	; 0x60
	I_HP = 2/(W_HP * sample_period);
 8007b20:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007b24:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b34:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	if (HP_FILTER_ENABLE_DISP == 1){
		iir_HP_0 = 1 - (1/(1 + I_HP));
 8007b38:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007b3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b54:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		iir_HP_1 = -iir_HP_0;
 8007b58:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8007b5c:	eef1 7a67 	vneg.f32	s15, s15
 8007b60:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		iir_HP_2 = (1/(1 + I_HP))*(1 - I_HP);
 8007b64:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b7c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8007b80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b88:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	/*
	 * Compute low pass filter coefficients
	 */

	W_LP = 2 * 3.1416 * LOW_PASS_FILTER_FREQUENCY_DISP;
 8007b8c:	4bc2      	ldr	r3, [pc, #776]	; (8007e98 <Feature_Extraction_State_Machine_Translation+0x3b0>)
 8007b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
	I_LP = 2/(W_LP * sample_period);
 8007b90:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8007b94:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8007b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	if (LP_FILTER_ENABLE_DISP == 1){
		iir_LP_0 = 1/(1 + I_LP);
 8007ba8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bbc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		iir_LP_1 = iir_LP_0;
 8007bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bc2:	643b      	str	r3, [r7, #64]	; 0x40
		iir_LP_2 = (1/(1 + I_LP))*(1 - I_LP);
 8007bc4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bdc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8007be0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		iir_LP_0 = 1;
		iir_LP_1 = 0;
		iir_LP_2 = 0;
	}

	printf("Start Motion Segment with Green LED Blink\n");
 8007bec:	48ab      	ldr	r0, [pc, #684]	; (8007e9c <Feature_Extraction_State_Machine_Translation+0x3b4>)
 8007bee:	f004 f8cf 	bl	800bd90 <puts>

//	HAL_Delay(2000);
	HAL_Delay(500);
 8007bf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007bf6:	f7fc fe99 	bl	800492c <HAL_Delay>


	BSP_LED_Off(LED6);
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	f7f9 f898 	bl	8000d30 <BSP_LED_Off>
	LED_Notification_Blink_Green(5);
 8007c00:	2005      	movs	r0, #5
 8007c02:	f001 fcce 	bl	80095a2 <LED_Notification_Blink_Green>
	BSP_LED_On(LED7);
 8007c06:	2001      	movs	r0, #1
 8007c08:	f7f9 f874 	bl	8000cf4 <BSP_LED_On>

	motion_state = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	677b      	str	r3, [r7, #116]	; 0x74
	acc_x = 0;
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	63bb      	str	r3, [r7, #56]	; 0x38
	acc_y = 0;
 8007c16:	f04f 0300 	mov.w	r3, #0
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
	acc_x_prev = 0;
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	acc_y_prev = 0;
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	acc_x_filter_lp_prev = 0;
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	acc_y_filter_lp_prev = 0;
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	acc_x_filter_hp_prev = 0;
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	acc_y_filter_hp_prev = 0;
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	vel_x = 0;
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	vel_x_prev = 0;
 8007c54:	f04f 0300 	mov.w	r3, #0
 8007c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	vel_y = 0;
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	67fb      	str	r3, [r7, #124]	; 0x7c
	vel_y_prev = 0;
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	67bb      	str	r3, [r7, #120]	; 0x78
		 * Introduce delay establishing integration interval
		 * This is summed with sensor data access delay to
		 * yield loop delay of 4 msec
		 */

		HAL_Delay(2);
 8007c68:	2002      	movs	r0, #2
 8007c6a:	f7fc fe5f 	bl	800492c <HAL_Delay>

		result = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	673b      	str	r3, [r7, #112]	; 0x70
		if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) != BSP_ERROR_NONE) result--;
 8007c72:	f107 0310 	add.w	r3, r7, #16
 8007c76:	461a      	mov	r2, r3
 8007c78:	2102      	movs	r1, #2
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f9 fedc 	bl	8001a38 <BSP_MOTION_SENSOR_GetAxes>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <Feature_Extraction_State_Machine_Translation+0x1a4>
 8007c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	673b      	str	r3, [r7, #112]	; 0x70
		if (result < 0){
 8007c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da03      	bge.n	8007c9a <Feature_Extraction_State_Machine_Translation+0x1b2>
			printf("Sampling Error %i\n", result);
 8007c92:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007c94:	4882      	ldr	r0, [pc, #520]	; (8007ea0 <Feature_Extraction_State_Machine_Translation+0x3b8>)
 8007c96:	f004 f80d 	bl	800bcb4 <iprintf>



		/* Setting for integration interval */

		integration_interval = INTEGRATION_INTERVAL_DISP;
 8007c9a:	4b7b      	ldr	r3, [pc, #492]	; (8007e88 <Feature_Extraction_State_Machine_Translation+0x3a0>)
 8007c9c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Convert acceleration to millimeter/sec/sec units sing 1 milli-g = (9.81 m/s/s)/1000 */

		acc_x = 9.81*(float)(axes.xval);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ca8:	ee17 0a90 	vmov	r0, s15
 8007cac:	f7f8 fc50 	bl	8000550 <__aeabi_f2d>
 8007cb0:	a373      	add	r3, pc, #460	; (adr r3, 8007e80 <Feature_Extraction_State_Machine_Translation+0x398>)
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f7f8 fca3 	bl	8000600 <__aeabi_dmul>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	f7f8 ff75 	bl	8000bb0 <__aeabi_d2f>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	63bb      	str	r3, [r7, #56]	; 0x38
		acc_y = 9.81*(float)(axes.yval);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cd4:	ee17 0a90 	vmov	r0, s15
 8007cd8:	f7f8 fc3a 	bl	8000550 <__aeabi_f2d>
 8007cdc:	a368      	add	r3, pc, #416	; (adr r3, 8007e80 <Feature_Extraction_State_Machine_Translation+0x398>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 fc8d 	bl	8000600 <__aeabi_dmul>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	f7f8 ff5f 	bl	8000bb0 <__aeabi_d2f>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34


		/* Apply Low Pass filter to acceleration */
		acc_x_filter_lp  = iir_LP_0 * acc_x + iir_LP_1 * acc_x_prev - iir_LP_2 * acc_x_filter_lp_prev;
 8007cf6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8007cfa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d02:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8007d06:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8007d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d12:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8007d16:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d22:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		acc_y_filter_lp  = iir_LP_0 * acc_y + iir_LP_1 * acc_y_prev - iir_LP_2 * acc_y_filter_lp_prev;
 8007d26:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8007d2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d32:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8007d36:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d42:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8007d46:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		/* Apply High Pass filter to signal of Low Pass filter to acceleration */
		acc_x_filter_hp = iir_HP_0 * acc_x_filter_lp  + iir_HP_1 * acc_x_filter_lp_prev - iir_HP_2 * acc_x_filter_hp_prev;
 8007d56:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007d5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d62:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8007d66:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8007d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d72:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8007d76:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d82:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		acc_y_filter_hp = iir_HP_0 * acc_y_filter_lp  + iir_HP_1 * acc_y_filter_lp_prev - iir_HP_2 * acc_y_filter_hp_prev;
 8007d86:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8007d8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d92:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8007d96:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007da2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8007da6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007db2:	edc7 7a08 	vstr	s15, [r7, #32]

		acc_x_prev = acc_x;
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		acc_y_prev = acc_y;
 8007dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/*
		 * Compute velocity by integration
		 */

		vel_x = vel_x + (acc_x_filter_hp + acc_x_filter_hp_prev) * integration_interval/2;
 8007dc2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007dc6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dd6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007dde:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8007de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007de6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		vel_y = vel_y + (acc_y_filter_hp + acc_y_filter_hp_prev) * integration_interval/2;
 8007dea:	ed97 7a08 	vldr	s14, [r7, #32]
 8007dee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8007df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007df6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e06:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8007e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e0e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

		acc_x_filter_lp_prev = acc_x_filter_lp;
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		acc_y_filter_lp_prev = acc_y_filter_lp;
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		acc_x_filter_hp_prev = acc_x_filter_hp;
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		acc_y_filter_hp_prev = acc_y_filter_hp;
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		/*
		 * Detect motion and assign velocities to features
		 */

		vel_mag = sqrt((vel_x)*(vel_x) + (vel_y)*(vel_y));
 8007e2a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007e2e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007e32:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8007e36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e3e:	ee17 0a90 	vmov	r0, s15
 8007e42:	f7f8 fb85 	bl	8000550 <__aeabi_f2d>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	ec43 2b10 	vmov	d0, r2, r3
 8007e4e:	f006 fbc7 	bl	800e5e0 <sqrt>
 8007e52:	ec53 2b10 	vmov	r2, r3, d0
 8007e56:	4610      	mov	r0, r2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f7f8 fea9 	bl	8000bb0 <__aeabi_d2f>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	61fb      	str	r3, [r7, #28]

		if (motion_state == 0 && vel_mag > velocity_mag_threshold){
 8007e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d12c      	bne.n	8007ec2 <Feature_Extraction_State_Machine_Translation+0x3da>
 8007e68:	ed97 7a07 	vldr	s14, [r7, #28]
 8007e6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8007e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e78:	dd23      	ble.n	8007ec2 <Feature_Extraction_State_Machine_Translation+0x3da>
 8007e7a:	e013      	b.n	8007ea4 <Feature_Extraction_State_Machine_Translation+0x3bc>
 8007e7c:	f3af 8000 	nop.w
 8007e80:	51eb851f 	.word	0x51eb851f
 8007e84:	40239eb8 	.word	0x40239eb8
 8007e88:	3b83126f 	.word	0x3b83126f
 8007e8c:	42200000 	.word	0x42200000
 8007e90:	3c23d70a 	.word	0x3c23d70a
 8007e94:	41490ff9 	.word	0x41490ff9
 8007e98:	41fb53f8 	.word	0x41fb53f8
 8007e9c:	0800f3f8 	.word	0x0800f3f8
 8007ea0:	0800f424 	.word	0x0800f424
			motion_state = 1;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	677b      	str	r3, [r7, #116]	; 0x74
			BSP_LED_Off(LED7);
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	f7f8 ff41 	bl	8000d30 <BSP_LED_Off>
			*feature_1 = vel_x;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007eb4:	601a      	str	r2, [r3, #0]
			*feature_2 = vel_y;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007eba:	601a      	str	r2, [r3, #0]

			*sig_mag_scale = vel_mag;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	601a      	str	r2, [r3, #0]

		/*
		 * Detect termination of motion
		 */

		if (motion_state == 1 && abs(vel_x_prev - vel_x) < velocity_diff_threshold &&
 8007ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d133      	bne.n	8007f30 <Feature_Extraction_State_Machine_Translation+0x448>
 8007ec8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8007ecc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8007ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ed8:	ee17 3a90 	vmov	r3, s15
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfb8      	it	lt
 8007ee0:	425b      	neglt	r3, r3
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eea:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef6:	dd1b      	ble.n	8007f30 <Feature_Extraction_State_Machine_Translation+0x448>
				abs(vel_y_prev - vel_y) < velocity_diff_threshold){
 8007ef8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8007efc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8007f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f08:	ee17 3a90 	vmov	r3, s15
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bfb8      	it	lt
 8007f10:	425b      	neglt	r3, r3
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (motion_state == 1 && abs(vel_x_prev - vel_x) < velocity_diff_threshold &&
 8007f1a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8007f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f26:	dd03      	ble.n	8007f30 <Feature_Extraction_State_Machine_Translation+0x448>

			BSP_LED_Off(LED7);
 8007f28:	2001      	movs	r0, #1
 8007f2a:	f7f8 ff01 	bl	8000d30 <BSP_LED_Off>
//			LED_Notification_Blink_Red(5);
			break;
 8007f2e:	e006      	b.n	8007f3e <Feature_Extraction_State_Machine_Translation+0x456>
		}

		vel_x_prev = vel_x;
 8007f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		vel_y_prev = vel_y;
 8007f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f3a:	67bb      	str	r3, [r7, #120]	; 0x78
		HAL_Delay(2);
 8007f3c:	e694      	b.n	8007c68 <Feature_Extraction_State_Machine_Translation+0x180>
	}
	return;
 8007f3e:	bf00      	nop
}
 8007f40:	37a0      	adds	r7, #160	; 0xa0
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop

08007f48 <TrainOrientation_SM_Translation>:

void TrainOrientation_SM_Translation(ANN *net) {
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	f5ad 6d9a 	sub.w	sp, sp, #1232	; 0x4d0
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8007f54:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8007f58:	6018      	str	r0, [r3, #0]
	placeRandomTile();
 8007f5a:	f000 fb5f 	bl	800861c <placeRandomTile>
	placeRandomTile();
 8007f5e:	f000 fb5d 	bl	800861c <placeRandomTile>
	int i, j, k, m, n, r, error, net_error;
	float feature_1, feature_2, sig_mag_scale;

	float Z_Threshold;

	Z_Threshold = 1.2;
 8007f62:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8007f66:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8007f6a:	4ac7      	ldr	r2, [pc, #796]	; (8008288 <TrainOrientation_SM_Translation+0x340>)
 8007f6c:	601a      	str	r2, [r3, #0]

//	printf("\n\n\nTraining Start in 2 seconds ..");
	printf("BEGIN TRAINING");
 8007f6e:	48c7      	ldr	r0, [pc, #796]	; (800828c <TrainOrientation_SM_Translation+0x344>)
 8007f70:	f003 fea0 	bl	800bcb4 <iprintf>
	BSP_LED_Off(LED6);
 8007f74:	2000      	movs	r0, #0
 8007f76:	f7f8 fedb 	bl	8000d30 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	f7f8 fed8 	bl	8000d30 <BSP_LED_Off>
//	HAL_Delay(1000);

	/*
	 * Maximum of 8 cycles
	 */
	num_train_data_cycles = 1;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

	for (k = 0; k < num_train_data_cycles; k++) {
 8007f86:	2300      	movs	r3, #0
 8007f88:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8007f8c:	e0e6      	b.n	800815c <TrainOrientation_SM_Translation+0x214>
		for (i = 0; i < 4; i++) { //EDIT - THIS USED TO GO FROM 0 TO 6
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8007f94:	e0d8      	b.n	8008148 <TrainOrientation_SM_Translation+0x200>

//			LED_Notification_Blink_Red(3);
//			LED_Notification_Blink_Green(3);
//			LED_Notification_Blink_Red(3);
			BSP_LED_On(LED6);
 8007f96:	2000      	movs	r0, #0
 8007f98:	f7f8 feac 	bl	8000cf4 <BSP_LED_On>

			switch (i) {
 8007f9c:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d81b      	bhi.n	8007fdc <TrainOrientation_SM_Translation+0x94>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <TrainOrientation_SM_Translation+0x64>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fc5 	.word	0x08007fc5
 8007fb4:	08007fcd 	.word	0x08007fcd
 8007fb8:	08007fd5 	.word	0x08007fd5

			case 0:
				printf("\nTrain Orientation 1 --> UP (and back)  \n");
 8007fbc:	48b4      	ldr	r0, [pc, #720]	; (8008290 <TrainOrientation_SM_Translation+0x348>)
 8007fbe:	f003 fee7 	bl	800bd90 <puts>
				break;
 8007fc2:	e00b      	b.n	8007fdc <TrainOrientation_SM_Translation+0x94>

			case 1:
				printf("\n\nTrain Orientation 2 --> RIGHT (and back)  \n");
 8007fc4:	48b3      	ldr	r0, [pc, #716]	; (8008294 <TrainOrientation_SM_Translation+0x34c>)
 8007fc6:	f003 fee3 	bl	800bd90 <puts>
				break;
 8007fca:	e007      	b.n	8007fdc <TrainOrientation_SM_Translation+0x94>

			case 2:
				printf("\n\nTrain Orientation 3 --> DOWN (and back)  \n");
 8007fcc:	48b2      	ldr	r0, [pc, #712]	; (8008298 <TrainOrientation_SM_Translation+0x350>)
 8007fce:	f003 fedf 	bl	800bd90 <puts>
				break;
 8007fd2:	e003      	b.n	8007fdc <TrainOrientation_SM_Translation+0x94>

			case 3:
				printf("\n\nTrain Orientation 4 --> LEFT (and back) \n");
 8007fd4:	48b1      	ldr	r0, [pc, #708]	; (800829c <TrainOrientation_SM_Translation+0x354>)
 8007fd6:	f003 fedb 	bl	800bd90 <puts>
				break;
 8007fda:	bf00      	nop
			}
			//EDIT, THIS USED TO HAVE 6 CASE STATEMENTS

			/* Motions include 5 segments and 10 associated features */

			n = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
			while (n < NUM_FEATURES){
 8007fe2:	e050      	b.n	8008086 <TrainOrientation_SM_Translation+0x13e>
				Feature_Extraction_State_Machine_Translation(&feature_1, &feature_2, &sig_mag_scale);
 8007fe4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007fe8:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8007fec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff fd79 	bl	8007ae8 <Feature_Extraction_State_Machine_Translation>
				feature_array[n] = feature_1;
 8007ff6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8007ffa:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008004:	f5a3 618a 	sub.w	r1, r3, #1104	; 0x450
 8008008:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	601a      	str	r2, [r3, #0]
				n = n + 1;
 8008012:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008016:	3301      	adds	r3, #1
 8008018:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
				printf("Features %0.1f\t: ", feature_array[n]);
 800801c:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008020:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8008024:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f7f8 fa8e 	bl	8000550 <__aeabi_f2d>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4899      	ldr	r0, [pc, #612]	; (80082a0 <TrainOrientation_SM_Translation+0x358>)
 800803a:	f003 fe3b 	bl	800bcb4 <iprintf>
				feature_array[n] = feature_2;
 800803e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008042:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800804c:	f5a3 618a 	sub.w	r1, r3, #1104	; 0x450
 8008050:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	601a      	str	r2, [r3, #0]
				printf("Features %0.1f\t: ", feature_array[n]);
 800805a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800805e:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 8008062:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f7f8 fa6f 	bl	8000550 <__aeabi_f2d>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	488a      	ldr	r0, [pc, #552]	; (80082a0 <TrainOrientation_SM_Translation+0x358>)
 8008078:	f003 fe1c 	bl	800bcb4 <iprintf>
				n = n + 1;
 800807c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008080:	3301      	adds	r3, #1
 8008082:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
			while (n < NUM_FEATURES){
 8008086:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800808a:	2b03      	cmp	r3, #3
 800808c:	ddaa      	ble.n	8007fe4 <TrainOrientation_SM_Translation+0x9c>
			}

			printf("\n");
 800808e:	200a      	movs	r0, #10
 8008090:	f003 fe22 	bl	800bcd8 <putchar>


			for (n = 0; n < NUM_FEATURES; n++){
 8008094:	2300      	movs	r3, #0
 8008096:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800809a:	e016      	b.n	80080ca <TrainOrientation_SM_Translation+0x182>
				sig_xyz[n] = feature_array[n];
 800809c:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80080a0:	f5a3 628a 	sub.w	r2, r3, #1104	; 0x450
 80080a4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80080b2:	f5a3 6186 	sub.w	r1, r3, #1072	; 0x430
 80080b6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	440b      	add	r3, r1
 80080be:	601a      	str	r2, [r3, #0]
			for (n = 0; n < NUM_FEATURES; n++){
 80080c0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80080c4:	3301      	adds	r3, #1
 80080c6:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80080ca:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	dde4      	ble.n	800809c <TrainOrientation_SM_Translation+0x154>
			}


			motion_softmax(net->topology[0], sig_xyz, sig_xyz_norm);
 80080d2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80080d6:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80080e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80080ea:	4619      	mov	r1, r3
 80080ec:	f001 fa02 	bl	80094f4 <motion_softmax>

			for (n = 0; n < NUM_FEATURES; n++){
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80080f6:	e01e      	b.n	8008136 <TrainOrientation_SM_Translation+0x1ee>
				training_dataset[i][k][n] = sig_xyz_norm[n];
 80080f8:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80080fc:	f5a3 6288 	sub.w	r2, r3, #1088	; 0x440
 8008100:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800810e:	f5a3 6184 	sub.w	r1, r3, #1056	; 0x420
 8008112:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8008116:	00d8      	lsls	r0, r3, #3
 8008118:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800811c:	4403      	add	r3, r0
 800811e:	0098      	lsls	r0, r3, #2
 8008120:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008124:	4403      	add	r3, r0
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	601a      	str	r2, [r3, #0]
			for (n = 0; n < NUM_FEATURES; n++){
 800812c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8008130:	3301      	adds	r3, #1
 8008132:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8008136:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800813a:	2b03      	cmp	r3, #3
 800813c:	dddc      	ble.n	80080f8 <TrainOrientation_SM_Translation+0x1b0>
		for (i = 0; i < 4; i++) { //EDIT - THIS USED TO GO FROM 0 TO 6
 800813e:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8008142:	3301      	adds	r3, #1
 8008144:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8008148:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800814c:	2b03      	cmp	r3, #3
 800814e:	f77f af22 	ble.w	8007f96 <TrainOrientation_SM_Translation+0x4e>
	for (k = 0; k < num_train_data_cycles; k++) {
 8008152:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8008156:	3301      	adds	r3, #1
 8008158:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800815c:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8008160:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8008164:	429a      	cmp	r2, r3
 8008166:	f6ff af12 	blt.w	8007f8e <TrainOrientation_SM_Translation+0x46>

	/*
	 * Enter NN training
	 */

	float Motion_1[6] = { 1.0, 0.0, 0.0, 0.0};
 800816a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800816e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8008172:	461a      	mov	r2, r3
 8008174:	2300      	movs	r3, #0
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	6053      	str	r3, [r2, #4]
 800817a:	6093      	str	r3, [r2, #8]
 800817c:	60d3      	str	r3, [r2, #12]
 800817e:	6113      	str	r3, [r2, #16]
 8008180:	6153      	str	r3, [r2, #20]
 8008182:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008186:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800818a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800818e:	601a      	str	r2, [r3, #0]
	float Motion_2[6] = { 0.0, 1.0, 0.0, 0.0};
 8008190:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008194:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8008198:	461a      	mov	r2, r3
 800819a:	2300      	movs	r3, #0
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	6053      	str	r3, [r2, #4]
 80081a0:	6093      	str	r3, [r2, #8]
 80081a2:	60d3      	str	r3, [r2, #12]
 80081a4:	6113      	str	r3, [r2, #16]
 80081a6:	6153      	str	r3, [r2, #20]
 80081a8:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80081ac:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 80081b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80081b4:	605a      	str	r2, [r3, #4]
	float Motion_3[6] = { 0.0, 0.0, 1.0, 0.0};
 80081b6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80081ba:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	6053      	str	r3, [r2, #4]
 80081c6:	6093      	str	r3, [r2, #8]
 80081c8:	60d3      	str	r3, [r2, #12]
 80081ca:	6113      	str	r3, [r2, #16]
 80081cc:	6153      	str	r3, [r2, #20]
 80081ce:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80081d2:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80081d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80081da:	609a      	str	r2, [r3, #8]
	float Motion_4[6] = { 0.0, 0.0, 0.0, 1.0};
 80081dc:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80081e0:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80081e4:	461a      	mov	r2, r3
 80081e6:	2300      	movs	r3, #0
 80081e8:	6013      	str	r3, [r2, #0]
 80081ea:	6053      	str	r3, [r2, #4]
 80081ec:	6093      	str	r3, [r2, #8]
 80081ee:	60d3      	str	r3, [r2, #12]
 80081f0:	6113      	str	r3, [r2, #16]
 80081f2:	6153      	str	r3, [r2, #20]
 80081f4:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80081f8:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 80081fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008200:	60da      	str	r2, [r3, #12]
	//EDIT - THIS USED TO HAVE 6 motions, with 6 spots in each


	printf("\n\nTraining Start\n");
 8008202:	4828      	ldr	r0, [pc, #160]	; (80082a4 <TrainOrientation_SM_Translation+0x35c>)
 8008204:	f003 fdc4 	bl	800bd90 <puts>

	training_cycles = TRAINING_CYCLES;
 8008208:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800820c:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0

	for (k = 0; k < num_train_data_cycles; k++) {
 8008210:	2300      	movs	r3, #0
 8008212:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8008216:	e10a      	b.n	800842e <TrainOrientation_SM_Translation+0x4e6>

		i = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
		while (i < training_cycles) {
 800821e:	e0fa      	b.n	8008416 <TrainOrientation_SM_Translation+0x4ce>
			for (j = 0; j < 4; j++) {
 8008220:	2300      	movs	r3, #0
 8008222:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8008226:	e0f1      	b.n	800840c <TrainOrientation_SM_Translation+0x4c4>

				if ((i % 20 == 0 && i < 100) || i % 100 == 0) {
 8008228:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	; 0x4cc
 800822c:	4b1e      	ldr	r3, [pc, #120]	; (80082a8 <TrainOrientation_SM_Translation+0x360>)
 800822e:	fb83 2301 	smull	r2, r3, r3, r1
 8008232:	10da      	asrs	r2, r3, #3
 8008234:	17cb      	asrs	r3, r1, #31
 8008236:	1ad2      	subs	r2, r2, r3
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	1aca      	subs	r2, r1, r3
 8008242:	2a00      	cmp	r2, #0
 8008244:	d103      	bne.n	800824e <TrainOrientation_SM_Translation+0x306>
 8008246:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800824a:	2b63      	cmp	r3, #99	; 0x63
 800824c:	dd0d      	ble.n	800826a <TrainOrientation_SM_Translation+0x322>
 800824e:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8008252:	4b16      	ldr	r3, [pc, #88]	; (80082ac <TrainOrientation_SM_Translation+0x364>)
 8008254:	fb83 1302 	smull	r1, r3, r3, r2
 8008258:	1159      	asrs	r1, r3, #5
 800825a:	17d3      	asrs	r3, r2, #31
 800825c:	1acb      	subs	r3, r1, r3
 800825e:	2164      	movs	r1, #100	; 0x64
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d162      	bne.n	8008330 <TrainOrientation_SM_Translation+0x3e8>
					printf("\n\nTraining Epochs: %i\n", i);
 800826a:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	; 0x4cc
 800826e:	4810      	ldr	r0, [pc, #64]	; (80082b0 <TrainOrientation_SM_Translation+0x368>)
 8008270:	f003 fd20 	bl	800bcb4 <iprintf>

					LED_Code_Blink_Green(0);
 8008274:	2000      	movs	r0, #0
 8008276:	f000 fe8d 	bl	8008f94 <LED_Code_Blink_Green>

					net_error = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
					for (m = 0; m < 4; m++) {
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8008286:	e043      	b.n	8008310 <TrainOrientation_SM_Translation+0x3c8>
 8008288:	3f99999a 	.word	0x3f99999a
 800828c:	0800f438 	.word	0x0800f438
 8008290:	0800f448 	.word	0x0800f448
 8008294:	0800f474 	.word	0x0800f474
 8008298:	0800f4a4 	.word	0x0800f4a4
 800829c:	0800f4d0 	.word	0x0800f4d0
 80082a0:	0800f4fc 	.word	0x0800f4fc
 80082a4:	0800f510 	.word	0x0800f510
 80082a8:	66666667 	.word	0x66666667
 80082ac:	51eb851f 	.word	0x51eb851f
 80082b0:	0800f524 	.word	0x0800f524
						run_ann(net, training_dataset[m][k]);
 80082b4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80082b8:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 80082bc:	00d9      	lsls	r1, r3, #3
 80082be:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80082c2:	440b      	add	r3, r1
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	441a      	add	r2, r3
 80082c8:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80082cc:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80082d0:	4611      	mov	r1, r2
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	f001 ff9f 	bl	800a216 <run_ann>
						printOutput_ANN_Threshold(net, m, &error, &Z_Threshold);
 80082d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80082dc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80082e0:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80082e4:	f2a1 40cc 	subw	r0, r1, #1228	; 0x4cc
 80082e8:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 80082ec:	6800      	ldr	r0, [r0, #0]
 80082ee:	f000 fea3 	bl	8009038 <printOutput_ANN_Threshold>
						if (error == 1) {
 80082f2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80082f6:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d102      	bne.n	8008306 <TrainOrientation_SM_Translation+0x3be>
							net_error = 1;
 8008300:	2301      	movs	r3, #1
 8008302:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
					for (m = 0; m < 4; m++) {
 8008306:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800830a:	3301      	adds	r3, #1
 800830c:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8008310:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8008314:	2b03      	cmp	r3, #3
 8008316:	ddcd      	ble.n	80082b4 <TrainOrientation_SM_Translation+0x36c>
						}
					}
					printf("\nError State: %i\n", net_error);
 8008318:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	; 0x4b8
 800831c:	4854      	ldr	r0, [pc, #336]	; (8008470 <TrainOrientation_SM_Translation+0x528>)
 800831e:	f003 fcc9 	bl	800bcb4 <iprintf>

					if (net_error == 0) {
 8008322:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <TrainOrientation_SM_Translation+0x3e8>
						printBoard();
 800832a:	f000 f8c3 	bl	80084b4 <printBoard>
						return;
 800832e:	e09a      	b.n	8008466 <TrainOrientation_SM_Translation+0x51e>
					}

				}

				switch (j) {
 8008330:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8008334:	2b03      	cmp	r3, #3
 8008336:	d85b      	bhi.n	80083f0 <TrainOrientation_SM_Translation+0x4a8>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <TrainOrientation_SM_Translation+0x3f8>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008351 	.word	0x08008351
 8008344:	08008379 	.word	0x08008379
 8008348:	080083a1 	.word	0x080083a1
 800834c:	080083c9 	.word	0x080083c9

				case 0:
					train_ann(net, training_dataset[j][k], Motion_1);
 8008350:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008354:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8008358:	00d9      	lsls	r1, r3, #3
 800835a:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800835e:	440b      	add	r3, r1
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	18d1      	adds	r1, r2, r3
 8008364:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8008368:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800836c:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f001 fdee 	bl	8009f52 <train_ann>
					break;
 8008376:	e03c      	b.n	80083f2 <TrainOrientation_SM_Translation+0x4aa>
				case 1:
					train_ann(net, training_dataset[j][k], Motion_2);
 8008378:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800837c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8008380:	00d9      	lsls	r1, r3, #3
 8008382:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8008386:	440b      	add	r3, r1
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	18d1      	adds	r1, r2, r3
 800838c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008390:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008394:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f001 fdda 	bl	8009f52 <train_ann>
					break;
 800839e:	e028      	b.n	80083f2 <TrainOrientation_SM_Translation+0x4aa>
				case 2:
					train_ann(net, training_dataset[j][k], Motion_3);
 80083a0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80083a4:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80083a8:	00d9      	lsls	r1, r3, #3
 80083aa:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80083ae:	440b      	add	r3, r1
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	18d1      	adds	r1, r2, r3
 80083b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80083b8:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80083bc:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f001 fdc6 	bl	8009f52 <train_ann>
					break;
 80083c6:	e014      	b.n	80083f2 <TrainOrientation_SM_Translation+0x4aa>
				case 3:
					train_ann(net, training_dataset[j][k], Motion_4);
 80083c8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80083cc:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80083d0:	00d9      	lsls	r1, r3, #3
 80083d2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80083d6:	440b      	add	r3, r1
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	18d1      	adds	r1, r2, r3
 80083dc:	f107 020c 	add.w	r2, r7, #12
 80083e0:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80083e4:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f001 fdb2 	bl	8009f52 <train_ann>
					break;
 80083ee:	e000      	b.n	80083f2 <TrainOrientation_SM_Translation+0x4aa>
				default:
					break;
 80083f0:	bf00      	nop
				}
				i++;
 80083f2:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80083f6:	3301      	adds	r3, #1
 80083f8:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
				HAL_Delay(5);
 80083fc:	2005      	movs	r0, #5
 80083fe:	f7fc fa95 	bl	800492c <HAL_Delay>
			for (j = 0; j < 4; j++) {
 8008402:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8008406:	3301      	adds	r3, #1
 8008408:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800840c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8008410:	2b03      	cmp	r3, #3
 8008412:	f77f af09 	ble.w	8008228 <TrainOrientation_SM_Translation+0x2e0>
		while (i < training_cycles) {
 8008416:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 800841a:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 800841e:	429a      	cmp	r2, r3
 8008420:	f6ff aefe 	blt.w	8008220 <TrainOrientation_SM_Translation+0x2d8>
	for (k = 0; k < num_train_data_cycles; k++) {
 8008424:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8008428:	3301      	adds	r3, #1
 800842a:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800842e:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8008432:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8008436:	429a      	cmp	r2, r3
 8008438:	f6ff aeee 	blt.w	8008218 <TrainOrientation_SM_Translation+0x2d0>
		}

	}


	if (net_error == 0){
 800843c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <TrainOrientation_SM_Translation+0x50a>
		LED_Code_Blink_Green(0);
 8008444:	2000      	movs	r0, #0
 8008446:	f000 fda5 	bl	8008f94 <LED_Code_Blink_Green>
		LED_Code_Blink_Green(0);
 800844a:	2000      	movs	r0, #0
 800844c:	f000 fda2 	bl	8008f94 <LED_Code_Blink_Green>
 8008450:	e005      	b.n	800845e <TrainOrientation_SM_Translation+0x516>
	} else {
		LED_Code_Blink_Red(1);
 8008452:	2001      	movs	r0, #1
 8008454:	f000 fd4c 	bl	8008ef0 <LED_Code_Blink_Red>
		LED_Code_Blink_Red(1);
 8008458:	2001      	movs	r0, #1
 800845a:	f000 fd49 	bl	8008ef0 <LED_Code_Blink_Red>
	}

	printf("\n\nTraining Complete, Now Start Test Motions\n");
 800845e:	4805      	ldr	r0, [pc, #20]	; (8008474 <TrainOrientation_SM_Translation+0x52c>)
 8008460:	f003 fc96 	bl	800bd90 <puts>
	return;
 8008464:	bf00      	nop
}
 8008466:	f507 679a 	add.w	r7, r7, #1232	; 0x4d0
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	0800f53c 	.word	0x0800f53c
 8008474:	0800f550 	.word	0x0800f550

08008478 <padToFour>:





char* padToFour(int number) {
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
    // Allocate a string buffer with enough space (5 characters: 4 digits + null terminator)
    char* result = (char*)malloc(5);
 8008480:	2005      	movs	r0, #5
 8008482:	f003 f86f 	bl	800b564 <malloc>
 8008486:	4603      	mov	r3, r0
 8008488:	60fb      	str	r3, [r7, #12]

    if(number != 0){
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d006      	beq.n	800849e <padToFour+0x26>
        // Use snprintf to format the number with leading spaces
        snprintf(result, 5, "%4d", number);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a06      	ldr	r2, [pc, #24]	; (80084ac <padToFour+0x34>)
 8008494:	2105      	movs	r1, #5
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f003 fa9e 	bl	800b9d8 <sniprintf>
 800849c:	e001      	b.n	80084a2 <padToFour+0x2a>
    } else {
    	result = "    ";
 800849e:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <padToFour+0x38>)
 80084a0:	60fb      	str	r3, [r7, #12]
    }

    return result;
 80084a2:	68fb      	ldr	r3, [r7, #12]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	0800f57c 	.word	0x0800f57c
 80084b0:	0800f580 	.word	0x0800f580

080084b4 <printBoard>:



void printBoard() {
 80084b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af02      	add	r7, sp, #8
	placeRandomTile();
 80084ba:	f000 f8af 	bl	800861c <placeRandomTile>
	/* Should look like this*/
	 //%d: for printing integers

	//integers need to be formatted to 4 spaces;
	printf("|-------|-------|-------|-------|\n");
 80084be:	4853      	ldr	r0, [pc, #332]	; (800860c <printBoard+0x158>)
 80084c0:	f003 fc66 	bl	800bd90 <puts>
	printf("|       |       |       |       |\n");
 80084c4:	4852      	ldr	r0, [pc, #328]	; (8008610 <printBoard+0x15c>)
 80084c6:	f003 fc63 	bl	800bd90 <puts>
	printf("| %s  | %s  | %s  | %s  |\n", padToFour(board[0][0]), padToFour(board[0][1]),padToFour(board[0][2]), padToFour(board[0][3]));
 80084ca:	4b52      	ldr	r3, [pc, #328]	; (8008614 <printBoard+0x160>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff ffd2 	bl	8008478 <padToFour>
 80084d4:	4604      	mov	r4, r0
 80084d6:	4b4f      	ldr	r3, [pc, #316]	; (8008614 <printBoard+0x160>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff ffcc 	bl	8008478 <padToFour>
 80084e0:	4605      	mov	r5, r0
 80084e2:	4b4c      	ldr	r3, [pc, #304]	; (8008614 <printBoard+0x160>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff ffc6 	bl	8008478 <padToFour>
 80084ec:	4606      	mov	r6, r0
 80084ee:	4b49      	ldr	r3, [pc, #292]	; (8008614 <printBoard+0x160>)
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff ffc0 	bl	8008478 <padToFour>
 80084f8:	4603      	mov	r3, r0
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4633      	mov	r3, r6
 80084fe:	462a      	mov	r2, r5
 8008500:	4621      	mov	r1, r4
 8008502:	4845      	ldr	r0, [pc, #276]	; (8008618 <printBoard+0x164>)
 8008504:	f003 fbd6 	bl	800bcb4 <iprintf>
	printf("|       |       |       |       |\n");
 8008508:	4841      	ldr	r0, [pc, #260]	; (8008610 <printBoard+0x15c>)
 800850a:	f003 fc41 	bl	800bd90 <puts>
	printf("|-------|-------|-------|-------|\n");
 800850e:	483f      	ldr	r0, [pc, #252]	; (800860c <printBoard+0x158>)
 8008510:	f003 fc3e 	bl	800bd90 <puts>
	printf("|       |       |       |       |\n");
 8008514:	483e      	ldr	r0, [pc, #248]	; (8008610 <printBoard+0x15c>)
 8008516:	f003 fc3b 	bl	800bd90 <puts>
	printf("| %s  | %s  | %s  | %s  |\n", padToFour(board[1][0]), padToFour(board[1][1]),padToFour(board[1][2]), padToFour(board[1][3]));
 800851a:	4b3e      	ldr	r3, [pc, #248]	; (8008614 <printBoard+0x160>)
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	4618      	mov	r0, r3
 8008520:	f7ff ffaa 	bl	8008478 <padToFour>
 8008524:	4604      	mov	r4, r0
 8008526:	4b3b      	ldr	r3, [pc, #236]	; (8008614 <printBoard+0x160>)
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff ffa4 	bl	8008478 <padToFour>
 8008530:	4605      	mov	r5, r0
 8008532:	4b38      	ldr	r3, [pc, #224]	; (8008614 <printBoard+0x160>)
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff ff9e 	bl	8008478 <padToFour>
 800853c:	4606      	mov	r6, r0
 800853e:	4b35      	ldr	r3, [pc, #212]	; (8008614 <printBoard+0x160>)
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff ff98 	bl	8008478 <padToFour>
 8008548:	4603      	mov	r3, r0
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	4633      	mov	r3, r6
 800854e:	462a      	mov	r2, r5
 8008550:	4621      	mov	r1, r4
 8008552:	4831      	ldr	r0, [pc, #196]	; (8008618 <printBoard+0x164>)
 8008554:	f003 fbae 	bl	800bcb4 <iprintf>
	printf("|       |       |       |       |\n");
 8008558:	482d      	ldr	r0, [pc, #180]	; (8008610 <printBoard+0x15c>)
 800855a:	f003 fc19 	bl	800bd90 <puts>
	printf("|-------|-------|-------|-------|\n");
 800855e:	482b      	ldr	r0, [pc, #172]	; (800860c <printBoard+0x158>)
 8008560:	f003 fc16 	bl	800bd90 <puts>
	printf("|       |       |       |       |\n");
 8008564:	482a      	ldr	r0, [pc, #168]	; (8008610 <printBoard+0x15c>)
 8008566:	f003 fc13 	bl	800bd90 <puts>
	printf("| %s  | %s  | %s  | %s  |\n", padToFour(board[2][0]), padToFour(board[2][1]),padToFour(board[2][2]), padToFour(board[2][3]));
 800856a:	4b2a      	ldr	r3, [pc, #168]	; (8008614 <printBoard+0x160>)
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff ff82 	bl	8008478 <padToFour>
 8008574:	4604      	mov	r4, r0
 8008576:	4b27      	ldr	r3, [pc, #156]	; (8008614 <printBoard+0x160>)
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff ff7c 	bl	8008478 <padToFour>
 8008580:	4605      	mov	r5, r0
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <printBoard+0x160>)
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff ff76 	bl	8008478 <padToFour>
 800858c:	4606      	mov	r6, r0
 800858e:	4b21      	ldr	r3, [pc, #132]	; (8008614 <printBoard+0x160>)
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff ff70 	bl	8008478 <padToFour>
 8008598:	4603      	mov	r3, r0
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	4633      	mov	r3, r6
 800859e:	462a      	mov	r2, r5
 80085a0:	4621      	mov	r1, r4
 80085a2:	481d      	ldr	r0, [pc, #116]	; (8008618 <printBoard+0x164>)
 80085a4:	f003 fb86 	bl	800bcb4 <iprintf>
	printf("|       |       |       |       |\n");
 80085a8:	4819      	ldr	r0, [pc, #100]	; (8008610 <printBoard+0x15c>)
 80085aa:	f003 fbf1 	bl	800bd90 <puts>
	printf("|-------|-------|-------|-------|\n");
 80085ae:	4817      	ldr	r0, [pc, #92]	; (800860c <printBoard+0x158>)
 80085b0:	f003 fbee 	bl	800bd90 <puts>
	printf("|       |       |       |       |\n");
 80085b4:	4816      	ldr	r0, [pc, #88]	; (8008610 <printBoard+0x15c>)
 80085b6:	f003 fbeb 	bl	800bd90 <puts>
	printf("| %s  | %s  | %s  | %s  |\n", padToFour(board[3][0]), padToFour(board[3][1]),padToFour(board[3][2]), padToFour(board[3][3]));
 80085ba:	4b16      	ldr	r3, [pc, #88]	; (8008614 <printBoard+0x160>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff ff5a 	bl	8008478 <padToFour>
 80085c4:	4604      	mov	r4, r0
 80085c6:	4b13      	ldr	r3, [pc, #76]	; (8008614 <printBoard+0x160>)
 80085c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff ff54 	bl	8008478 <padToFour>
 80085d0:	4605      	mov	r5, r0
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <printBoard+0x160>)
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff ff4e 	bl	8008478 <padToFour>
 80085dc:	4606      	mov	r6, r0
 80085de:	4b0d      	ldr	r3, [pc, #52]	; (8008614 <printBoard+0x160>)
 80085e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff ff48 	bl	8008478 <padToFour>
 80085e8:	4603      	mov	r3, r0
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	4633      	mov	r3, r6
 80085ee:	462a      	mov	r2, r5
 80085f0:	4621      	mov	r1, r4
 80085f2:	4809      	ldr	r0, [pc, #36]	; (8008618 <printBoard+0x164>)
 80085f4:	f003 fb5e 	bl	800bcb4 <iprintf>
	printf("|       |       |       |       |\n");
 80085f8:	4805      	ldr	r0, [pc, #20]	; (8008610 <printBoard+0x15c>)
 80085fa:	f003 fbc9 	bl	800bd90 <puts>
	printf("|-------|-------|-------|-------|\n");
 80085fe:	4803      	ldr	r0, [pc, #12]	; (800860c <printBoard+0x158>)
 8008600:	f003 fbc6 	bl	800bd90 <puts>
}
 8008604:	bf00      	nop
 8008606:	3704      	adds	r7, #4
 8008608:	46bd      	mov	sp, r7
 800860a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860c:	0800f588 	.word	0x0800f588
 8008610:	0800f5ac 	.word	0x0800f5ac
 8008614:	20000edc 	.word	0x20000edc
 8008618:	0800f5d0 	.word	0x0800f5d0

0800861c <placeRandomTile>:

void placeRandomTile() {
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
    int row = rand() % SIZE;
 8008622:	f003 fa47 	bl	800bab4 <rand>
 8008626:	4603      	mov	r3, r0
 8008628:	425a      	negs	r2, r3
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	f002 0203 	and.w	r2, r2, #3
 8008632:	bf58      	it	pl
 8008634:	4253      	negpl	r3, r2
 8008636:	607b      	str	r3, [r7, #4]
    int col = rand() % SIZE;
 8008638:	f003 fa3c 	bl	800bab4 <rand>
 800863c:	4603      	mov	r3, r0
 800863e:	425a      	negs	r2, r3
 8008640:	f003 0303 	and.w	r3, r3, #3
 8008644:	f002 0203 	and.w	r2, r2, #3
 8008648:	bf58      	it	pl
 800864a:	4253      	negpl	r3, r2
 800864c:	603b      	str	r3, [r7, #0]

    while (board[row][col] != 0){
 800864e:	e015      	b.n	800867c <placeRandomTile+0x60>
        row = rand() % SIZE;
 8008650:	f003 fa30 	bl	800bab4 <rand>
 8008654:	4603      	mov	r3, r0
 8008656:	425a      	negs	r2, r3
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	f002 0203 	and.w	r2, r2, #3
 8008660:	bf58      	it	pl
 8008662:	4253      	negpl	r3, r2
 8008664:	607b      	str	r3, [r7, #4]
        col = rand() % 4;
 8008666:	f003 fa25 	bl	800bab4 <rand>
 800866a:	4603      	mov	r3, r0
 800866c:	425a      	negs	r2, r3
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	f002 0203 	and.w	r2, r2, #3
 8008676:	bf58      	it	pl
 8008678:	4253      	negpl	r3, r2
 800867a:	603b      	str	r3, [r7, #0]
    while (board[row][col] != 0){
 800867c:	4913      	ldr	r1, [pc, #76]	; (80086cc <placeRandomTile+0xb0>)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	009a      	lsls	r2, r3, #2
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	4413      	add	r3, r2
 8008686:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e0      	bne.n	8008650 <placeRandomTile+0x34>
    }
    // 90% chance of getting a 2, 10% chance of getting a 4
    board[row][col] = (rand() % 10 < 9) ? 2 : 4;
 800868e:	f003 fa11 	bl	800bab4 <rand>
 8008692:	4601      	mov	r1, r0
 8008694:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <placeRandomTile+0xb4>)
 8008696:	fb83 2301 	smull	r2, r3, r3, r1
 800869a:	109a      	asrs	r2, r3, #2
 800869c:	17cb      	asrs	r3, r1, #31
 800869e:	1ad2      	subs	r2, r2, r3
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	1aca      	subs	r2, r1, r3
 80086aa:	2a08      	cmp	r2, #8
 80086ac:	dc01      	bgt.n	80086b2 <placeRandomTile+0x96>
 80086ae:	2202      	movs	r2, #2
 80086b0:	e000      	b.n	80086b4 <placeRandomTile+0x98>
 80086b2:	2204      	movs	r2, #4
 80086b4:	4805      	ldr	r0, [pc, #20]	; (80086cc <placeRandomTile+0xb0>)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	0099      	lsls	r1, r3, #2
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	440b      	add	r3, r1
 80086be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000edc 	.word	0x20000edc
 80086d0:	66666667 	.word	0x66666667

080086d4 <shiftTiles>:

void shiftTiles(int array[], int size) {
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
    int current = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < size; ++i) {
 80086e2:	2300      	movs	r3, #0
 80086e4:	60bb      	str	r3, [r7, #8]
 80086e6:	e015      	b.n	8008714 <shiftTiles+0x40>
        if (array[i] != 0) {
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	4413      	add	r3, r2
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <shiftTiles+0x3a>
            array[current++] = array[i];
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	441a      	add	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	1c59      	adds	r1, r3, #1
 8008702:	60f9      	str	r1, [r7, #12]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	440b      	add	r3, r1
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; ++i) {
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	3301      	adds	r3, #1
 8008712:	60bb      	str	r3, [r7, #8]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	dbe5      	blt.n	80086e8 <shiftTiles+0x14>
        }
    }

    while (current < size) {
 800871c:	e007      	b.n	800872e <shiftTiles+0x5a>
        array[current++] = 0;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	60fa      	str	r2, [r7, #12]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]
    while (current < size) {
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	dbf3      	blt.n	800871e <shiftTiles+0x4a>
    }
}
 8008736:	bf00      	nop
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <mergeTiles>:

void mergeTiles(int array[], int size, int* score) {
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size - 1; ++i) {
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e032      	b.n	80087bc <mergeTiles+0x78>
        if (array[i] != 0 && array[i] == array[i + 1]) {
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d028      	beq.n	80087b6 <mergeTiles+0x72>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	3301      	adds	r3, #1
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	68f9      	ldr	r1, [r7, #12]
 8008776:	440b      	add	r3, r1
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d11b      	bne.n	80087b6 <mergeTiles+0x72>
            array[i] *= 2;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	68f9      	ldr	r1, [r7, #12]
 800878e:	440b      	add	r3, r1
 8008790:	0052      	lsls	r2, r2, #1
 8008792:	601a      	str	r2, [r3, #0]
            array[i + 1] = 0;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	3301      	adds	r3, #1
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
            *score += array[i];
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	440b      	add	r3, r1
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	441a      	add	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size - 1; ++i) {
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	3301      	adds	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	dbc7      	blt.n	8008756 <mergeTiles+0x12>
        }
    }
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <canMove>:

int canMove(char direction) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	71fb      	strb	r3, [r7, #7]
    switch (direction) {
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	f200 80ef 	bhi.w	80089c4 <canMove+0x1f0>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <canMove+0x18>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008953 	.word	0x08008953
 80087f4:	0800886f 	.word	0x0800886f
 80087f8:	080088e1 	.word	0x080088e1
        case 0:
            for (int col = 0; col < SIZE; ++col) {
 80087fc:	2300      	movs	r3, #0
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008800:	e031      	b.n	8008866 <canMove+0x92>
                for (int row = 1; row < SIZE; ++row) {
 8008802:	2301      	movs	r3, #1
 8008804:	623b      	str	r3, [r7, #32]
 8008806:	e028      	b.n	800885a <canMove+0x86>
                    if (board[row][col] != 0 && (board[row - 1][col] == 0 || board[row - 1][col] == board[row][col])) {
 8008808:	4972      	ldr	r1, [pc, #456]	; (80089d4 <canMove+0x200>)
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	009a      	lsls	r2, r3, #2
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	4413      	add	r3, r2
 8008812:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01c      	beq.n	8008854 <canMove+0x80>
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	3b01      	subs	r3, #1
 800881e:	496d      	ldr	r1, [pc, #436]	; (80089d4 <canMove+0x200>)
 8008820:	009a      	lsls	r2, r3, #2
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	4413      	add	r3, r2
 8008826:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d010      	beq.n	8008850 <canMove+0x7c>
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	3b01      	subs	r3, #1
 8008832:	4968      	ldr	r1, [pc, #416]	; (80089d4 <canMove+0x200>)
 8008834:	009a      	lsls	r2, r3, #2
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	4413      	add	r3, r2
 800883a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800883e:	4865      	ldr	r0, [pc, #404]	; (80089d4 <canMove+0x200>)
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	0099      	lsls	r1, r3, #2
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	440b      	add	r3, r1
 8008848:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800884c:	429a      	cmp	r2, r3
 800884e:	d101      	bne.n	8008854 <canMove+0x80>
                        return 1;  // Can move
 8008850:	2301      	movs	r3, #1
 8008852:	e0bb      	b.n	80089cc <canMove+0x1f8>
                for (int row = 1; row < SIZE; ++row) {
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	3301      	adds	r3, #1
 8008858:	623b      	str	r3, [r7, #32]
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	2b03      	cmp	r3, #3
 800885e:	ddd3      	ble.n	8008808 <canMove+0x34>
            for (int col = 0; col < SIZE; ++col) {
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	3301      	adds	r3, #1
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	2b03      	cmp	r3, #3
 800886a:	ddca      	ble.n	8008802 <canMove+0x2e>
                    }
                }
            }
            break;
 800886c:	e0ad      	b.n	80089ca <canMove+0x1f6>

        case 2:
        	for (int col = 0; col < SIZE; ++col) {
 800886e:	2300      	movs	r3, #0
 8008870:	61fb      	str	r3, [r7, #28]
 8008872:	e031      	b.n	80088d8 <canMove+0x104>
                for (int row = SIZE - 2; row >= 0; --row) {
 8008874:	2302      	movs	r3, #2
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	e028      	b.n	80088cc <canMove+0xf8>
                    if (board[row][col] != 0 && (board[row + 1][col] == 0 || board[row + 1][col] == board[row][col])) {
 800887a:	4956      	ldr	r1, [pc, #344]	; (80089d4 <canMove+0x200>)
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	009a      	lsls	r2, r3, #2
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	4413      	add	r3, r2
 8008884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01c      	beq.n	80088c6 <canMove+0xf2>
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	3301      	adds	r3, #1
 8008890:	4950      	ldr	r1, [pc, #320]	; (80089d4 <canMove+0x200>)
 8008892:	009a      	lsls	r2, r3, #2
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	4413      	add	r3, r2
 8008898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d010      	beq.n	80088c2 <canMove+0xee>
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	3301      	adds	r3, #1
 80088a4:	494b      	ldr	r1, [pc, #300]	; (80089d4 <canMove+0x200>)
 80088a6:	009a      	lsls	r2, r3, #2
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80088b0:	4848      	ldr	r0, [pc, #288]	; (80089d4 <canMove+0x200>)
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	0099      	lsls	r1, r3, #2
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	440b      	add	r3, r1
 80088ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d101      	bne.n	80088c6 <canMove+0xf2>
                        return 1;  // Can move
 80088c2:	2301      	movs	r3, #1
 80088c4:	e082      	b.n	80089cc <canMove+0x1f8>
                for (int row = SIZE - 2; row >= 0; --row) {
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dad3      	bge.n	800887a <canMove+0xa6>
        	for (int col = 0; col < SIZE; ++col) {
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	3301      	adds	r3, #1
 80088d6:	61fb      	str	r3, [r7, #28]
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2b03      	cmp	r3, #3
 80088dc:	ddca      	ble.n	8008874 <canMove+0xa0>
                    }
                }
            }
            break;
 80088de:	e074      	b.n	80089ca <canMove+0x1f6>

        case 3:
            for (int row = 0; row < SIZE; ++row) {
 80088e0:	2300      	movs	r3, #0
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e031      	b.n	800894a <canMove+0x176>
                for (int col = 1; col < SIZE; ++col) {
 80088e6:	2301      	movs	r3, #1
 80088e8:	613b      	str	r3, [r7, #16]
 80088ea:	e028      	b.n	800893e <canMove+0x16a>
                    if (board[row][col] != 0 && (board[row][col - 1] == 0 || board[row][col - 1] == board[row][col])) {
 80088ec:	4939      	ldr	r1, [pc, #228]	; (80089d4 <canMove+0x200>)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	009a      	lsls	r2, r3, #2
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	4413      	add	r3, r2
 80088f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d01c      	beq.n	8008938 <canMove+0x164>
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	3b01      	subs	r3, #1
 8008902:	4934      	ldr	r1, [pc, #208]	; (80089d4 <canMove+0x200>)
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	0092      	lsls	r2, r2, #2
 8008908:	4413      	add	r3, r2
 800890a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d010      	beq.n	8008934 <canMove+0x160>
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	3b01      	subs	r3, #1
 8008916:	492f      	ldr	r1, [pc, #188]	; (80089d4 <canMove+0x200>)
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	0092      	lsls	r2, r2, #2
 800891c:	4413      	add	r3, r2
 800891e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008922:	482c      	ldr	r0, [pc, #176]	; (80089d4 <canMove+0x200>)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	0099      	lsls	r1, r3, #2
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	440b      	add	r3, r1
 800892c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008930:	429a      	cmp	r2, r3
 8008932:	d101      	bne.n	8008938 <canMove+0x164>
                        return 1;  // Can move
 8008934:	2301      	movs	r3, #1
 8008936:	e049      	b.n	80089cc <canMove+0x1f8>
                for (int col = 1; col < SIZE; ++col) {
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	3301      	adds	r3, #1
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b03      	cmp	r3, #3
 8008942:	ddd3      	ble.n	80088ec <canMove+0x118>
            for (int row = 0; row < SIZE; ++row) {
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	3301      	adds	r3, #1
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b03      	cmp	r3, #3
 800894e:	ddca      	ble.n	80088e6 <canMove+0x112>
                    }
                }
            }
            break;
 8008950:	e03b      	b.n	80089ca <canMove+0x1f6>

        case 1:
            for (int row = 0; row < SIZE; ++row) {
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
 8008956:	e031      	b.n	80089bc <canMove+0x1e8>
                for (int col = SIZE - 2; col >= 0; --col) {
 8008958:	2302      	movs	r3, #2
 800895a:	60bb      	str	r3, [r7, #8]
 800895c:	e028      	b.n	80089b0 <canMove+0x1dc>
                    if (board[row][col] != 0 && (board[row][col + 1] == 0 || board[row][col + 1] == board[row][col])) {
 800895e:	491d      	ldr	r1, [pc, #116]	; (80089d4 <canMove+0x200>)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	009a      	lsls	r2, r3, #2
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4413      	add	r3, r2
 8008968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01c      	beq.n	80089aa <canMove+0x1d6>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	3301      	adds	r3, #1
 8008974:	4917      	ldr	r1, [pc, #92]	; (80089d4 <canMove+0x200>)
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	4413      	add	r3, r2
 800897c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d010      	beq.n	80089a6 <canMove+0x1d2>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	3301      	adds	r3, #1
 8008988:	4912      	ldr	r1, [pc, #72]	; (80089d4 <canMove+0x200>)
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	4413      	add	r3, r2
 8008990:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008994:	480f      	ldr	r0, [pc, #60]	; (80089d4 <canMove+0x200>)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	0099      	lsls	r1, r3, #2
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	440b      	add	r3, r1
 800899e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d101      	bne.n	80089aa <canMove+0x1d6>
                        return 1;  // Can move
 80089a6:	2301      	movs	r3, #1
 80089a8:	e010      	b.n	80089cc <canMove+0x1f8>
                for (int col = SIZE - 2; col >= 0; --col) {
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	60bb      	str	r3, [r7, #8]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dad3      	bge.n	800895e <canMove+0x18a>
            for (int row = 0; row < SIZE; ++row) {
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b03      	cmp	r3, #3
 80089c0:	ddca      	ble.n	8008958 <canMove+0x184>
                    }
                }
            }
            break;
 80089c2:	e002      	b.n	80089ca <canMove+0x1f6>

        default:
            printf("Invalid direction.\n");
 80089c4:	4804      	ldr	r0, [pc, #16]	; (80089d8 <canMove+0x204>)
 80089c6:	f003 f9e3 	bl	800bd90 <puts>
    }

    return 0;  // Cannot move
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3728      	adds	r7, #40	; 0x28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000edc 	.word	0x20000edc
 80089d8:	0800f5ec 	.word	0x0800f5ec

080089dc <move>:

void move(char direction, int* score) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b0a2      	sub	sp, #136	; 0x88
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
    switch (direction) {
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	f200 8150 	bhi.w	8008c90 <move+0x2b4>
 80089f0:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <move+0x1c>)
 80089f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f6:	bf00      	nop
 80089f8:	08008a09 	.word	0x08008a09
 80089fc:	08008bf1 	.word	0x08008bf1
 8008a00:	08008ab9 	.word	0x08008ab9
 8008a04:	08008b59 	.word	0x08008b59
        case 0: //GO UP (W)
            for (int col = 0; col < SIZE; ++col) {
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a0e:	e04e      	b.n	8008aae <move+0xd2>
                int currentRow = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	64bb      	str	r3, [r7, #72]	; 0x48
                int tempArray[SIZE] = {0};
 8008a14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	609a      	str	r2, [r3, #8]
 8008a20:	60da      	str	r2, [r3, #12]

                for (int row = 0; row < SIZE; ++row) {
 8008a22:	2300      	movs	r3, #0
 8008a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a28:	e014      	b.n	8008a54 <move+0x78>
                    tempArray[row] = board[row][col];
 8008a2a:	499d      	ldr	r1, [pc, #628]	; (8008ca0 <move+0x2c4>)
 8008a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a30:	009a      	lsls	r2, r3, #2
 8008a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a36:	4413      	add	r3, r2
 8008a38:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	3388      	adds	r3, #136	; 0x88
 8008a44:	443b      	add	r3, r7
 8008a46:	f843 2c50 	str.w	r2, [r3, #-80]
                for (int row = 0; row < SIZE; ++row) {
 8008a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a4e:	3301      	adds	r3, #1
 8008a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	dde6      	ble.n	8008a2a <move+0x4e>
                }

                shiftTiles(tempArray, SIZE);
 8008a5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a60:	2104      	movs	r1, #4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff fe36 	bl	80086d4 <shiftTiles>
                mergeTiles(tempArray, SIZE, score);
 8008a68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	2104      	movs	r1, #4
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fe67 	bl	8008744 <mergeTiles>

                for (int row = 0; row < SIZE; ++row) {
 8008a76:	2300      	movs	r3, #0
 8008a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a7a:	e010      	b.n	8008a9e <move+0xc2>
                    board[row][col] = tempArray[row];
 8008a7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	3388      	adds	r3, #136	; 0x88
 8008a82:	443b      	add	r3, r7
 8008a84:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8008a88:	4885      	ldr	r0, [pc, #532]	; (8008ca0 <move+0x2c4>)
 8008a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a8c:	0099      	lsls	r1, r3, #2
 8008a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a92:	440b      	add	r3, r1
 8008a94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (int row = 0; row < SIZE; ++row) {
 8008a98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	ddeb      	ble.n	8008a7c <move+0xa0>
            for (int col = 0; col < SIZE; ++col) {
 8008aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	ddac      	ble.n	8008a10 <move+0x34>
                }
            }
            break;
 8008ab6:	e0ef      	b.n	8008c98 <move+0x2bc>

        case 2: //GO DOWN (S)
            for (int col = 0; col < SIZE; ++col) {
 8008ab8:	2300      	movs	r3, #0
 8008aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8008abc:	e048      	b.n	8008b50 <move+0x174>
                int currentRow = SIZE - 1;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	653b      	str	r3, [r7, #80]	; 0x50
                int tempArray[SIZE] = {0};
 8008ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	605a      	str	r2, [r3, #4]
 8008acc:	609a      	str	r2, [r3, #8]
 8008ace:	60da      	str	r2, [r3, #12]

                for (int row = SIZE - 1; row >= 0; --row) {
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	677b      	str	r3, [r7, #116]	; 0x74
 8008ad4:	e011      	b.n	8008afa <move+0x11e>
                    tempArray[SIZE - 1 - row] = board[row][col];
 8008ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad8:	f1c3 0303 	rsb	r3, r3, #3
 8008adc:	4870      	ldr	r0, [pc, #448]	; (8008ca0 <move+0x2c4>)
 8008ade:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ae0:	0091      	lsls	r1, r2, #2
 8008ae2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	3388      	adds	r3, #136	; 0x88
 8008aee:	443b      	add	r3, r7
 8008af0:	f843 2c60 	str.w	r2, [r3, #-96]
                for (int row = SIZE - 1; row >= 0; --row) {
 8008af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008af6:	3b01      	subs	r3, #1
 8008af8:	677b      	str	r3, [r7, #116]	; 0x74
 8008afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	daea      	bge.n	8008ad6 <move+0xfa>
                }

                shiftTiles(tempArray, SIZE);
 8008b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b04:	2104      	movs	r1, #4
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff fde4 	bl	80086d4 <shiftTiles>
                mergeTiles(tempArray, SIZE, score);
 8008b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	2104      	movs	r1, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff fe15 	bl	8008744 <mergeTiles>

                for (int row = SIZE - 1; row >= 0; --row) {
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b1e:	e011      	b.n	8008b44 <move+0x168>
                    board[row][col] = tempArray[SIZE - 1 - row];
 8008b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b22:	f1c3 0303 	rsb	r3, r3, #3
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	3388      	adds	r3, #136	; 0x88
 8008b2a:	443b      	add	r3, r7
 8008b2c:	f853 2c60 	ldr.w	r2, [r3, #-96]
 8008b30:	485b      	ldr	r0, [pc, #364]	; (8008ca0 <move+0x2c4>)
 8008b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b34:	0099      	lsls	r1, r3, #2
 8008b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b38:	440b      	add	r3, r1
 8008b3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (int row = SIZE - 1; row >= 0; --row) {
 8008b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b40:	3b01      	subs	r3, #1
 8008b42:	673b      	str	r3, [r7, #112]	; 0x70
 8008b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	daea      	bge.n	8008b20 <move+0x144>
            for (int col = 0; col < SIZE; ++col) {
 8008b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	ddb3      	ble.n	8008abe <move+0xe2>
                }
            }
            break;
 8008b56:	e09f      	b.n	8008c98 <move+0x2bc>

        case 3:  //GO LEFT (S)
            for (int row = 0; row < SIZE; ++row) {
 8008b58:	2300      	movs	r3, #0
 8008b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b5c:	e044      	b.n	8008be8 <move+0x20c>
                int currentCol = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	657b      	str	r3, [r7, #84]	; 0x54
                int tempArray[SIZE] = {0};
 8008b62:	f107 0318 	add.w	r3, r7, #24
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	605a      	str	r2, [r3, #4]
 8008b6c:	609a      	str	r2, [r3, #8]
 8008b6e:	60da      	str	r2, [r3, #12]

                for (int col = 0; col < SIZE; ++col) {
 8008b70:	2300      	movs	r3, #0
 8008b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b74:	e00f      	b.n	8008b96 <move+0x1ba>
                    tempArray[col] = board[row][col];
 8008b76:	494a      	ldr	r1, [pc, #296]	; (8008ca0 <move+0x2c4>)
 8008b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7a:	009a      	lsls	r2, r3, #2
 8008b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b7e:	4413      	add	r3, r2
 8008b80:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8008b84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	3388      	adds	r3, #136	; 0x88
 8008b8a:	443b      	add	r3, r7
 8008b8c:	f843 2c70 	str.w	r2, [r3, #-112]
                for (int col = 0; col < SIZE; ++col) {
 8008b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b92:	3301      	adds	r3, #1
 8008b94:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	ddec      	ble.n	8008b76 <move+0x19a>
                }

                shiftTiles(tempArray, SIZE);
 8008b9c:	f107 0318 	add.w	r3, r7, #24
 8008ba0:	2104      	movs	r1, #4
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fd96 	bl	80086d4 <shiftTiles>
                mergeTiles(tempArray, SIZE, score);
 8008ba8:	f107 0318 	add.w	r3, r7, #24
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	2104      	movs	r1, #4
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff fdc7 	bl	8008744 <mergeTiles>

                for (int col = 0; col < SIZE; ++col) {
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8008bba:	e00f      	b.n	8008bdc <move+0x200>
                    board[row][col] = tempArray[col];
 8008bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	3388      	adds	r3, #136	; 0x88
 8008bc2:	443b      	add	r3, r7
 8008bc4:	f853 2c70 	ldr.w	r2, [r3, #-112]
 8008bc8:	4835      	ldr	r0, [pc, #212]	; (8008ca0 <move+0x2c4>)
 8008bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bcc:	0099      	lsls	r1, r3, #2
 8008bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bd0:	440b      	add	r3, r1
 8008bd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (int col = 0; col < SIZE; ++col) {
 8008bd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bd8:	3301      	adds	r3, #1
 8008bda:	667b      	str	r3, [r7, #100]	; 0x64
 8008bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	ddec      	ble.n	8008bbc <move+0x1e0>
            for (int row = 0; row < SIZE; ++row) {
 8008be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be4:	3301      	adds	r3, #1
 8008be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	ddb7      	ble.n	8008b5e <move+0x182>
                }
            }
            break;
 8008bee:	e053      	b.n	8008c98 <move+0x2bc>

        case 1: //GO RIGHT (RIGHT)
            for (int row = 0; row < SIZE; ++row) {
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8008bf4:	e048      	b.n	8008c88 <move+0x2ac>
                int currentCol = SIZE - 1;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
                int tempArray[SIZE] = {0};
 8008bfa:	f107 0308 	add.w	r3, r7, #8
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	605a      	str	r2, [r3, #4]
 8008c04:	609a      	str	r2, [r3, #8]
 8008c06:	60da      	str	r2, [r3, #12]

                for (int col = SIZE - 1; col >= 0; --col) {
 8008c08:	2303      	movs	r3, #3
 8008c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c0c:	e011      	b.n	8008c32 <move+0x256>
                    tempArray[SIZE - 1 - col] = board[row][col];
 8008c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c10:	f1c3 0303 	rsb	r3, r3, #3
 8008c14:	4822      	ldr	r0, [pc, #136]	; (8008ca0 <move+0x2c4>)
 8008c16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c18:	0091      	lsls	r1, r2, #2
 8008c1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	3388      	adds	r3, #136	; 0x88
 8008c26:	443b      	add	r3, r7
 8008c28:	f843 2c80 	str.w	r2, [r3, #-128]
                for (int col = SIZE - 1; col >= 0; --col) {
 8008c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	daea      	bge.n	8008c0e <move+0x232>
                }

                shiftTiles(tempArray, SIZE);
 8008c38:	f107 0308 	add.w	r3, r7, #8
 8008c3c:	2104      	movs	r1, #4
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fd48 	bl	80086d4 <shiftTiles>
                mergeTiles(tempArray, SIZE, score);
 8008c44:	f107 0308 	add.w	r3, r7, #8
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff fd79 	bl	8008744 <mergeTiles>

                for (int col = SIZE - 1; col >= 0; --col) {
 8008c52:	2303      	movs	r3, #3
 8008c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c56:	e011      	b.n	8008c7c <move+0x2a0>
                    board[row][col] = tempArray[SIZE - 1 - col];
 8008c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c5a:	f1c3 0303 	rsb	r3, r3, #3
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	3388      	adds	r3, #136	; 0x88
 8008c62:	443b      	add	r3, r7
 8008c64:	f853 2c80 	ldr.w	r2, [r3, #-128]
 8008c68:	480d      	ldr	r0, [pc, #52]	; (8008ca0 <move+0x2c4>)
 8008c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c6c:	0099      	lsls	r1, r3, #2
 8008c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c70:	440b      	add	r3, r1
 8008c72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (int col = SIZE - 1; col >= 0; --col) {
 8008c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	daea      	bge.n	8008c58 <move+0x27c>
            for (int row = 0; row < SIZE; ++row) {
 8008c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c84:	3301      	adds	r3, #1
 8008c86:	663b      	str	r3, [r7, #96]	; 0x60
 8008c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	ddb3      	ble.n	8008bf6 <move+0x21a>
                }
            }
            break;
 8008c8e:	e003      	b.n	8008c98 <move+0x2bc>

        default:
            printf("Invalid direction.\n");
 8008c90:	4804      	ldr	r0, [pc, #16]	; (8008ca4 <move+0x2c8>)
 8008c92:	f003 f87d 	bl	800bd90 <puts>
    }
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	3788      	adds	r7, #136	; 0x88
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20000edc 	.word	0x20000edc
 8008ca4:	0800f5ec 	.word	0x0800f5ec

08008ca8 <Test_ANN_SM_Translation>:





void Test_ANN_SM_Translation(ANN *net, int32_t *loc) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b096      	sub	sp, #88	; 0x58
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
	float feature_array[NUM_FEATURES];
	int i, n, r;
	int error;
	float Z_Threshold;

	Z_Threshold = 1.2;
 8008cb2:	4b85      	ldr	r3, [pc, #532]	; (8008ec8 <Test_ANN_SM_Translation+0x220>)
 8008cb4:	60bb      	str	r3, [r7, #8]

	BSP_LED_Off(LED6);
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f7f8 f83a 	bl	8000d30 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	f7f8 f837 	bl	8000d30 <BSP_LED_Off>

//	LED_Notification_Blink_Red(3);
//	LED_Notification_Blink_Green(3);
//	LED_Notification_Blink_Red(3);
	BSP_LED_On(LED6);
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	f7f8 f816 	bl	8000cf4 <BSP_LED_On>



	n = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (n < NUM_FEATURES){
 8008ccc:	e038      	b.n	8008d40 <Test_ANN_SM_Translation+0x98>
		Feature_Extraction_State_Machine_Translation(&feature_1, &feature_2, &sig_mag_scale);
 8008cce:	f107 0220 	add.w	r2, r7, #32
 8008cd2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe ff04 	bl	8007ae8 <Feature_Extraction_State_Machine_Translation>
		feature_array[n] = feature_1;
 8008ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	3358      	adds	r3, #88	; 0x58
 8008ce8:	443b      	add	r3, r7
 8008cea:	3b48      	subs	r3, #72	; 0x48
 8008cec:	601a      	str	r2, [r3, #0]
		n = n + 1;
 8008cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		printf("Features %0.1f\t: ", feature_array[n]);
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	3358      	adds	r3, #88	; 0x58
 8008cfa:	443b      	add	r3, r7
 8008cfc:	3b48      	subs	r3, #72	; 0x48
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f7 fc25 	bl	8000550 <__aeabi_f2d>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4870      	ldr	r0, [pc, #448]	; (8008ecc <Test_ANN_SM_Translation+0x224>)
 8008d0c:	f002 ffd2 	bl	800bcb4 <iprintf>
		feature_array[n] = feature_2;
 8008d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	3358      	adds	r3, #88	; 0x58
 8008d18:	443b      	add	r3, r7
 8008d1a:	3b48      	subs	r3, #72	; 0x48
 8008d1c:	601a      	str	r2, [r3, #0]
		printf("Features %0.1f\t: ", feature_array[n]);
 8008d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	3358      	adds	r3, #88	; 0x58
 8008d24:	443b      	add	r3, r7
 8008d26:	3b48      	subs	r3, #72	; 0x48
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7f7 fc10 	bl	8000550 <__aeabi_f2d>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4865      	ldr	r0, [pc, #404]	; (8008ecc <Test_ANN_SM_Translation+0x224>)
 8008d36:	f002 ffbd 	bl	800bcb4 <iprintf>
		n = n + 1;
 8008d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (n < NUM_FEATURES){
 8008d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	ddc3      	ble.n	8008cce <Test_ANN_SM_Translation+0x26>
	}

	printf("\n");
 8008d46:	200a      	movs	r0, #10
 8008d48:	f002 ffc6 	bl	800bcd8 <putchar>

	for (n = 0; n < NUM_FEATURES; n++){
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d50:	e00e      	b.n	8008d70 <Test_ANN_SM_Translation+0xc8>
		sig_xyz[n] = feature_array[n];
 8008d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	3358      	adds	r3, #88	; 0x58
 8008d58:	443b      	add	r3, r7
 8008d5a:	3b48      	subs	r3, #72	; 0x48
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	3358      	adds	r3, #88	; 0x58
 8008d64:	443b      	add	r3, r7
 8008d66:	3b2c      	subs	r3, #44	; 0x2c
 8008d68:	601a      	str	r2, [r3, #0]
	for (n = 0; n < NUM_FEATURES; n++){
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	dded      	ble.n	8008d52 <Test_ANN_SM_Translation+0xaa>
	}

	motion_softmax(net->topology[0], sig_xyz, sig_xyz_norm);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d86:	4619      	mov	r1, r3
 8008d88:	f000 fbb4 	bl	80094f4 <motion_softmax>
		//		printf("\t%0.3f", sig_xyz_norm[r]);
		//
		//	}
		//	printf("\n\n");

	run_ann(net, sig_xyz_norm);
 8008d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fa3f 	bl	800a216 <run_ann>


	point = 0.0;
 8008d98:	f04f 0300 	mov.w	r3, #0
 8008d9c:	657b      	str	r3, [r7, #84]	; 0x54

	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008d9e:	2300      	movs	r3, #0
 8008da0:	653b      	str	r3, [r7, #80]	; 0x50
 8008da2:	e02b      	b.n	8008dfc <Test_ANN_SM_Translation+0x154>
		if (net->output[i] > point && net->output[i] > 0.1) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	edd3 7a00 	vldr	s15, [r3]
 8008db2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbe:	d51a      	bpl.n	8008df6 <Test_ANN_SM_Translation+0x14e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	69da      	ldr	r2, [r3, #28]
 8008dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f7 fbbf 	bl	8000550 <__aeabi_f2d>
 8008dd2:	a33b      	add	r3, pc, #236	; (adr r3, 8008ec0 <Test_ANN_SM_Translation+0x218>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f7f7 fea2 	bl	8000b20 <__aeabi_dcmpgt>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d009      	beq.n	8008df6 <Test_ANN_SM_Translation+0x14e>
			point = net->output[i];
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69da      	ldr	r2, [r3, #28]
 8008de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	657b      	str	r3, [r7, #84]	; 0x54
			*loc = i;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008df4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8008df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df8:	3301      	adds	r3, #1
 8008dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d8c6      	bhi.n	8008da4 <Test_ANN_SM_Translation+0xfc>
		}
	}

	printOutput_ANN_Threshold(net, *loc, &error, &Z_Threshold);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	6819      	ldr	r1, [r3, #0]
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	f107 020c 	add.w	r2, r7, #12
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f908 	bl	8009038 <printOutput_ANN_Threshold>


	if (error == 1){
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d103      	bne.n	8008e36 <Test_ANN_SM_Translation+0x18e>
		*loc = -1;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e34:	601a      	str	r2, [r3, #0]
	}




	switch (*loc){
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d81a      	bhi.n	8008e74 <Test_ANN_SM_Translation+0x1cc>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <Test_ANN_SM_Translation+0x19c>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008e5d 	.word	0x08008e5d
 8008e4c:	08008e65 	.word	0x08008e65
 8008e50:	08008e6d 	.word	0x08008e6d
		case 0:
			printf("\rNeural Network Classification - Motion UP");
 8008e54:	481e      	ldr	r0, [pc, #120]	; (8008ed0 <Test_ANN_SM_Translation+0x228>)
 8008e56:	f002 ff2d 	bl	800bcb4 <iprintf>
			break;
 8008e5a:	e00f      	b.n	8008e7c <Test_ANN_SM_Translation+0x1d4>
		case 1:
			printf("\rNeural Network Classification - Motion RIGHT");
 8008e5c:	481d      	ldr	r0, [pc, #116]	; (8008ed4 <Test_ANN_SM_Translation+0x22c>)
 8008e5e:	f002 ff29 	bl	800bcb4 <iprintf>
			break;
 8008e62:	e00b      	b.n	8008e7c <Test_ANN_SM_Translation+0x1d4>
		case 2:
			printf("\rNeural Network Classification - Motion DOWN");
 8008e64:	481c      	ldr	r0, [pc, #112]	; (8008ed8 <Test_ANN_SM_Translation+0x230>)
 8008e66:	f002 ff25 	bl	800bcb4 <iprintf>
			break;
 8008e6a:	e007      	b.n	8008e7c <Test_ANN_SM_Translation+0x1d4>
		case 3:
			printf("\rNeural Network Classification - Motion LEFT");
 8008e6c:	481b      	ldr	r0, [pc, #108]	; (8008edc <Test_ANN_SM_Translation+0x234>)
 8008e6e:	f002 ff21 	bl	800bcb4 <iprintf>
			break;
 8008e72:	e003      	b.n	8008e7c <Test_ANN_SM_Translation+0x1d4>
		default:
			printf("\rNeural Network Classification - NULL");
 8008e74:	481a      	ldr	r0, [pc, #104]	; (8008ee0 <Test_ANN_SM_Translation+0x238>)
 8008e76:	f002 ff1d 	bl	800bcb4 <iprintf>
			break;
 8008e7a:	bf00      	nop
	}

	printf("\n\n\n\n");
 8008e7c:	4819      	ldr	r0, [pc, #100]	; (8008ee4 <Test_ANN_SM_Translation+0x23c>)
 8008e7e:	f002 ff87 	bl	800bd90 <puts>

	if (canMove(*loc)) {
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff fca3 	bl	80087d4 <canMove>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <Test_ANN_SM_Translation+0x200>
		move(*loc, &score);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	4913      	ldr	r1, [pc, #76]	; (8008ee8 <Test_ANN_SM_Translation+0x240>)
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fd9d 	bl	80089dc <move>
		printBoard();
 8008ea2:	f7ff fb07 	bl	80084b4 <printBoard>
	} else {
		printf("Cannot move '%c'. Try again.\n", *loc);
	}
}
 8008ea6:	e005      	b.n	8008eb4 <Test_ANN_SM_Translation+0x20c>
		printf("Cannot move '%c'. Try again.\n", *loc);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4619      	mov	r1, r3
 8008eae:	480f      	ldr	r0, [pc, #60]	; (8008eec <Test_ANN_SM_Translation+0x244>)
 8008eb0:	f002 ff00 	bl	800bcb4 <iprintf>
}
 8008eb4:	bf00      	nop
 8008eb6:	3758      	adds	r7, #88	; 0x58
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	f3af 8000 	nop.w
 8008ec0:	9999999a 	.word	0x9999999a
 8008ec4:	3fb99999 	.word	0x3fb99999
 8008ec8:	3f99999a 	.word	0x3f99999a
 8008ecc:	0800f4fc 	.word	0x0800f4fc
 8008ed0:	0800f600 	.word	0x0800f600
 8008ed4:	0800f62c 	.word	0x0800f62c
 8008ed8:	0800f65c 	.word	0x0800f65c
 8008edc:	0800f68c 	.word	0x0800f68c
 8008ee0:	0800f6bc 	.word	0x0800f6bc
 8008ee4:	0800f6e4 	.word	0x0800f6e4
 8008ee8:	20000f1c 	.word	0x20000f1c
 8008eec:	0800f6e8 	.word	0x0800f6e8

08008ef0 <LED_Code_Blink_Red>:


void LED_Code_Blink_Red(int count) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	int i;

	/*
	 * Alert signal of rapid blinks indicating code to be shown
	 */
	for (i = 0; i < 7; i++) {
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e00e      	b.n	8008f1c <LED_Code_Blink_Red+0x2c>
		BSP_LED_On(LED6);
 8008efe:	2000      	movs	r0, #0
 8008f00:	f7f7 fef8 	bl	8000cf4 <BSP_LED_On>

		HAL_Delay(20);
 8008f04:	2014      	movs	r0, #20
 8008f06:	f7fb fd11 	bl	800492c <HAL_Delay>
		BSP_LED_Off(LED6);
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f7f7 ff10 	bl	8000d30 <BSP_LED_Off>

		HAL_Delay(50);
 8008f10:	2032      	movs	r0, #50	; 0x32
 8008f12:	f7fb fd0b 	bl	800492c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b06      	cmp	r3, #6
 8008f20:	dded      	ble.n	8008efe <LED_Code_Blink_Red+0xe>

	/*
	 * Code indicated by number of slow blinks
	 */

	if (count != 0) {
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01b      	beq.n	8008f60 <LED_Code_Blink_Red+0x70>
		HAL_Delay(1000);
 8008f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f2c:	f7fb fcfe 	bl	800492c <HAL_Delay>
		for (i = 0; i < count; i++) {
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e010      	b.n	8008f58 <LED_Code_Blink_Red+0x68>
			BSP_LED_On(LED6);
 8008f36:	2000      	movs	r0, #0
 8008f38:	f7f7 fedc 	bl	8000cf4 <BSP_LED_On>

			HAL_Delay(500);
 8008f3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f40:	f7fb fcf4 	bl	800492c <HAL_Delay>
			BSP_LED_Off(LED6);
 8008f44:	2000      	movs	r0, #0
 8008f46:	f7f7 fef3 	bl	8000d30 <BSP_LED_Off>

			HAL_Delay(500);
 8008f4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f4e:	f7fb fced 	bl	800492c <HAL_Delay>
		for (i = 0; i < count; i++) {
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3301      	adds	r3, #1
 8008f56:	60fb      	str	r3, [r7, #12]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	dbea      	blt.n	8008f36 <LED_Code_Blink_Red+0x46>
	}

	/*
	 * Alert signal of rapid blinks indicating end of code
	 */
	for (i = 0; i < 7; i++) {
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e00e      	b.n	8008f84 <LED_Code_Blink_Red+0x94>
		BSP_LED_On(LED6);
 8008f66:	2000      	movs	r0, #0
 8008f68:	f7f7 fec4 	bl	8000cf4 <BSP_LED_On>

		HAL_Delay(20);
 8008f6c:	2014      	movs	r0, #20
 8008f6e:	f7fb fcdd 	bl	800492c <HAL_Delay>
		BSP_LED_Off(LED6);
 8008f72:	2000      	movs	r0, #0
 8008f74:	f7f7 fedc 	bl	8000d30 <BSP_LED_Off>

		HAL_Delay(30);
 8008f78:	201e      	movs	r0, #30
 8008f7a:	f7fb fcd7 	bl	800492c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3301      	adds	r3, #1
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b06      	cmp	r3, #6
 8008f88:	dded      	ble.n	8008f66 <LED_Code_Blink_Red+0x76>
	}

}
 8008f8a:	bf00      	nop
 8008f8c:	bf00      	nop
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <LED_Code_Blink_Green>:

void LED_Code_Blink_Green(int count) {
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	int i;

	/*
	 * Alert signal of rapid blinks indicating code to be shown
	 */
	for (i = 0; i < 7; i++) {
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	e00e      	b.n	8008fc0 <LED_Code_Blink_Green+0x2c>

		BSP_LED_On(LED7);
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f7f7 fea6 	bl	8000cf4 <BSP_LED_On>
		HAL_Delay(20);
 8008fa8:	2014      	movs	r0, #20
 8008faa:	f7fb fcbf 	bl	800492c <HAL_Delay>

		BSP_LED_Off(LED7);
 8008fae:	2001      	movs	r0, #1
 8008fb0:	f7f7 febe 	bl	8000d30 <BSP_LED_Off>
		HAL_Delay(50);
 8008fb4:	2032      	movs	r0, #50	; 0x32
 8008fb6:	f7fb fcb9 	bl	800492c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b06      	cmp	r3, #6
 8008fc4:	dded      	ble.n	8008fa2 <LED_Code_Blink_Green+0xe>

	/*
	 * Code indicated by number of slow blinks
	 */

	if (count != 0) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01b      	beq.n	8009004 <LED_Code_Blink_Green+0x70>
		HAL_Delay(1000);
 8008fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008fd0:	f7fb fcac 	bl	800492c <HAL_Delay>
		for (i = 0; i < count; i++) {
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e010      	b.n	8008ffc <LED_Code_Blink_Green+0x68>

			BSP_LED_On(LED7);
 8008fda:	2001      	movs	r0, #1
 8008fdc:	f7f7 fe8a 	bl	8000cf4 <BSP_LED_On>
			HAL_Delay(500);
 8008fe0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008fe4:	f7fb fca2 	bl	800492c <HAL_Delay>

			BSP_LED_Off(LED7);
 8008fe8:	2001      	movs	r0, #1
 8008fea:	f7f7 fea1 	bl	8000d30 <BSP_LED_Off>
			HAL_Delay(500);
 8008fee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ff2:	f7fb fc9b 	bl	800492c <HAL_Delay>
		for (i = 0; i < count; i++) {
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	dbea      	blt.n	8008fda <LED_Code_Blink_Green+0x46>
	}

	/*
	 * Alert signal of rapid blinks indicating end of code
	 */
	for (i = 0; i < 7; i++) {
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e00e      	b.n	8009028 <LED_Code_Blink_Green+0x94>

		BSP_LED_On(LED7);
 800900a:	2001      	movs	r0, #1
 800900c:	f7f7 fe72 	bl	8000cf4 <BSP_LED_On>
		HAL_Delay(20);
 8009010:	2014      	movs	r0, #20
 8009012:	f7fb fc8b 	bl	800492c <HAL_Delay>

		BSP_LED_Off(LED7);
 8009016:	2001      	movs	r0, #1
 8009018:	f7f7 fe8a 	bl	8000d30 <BSP_LED_Off>
		HAL_Delay(30);
 800901c:	201e      	movs	r0, #30
 800901e:	f7fb fc85 	bl	800492c <HAL_Delay>
	for (i = 0; i < 7; i++) {
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b06      	cmp	r3, #6
 800902c:	dded      	ble.n	800900a <LED_Code_Blink_Green+0x76>
	}

}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <printOutput_ANN_Threshold>:

void printOutput_ANN_Threshold(ANN *net, int input_state, int * error, float * Z_Threshold) {
 8009038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800903c:	b092      	sub	sp, #72	; 0x48
 800903e:	af04      	add	r7, sp, #16
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
 8009046:	603b      	str	r3, [r7, #0]

	int i, loc, count;
	float point = 0.0;
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	62bb      	str	r3, [r7, #40]	; 0x28

	/*
	 * Initialize error state
	 */

	*error = 0;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
	loc = -1;
 8009054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009058:	633b      	str	r3, [r7, #48]	; 0x30
	count = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	62fb      	str	r3, [r7, #44]	; 0x2c
	mean_output = 0;
 800905e:	f04f 0300 	mov.w	r3, #0
 8009062:	623b      	str	r3, [r7, #32]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8009064:	2300      	movs	r3, #0
 8009066:	637b      	str	r3, [r7, #52]	; 0x34
 8009068:	e03b      	b.n	80090e2 <printOutput_ANN_Threshold+0xaa>
		mean_output = mean_output + (net->output[i]);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	69da      	ldr	r2, [r3, #28]
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	edd3 7a00 	vldr	s15, [r3]
 8009078:	ed97 7a08 	vldr	s14, [r7, #32]
 800907c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009080:	edc7 7a08 	vstr	s15, [r7, #32]
		if (net->output[i] > point && net->output[i] > 0.1) {
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	69da      	ldr	r2, [r3, #28]
 8009088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	edd3 7a00 	vldr	s15, [r3]
 8009092:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	d51a      	bpl.n	80090d6 <printOutput_ANN_Threshold+0x9e>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	69da      	ldr	r2, [r3, #28]
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f7 fa4f 	bl	8000550 <__aeabi_f2d>
 80090b2:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 fd31 	bl	8000b20 <__aeabi_dcmpgt>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <printOutput_ANN_Threshold+0x9e>
			point = net->output[i];
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	69da      	ldr	r2, [r3, #28]
 80090c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	62bb      	str	r3, [r7, #40]	; 0x28
			loc = i;
 80090d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d4:	633b      	str	r3, [r7, #48]	; 0x30
		}
		count++;
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	3301      	adds	r3, #1
 80090da:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80090dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090de:	3301      	adds	r3, #1
 80090e0:	637b      	str	r3, [r7, #52]	; 0x34
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090ee:	3b01      	subs	r3, #1
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d8b6      	bhi.n	800906a <printOutput_ANN_Threshold+0x32>
	}

	next_max = 0;
 80090fc:	f04f 0300 	mov.w	r3, #0
 8009100:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8009102:	2300      	movs	r3, #0
 8009104:	637b      	str	r3, [r7, #52]	; 0x34
 8009106:	e02e      	b.n	8009166 <printOutput_ANN_Threshold+0x12e>
		if (i == loc) {
 8009108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	429a      	cmp	r2, r3
 800910e:	d026      	beq.n	800915e <printOutput_ANN_Threshold+0x126>
			continue;
		}
		if (net->output[i] > next_max && net->output[i] > 0.1) {
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	edd3 7a00 	vldr	s15, [r3]
 800911e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912a:	d519      	bpl.n	8009160 <printOutput_ANN_Threshold+0x128>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7f7 fa09 	bl	8000550 <__aeabi_f2d>
 800913e:	a3eb      	add	r3, pc, #940	; (adr r3, 80094ec <printOutput_ANN_Threshold+0x4b4>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fcec 	bl	8000b20 <__aeabi_dcmpgt>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d008      	beq.n	8009160 <printOutput_ANN_Threshold+0x128>
			next_max = net->output[i];
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	69da      	ldr	r2, [r3, #28]
 8009152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	e000      	b.n	8009160 <printOutput_ANN_Threshold+0x128>
			continue;
 800915e:	bf00      	nop
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8009160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009162:	3301      	adds	r3, #1
 8009164:	637b      	str	r3, [r7, #52]	; 0x34
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009172:	3b01      	subs	r3, #1
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	429a      	cmp	r2, r3
 800917e:	d8c3      	bhi.n	8009108 <printOutput_ANN_Threshold+0xd0>
		}
	}

	mean_output = (mean_output) / (count);
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800918a:	edd7 6a08 	vldr	s13, [r7, #32]
 800918e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009192:	edc7 7a08 	vstr	s15, [r7, #32]

	count = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
	mean_output_rem = 0;
 800919a:	f04f 0300 	mov.w	r3, #0
 800919e:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80091a0:	2300      	movs	r3, #0
 80091a2:	637b      	str	r3, [r7, #52]	; 0x34
 80091a4:	e018      	b.n	80091d8 <printOutput_ANN_Threshold+0x1a0>
		mean_output_rem = mean_output_rem + (net->output[i]);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	69da      	ldr	r2, [r3, #28]
 80091aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	edd3 7a00 	vldr	s15, [r3]
 80091b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80091b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091bc:	edc7 7a07 	vstr	s15, [r7, #28]
		if (i == loc) {
 80091c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d003      	beq.n	80091d0 <printOutput_ANN_Threshold+0x198>
			continue;
		}
		count++;
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	3301      	adds	r3, #1
 80091cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091ce:	e000      	b.n	80091d2 <printOutput_ANN_Threshold+0x19a>
			continue;
 80091d0:	bf00      	nop
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	3301      	adds	r3, #1
 80091d6:	637b      	str	r3, [r7, #52]	; 0x34
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091e4:	3b01      	subs	r3, #1
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d8d9      	bhi.n	80091a6 <printOutput_ANN_Threshold+0x16e>
	}

	mean_output_rem = (mean_output_rem) / (count);
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	ee07 3a90 	vmov	s15, r3
 80091f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009204:	edc7 7a07 	vstr	s15, [r7, #28]

	rms_output = 0;
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 800920e:	2300      	movs	r3, #0
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
 8009212:	e02c      	b.n	800926e <printOutput_ANN_Threshold+0x236>
		rms_output = rms_output + pow((net->output[i] - mean_output), 2);
 8009214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009216:	f7f7 f99b 	bl	8000550 <__aeabi_f2d>
 800921a:	4604      	mov	r4, r0
 800921c:	460d      	mov	r5, r1
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	69da      	ldr	r2, [r3, #28]
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	ed93 7a00 	vldr	s14, [r3]
 800922c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009234:	ee17 0a90 	vmov	r0, s15
 8009238:	f7f7 f98a 	bl	8000550 <__aeabi_f2d>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 80094b8 <printOutput_ANN_Threshold+0x480>
 8009244:	ec43 2b10 	vmov	d0, r2, r3
 8009248:	f005 f95a 	bl	800e500 <pow>
 800924c:	ec53 2b10 	vmov	r2, r3, d0
 8009250:	4620      	mov	r0, r4
 8009252:	4629      	mov	r1, r5
 8009254:	f7f7 f81e 	bl	8000294 <__adddf3>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4610      	mov	r0, r2
 800925e:	4619      	mov	r1, r3
 8009260:	f7f7 fca6 	bl	8000bb0 <__aeabi_d2f>
 8009264:	4603      	mov	r3, r0
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8009268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926a:	3301      	adds	r3, #1
 800926c:	637b      	str	r3, [r7, #52]	; 0x34
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800927a:	3b01      	subs	r3, #1
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009284:	429a      	cmp	r2, r3
 8009286:	d8c5      	bhi.n	8009214 <printOutput_ANN_Threshold+0x1dc>
	}

	rms_output = sqrt(rms_output / count);
 8009288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009292:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009296:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800929a:	ee16 0a90 	vmov	r0, s13
 800929e:	f7f7 f957 	bl	8000550 <__aeabi_f2d>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	ec43 2b10 	vmov	d0, r2, r3
 80092aa:	f005 f999 	bl	800e5e0 <sqrt>
 80092ae:	ec53 2b10 	vmov	r2, r3, d0
 80092b2:	4610      	mov	r0, r2
 80092b4:	4619      	mov	r1, r3
 80092b6:	f7f7 fc7b 	bl	8000bb0 <__aeabi_d2f>
 80092ba:	4603      	mov	r3, r0
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
	if (rms_output != 0) {
 80092be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80092c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ca:	d00c      	beq.n	80092e6 <printOutput_ANN_Threshold+0x2ae>
		classification_metric = (point - mean_output) / rms_output;
 80092cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80092d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80092d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80092d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80092dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e0:	edc7 7a05 	vstr	s15, [r7, #20]
 80092e4:	e002      	b.n	80092ec <printOutput_ANN_Threshold+0x2b4>
	} else {
		classification_metric = 0;
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
	}

	if (loc != input_state) {
 80092ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d00e      	beq.n	8009312 <printOutput_ANN_Threshold+0x2da>
		rms_output = 0;
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
		classification_metric = 0;
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]
		point = 0;
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	62bb      	str	r3, [r7, #40]	; 0x28
		mean_output = 0;
 8009306:	f04f 0300 	mov.w	r3, #0
 800930a:	623b      	str	r3, [r7, #32]
		mean_output_rem = 0;
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
	}
	if (loc > -1){
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	2b00      	cmp	r3, #0
 8009316:	db03      	blt.n	8009320 <printOutput_ANN_Threshold+0x2e8>
		printf("State: %i",loc);
 8009318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800931a:	486b      	ldr	r0, [pc, #428]	; (80094c8 <printOutput_ANN_Threshold+0x490>)
 800931c:	f002 fcca 	bl	800bcb4 <iprintf>
	}
	if (loc == -1){
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009326:	d102      	bne.n	800932e <printOutput_ANN_Threshold+0x2f6>
		printf("State:  ");
 8009328:	4868      	ldr	r0, [pc, #416]	; (80094cc <printOutput_ANN_Threshold+0x494>)
 800932a:	f002 fcc3 	bl	800bcb4 <iprintf>
	}

	if (mean_output >= 0){
 800932e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933a:	db18      	blt.n	800936e <printOutput_ANN_Threshold+0x336>
		printf(" Max: %0.1f Mean:  %0.1f Z: %0.1f ", loc, point, mean_output, classification_metric);
 800933c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800933e:	f7f7 f907 	bl	8000550 <__aeabi_f2d>
 8009342:	4680      	mov	r8, r0
 8009344:	4689      	mov	r9, r1
 8009346:	6a38      	ldr	r0, [r7, #32]
 8009348:	f7f7 f902 	bl	8000550 <__aeabi_f2d>
 800934c:	4604      	mov	r4, r0
 800934e:	460d      	mov	r5, r1
 8009350:	6978      	ldr	r0, [r7, #20]
 8009352:	f7f7 f8fd 	bl	8000550 <__aeabi_f2d>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800935e:	e9cd 4500 	strd	r4, r5, [sp]
 8009362:	4642      	mov	r2, r8
 8009364:	464b      	mov	r3, r9
 8009366:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009368:	4859      	ldr	r0, [pc, #356]	; (80094d0 <printOutput_ANN_Threshold+0x498>)
 800936a:	f002 fca3 	bl	800bcb4 <iprintf>
	}
	if (mean_output < 0){
 800936e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937a:	d518      	bpl.n	80093ae <printOutput_ANN_Threshold+0x376>
		printf(" Max: %0.1f Mean: %0.1f Z: %0.1f ", loc, point, mean_output, classification_metric);
 800937c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800937e:	f7f7 f8e7 	bl	8000550 <__aeabi_f2d>
 8009382:	4680      	mov	r8, r0
 8009384:	4689      	mov	r9, r1
 8009386:	6a38      	ldr	r0, [r7, #32]
 8009388:	f7f7 f8e2 	bl	8000550 <__aeabi_f2d>
 800938c:	4604      	mov	r4, r0
 800938e:	460d      	mov	r5, r1
 8009390:	6978      	ldr	r0, [r7, #20]
 8009392:	f7f7 f8dd 	bl	8000550 <__aeabi_f2d>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800939e:	e9cd 4500 	strd	r4, r5, [sp]
 80093a2:	4642      	mov	r2, r8
 80093a4:	464b      	mov	r3, r9
 80093a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093a8:	484a      	ldr	r0, [pc, #296]	; (80094d4 <printOutput_ANN_Threshold+0x49c>)
 80093aa:	f002 fc83 	bl	800bcb4 <iprintf>
	}

	printf("Outputs: ");
 80093ae:	484a      	ldr	r0, [pc, #296]	; (80094d8 <printOutput_ANN_Threshold+0x4a0>)
 80093b0:	f002 fc80 	bl	800bcb4 <iprintf>
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 80093b4:	2300      	movs	r3, #0
 80093b6:	637b      	str	r3, [r7, #52]	; 0x34
 80093b8:	e036      	b.n	8009428 <printOutput_ANN_Threshold+0x3f0>
		if (net->output[i] >= 0){
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	69da      	ldr	r2, [r3, #28]
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	edd3 7a00 	vldr	s15, [r3]
 80093c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d0:	db0d      	blt.n	80093ee <printOutput_ANN_Threshold+0x3b6>
			printf("  %0.1f", net->output[i]);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	69da      	ldr	r2, [r3, #28]
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f7 f8b6 	bl	8000550 <__aeabi_f2d>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	483c      	ldr	r0, [pc, #240]	; (80094dc <printOutput_ANN_Threshold+0x4a4>)
 80093ea:	f002 fc63 	bl	800bcb4 <iprintf>
		}
		if (net->output[i] < 0){
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	69da      	ldr	r2, [r3, #28]
 80093f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	edd3 7a00 	vldr	s15, [r3]
 80093fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009404:	d50d      	bpl.n	8009422 <printOutput_ANN_Threshold+0x3ea>
			printf(" %0.1f", net->output[i]);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	69da      	ldr	r2, [r3, #28]
 800940a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f7f7 f89c 	bl	8000550 <__aeabi_f2d>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4830      	ldr	r0, [pc, #192]	; (80094e0 <printOutput_ANN_Threshold+0x4a8>)
 800941e:	f002 fc49 	bl	800bcb4 <iprintf>
	for (i = 0; i < net->topology[net->n_layers - 1]; i++) {
 8009422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009424:	3301      	adds	r3, #1
 8009426:	637b      	str	r3, [r7, #52]	; 0x34
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009434:	3b01      	subs	r3, #1
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943e:	429a      	cmp	r2, r3
 8009440:	d8bb      	bhi.n	80093ba <printOutput_ANN_Threshold+0x382>
		}
	}

	if (loc != input_state) {
 8009442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	429a      	cmp	r2, r3
 8009448:	d005      	beq.n	8009456 <printOutput_ANN_Threshold+0x41e>
		*error = 1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	601a      	str	r2, [r3, #0]
		printf("\t Classification Error");
 8009450:	4824      	ldr	r0, [pc, #144]	; (80094e4 <printOutput_ANN_Threshold+0x4ac>)
 8009452:	f002 fc2f 	bl	800bcb4 <iprintf>
	}

	if (loc == input_state
 8009456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	429a      	cmp	r2, r3
 800945c:	d121      	bne.n	80094a2 <printOutput_ANN_Threshold+0x46a>
			&& ( classification_metric < *Z_Threshold
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	edd3 7a00 	vldr	s15, [r3]
 8009464:	ed97 7a05 	vldr	s14, [r7, #20]
 8009468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800946c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009470:	d411      	bmi.n	8009496 <printOutput_ANN_Threshold+0x45e>
					|| point/next_max < CLASSIFICATION_DISC_THRESHOLD)) {
 8009472:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009476:	edd7 7a06 	vldr	s15, [r7, #24]
 800947a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800947e:	ee16 0a90 	vmov	r0, s13
 8009482:	f7f7 f865 	bl	8000550 <__aeabi_f2d>
 8009486:	a30e      	add	r3, pc, #56	; (adr r3, 80094c0 <printOutput_ANN_Threshold+0x488>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f7f7 fb2a 	bl	8000ae4 <__aeabi_dcmplt>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d005      	beq.n	80094a2 <printOutput_ANN_Threshold+0x46a>
		*error = 1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	601a      	str	r2, [r3, #0]
		printf("\t Classification Accuracy Limit");
 800949c:	4812      	ldr	r0, [pc, #72]	; (80094e8 <printOutput_ANN_Threshold+0x4b0>)
 800949e:	f002 fc09 	bl	800bcb4 <iprintf>
	}

	printf("\n");
 80094a2:	200a      	movs	r0, #10
 80094a4:	f002 fc18 	bl	800bcd8 <putchar>
}
 80094a8:	bf00      	nop
 80094aa:	3738      	adds	r7, #56	; 0x38
 80094ac:	46bd      	mov	sp, r7
 80094ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80094b2:	bf00      	nop
 80094b4:	f3af 8000 	nop.w
 80094b8:	00000000 	.word	0x00000000
 80094bc:	40000000 	.word	0x40000000
 80094c0:	cccccccd 	.word	0xcccccccd
 80094c4:	3ff0cccc 	.word	0x3ff0cccc
 80094c8:	0800f708 	.word	0x0800f708
 80094cc:	0800f714 	.word	0x0800f714
 80094d0:	0800f720 	.word	0x0800f720
 80094d4:	0800f744 	.word	0x0800f744
 80094d8:	0800f768 	.word	0x0800f768
 80094dc:	0800f774 	.word	0x0800f774
 80094e0:	0800f77c 	.word	0x0800f77c
 80094e4:	0800f784 	.word	0x0800f784
 80094e8:	0800f79c 	.word	0x0800f79c
 80094ec:	9999999a 	.word	0x9999999a
 80094f0:	3fb99999 	.word	0x3fb99999

080094f4 <motion_softmax>:



void motion_softmax(int n, float *x, float *y) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
	float norm;
	int32_t i;

	norm = 0;
 8009500:	f04f 0300 	mov.w	r3, #0
 8009504:	617b      	str	r3, [r7, #20]
	for (i = 0; i < n; i++){
 8009506:	2300      	movs	r3, #0
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	e016      	b.n	800953a <motion_softmax+0x46>
		norm = norm + x[i] * x[i];
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	4413      	add	r3, r2
 8009514:	ed93 7a00 	vldr	s14, [r3]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	4413      	add	r3, r2
 8009520:	edd3 7a00 	vldr	s15, [r3]
 8009524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009528:	ed97 7a05 	vldr	s14, [r7, #20]
 800952c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009530:	edc7 7a05 	vstr	s15, [r7, #20]
	for (i = 0; i < n; i++){
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	3301      	adds	r3, #1
 8009538:	613b      	str	r3, [r7, #16]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	429a      	cmp	r2, r3
 8009540:	dbe4      	blt.n	800950c <motion_softmax+0x18>
	}
	norm = sqrt(norm);
 8009542:	6978      	ldr	r0, [r7, #20]
 8009544:	f7f7 f804 	bl	8000550 <__aeabi_f2d>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	ec43 2b10 	vmov	d0, r2, r3
 8009550:	f005 f846 	bl	800e5e0 <sqrt>
 8009554:	ec53 2b10 	vmov	r2, r3, d0
 8009558:	4610      	mov	r0, r2
 800955a:	4619      	mov	r1, r3
 800955c:	f7f7 fb28 	bl	8000bb0 <__aeabi_d2f>
 8009560:	4603      	mov	r3, r0
 8009562:	617b      	str	r3, [r7, #20]
	for (i = 0; i < n; i++){
 8009564:	2300      	movs	r3, #0
 8009566:	613b      	str	r3, [r7, #16]
 8009568:	e012      	b.n	8009590 <motion_softmax+0x9c>
		y[i] = x[i]/norm;
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	4413      	add	r3, r2
 8009572:	edd3 6a00 	vldr	s13, [r3]
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	4413      	add	r3, r2
 800957e:	ed97 7a05 	vldr	s14, [r7, #20]
 8009582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009586:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < n; i++){
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	3301      	adds	r3, #1
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	429a      	cmp	r2, r3
 8009596:	dbe8      	blt.n	800956a <motion_softmax+0x76>
	}
}
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <LED_Notification_Blink_Green>:


void LED_Notification_Blink_Green(int count) {
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]

	/*
	 * Rapid blink notification
	 */

	for (i = 0; i < count; i++) {
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	e00e      	b.n	80095ce <LED_Notification_Blink_Green+0x2c>

		BSP_LED_On(LED7);
 80095b0:	2001      	movs	r0, #1
 80095b2:	f7f7 fb9f 	bl	8000cf4 <BSP_LED_On>
		HAL_Delay(20);
 80095b6:	2014      	movs	r0, #20
 80095b8:	f7fb f9b8 	bl	800492c <HAL_Delay>

		BSP_LED_Off(LED7);
 80095bc:	2001      	movs	r0, #1
 80095be:	f7f7 fbb7 	bl	8000d30 <BSP_LED_Off>
		HAL_Delay(50);
 80095c2:	2032      	movs	r0, #50	; 0x32
 80095c4:	f7fb f9b2 	bl	800492c <HAL_Delay>
	for (i = 0; i < count; i++) {
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3301      	adds	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	dbec      	blt.n	80095b0 <LED_Notification_Blink_Green+0xe>
	}
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <BP_ANN>:

		HAL_Delay(50);
	}
}

void BP_ANN(ANN *net, float *input, float *output, float *weights, float *velocity, float *bias, float *delta, int depth){
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	ed2d 8b02 	vpush	{d8}
 80095e8:	b0af      	sub	sp, #188	; 0xbc
 80095ea:	af04      	add	r7, sp, #16
 80095ec:	6578      	str	r0, [r7, #84]	; 0x54
 80095ee:	6539      	str	r1, [r7, #80]	; 0x50
 80095f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80095f2:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned int i,j;
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 80095f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f6:	68d9      	ldr	r1, [r3, #12]
 80095f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800960a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800960c:	68d9      	ldr	r1, [r3, #12]
 800960e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009610:	691a      	ldr	r2, [r3, #16]
 8009612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800961c:	3b01      	subs	r3, #1
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	663b      	str	r3, [r7, #96]	; 0x60

	if(depth == 1){
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	2b01      	cmp	r3, #1
 800962c:	f040 8185 	bne.w	800993a <BP_ANN+0x35a>
 8009630:	466b      	mov	r3, sp
 8009632:	461d      	mov	r5, r3
		for(i = 0; i < DIM[0]; i++){
 8009634:	2300      	movs	r3, #0
 8009636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800963a:	e0c4      	b.n	80097c6 <BP_ANN+0x1e6>
			net->output[i] = 0.0;
 800963c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963e:	69da      	ldr	r2, [r3, #28]
 8009640:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	f04f 0200 	mov.w	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM[1]; j++){
 800964e:	2300      	movs	r3, #0
 8009650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009654:	e02c      	b.n	80096b0 <BP_ANN+0xd0>
				net->output[i] += weights[(DIM[1]*i)+j]*input[j];
 8009656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009658:	69da      	ldr	r2, [r3, #28]
 800965a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	ed93 7a00 	vldr	s14, [r3]
 8009666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009668:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800966c:	fb03 f202 	mul.w	r2, r3, r2
 8009670:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800967a:	4413      	add	r3, r2
 800967c:	edd3 6a00 	vldr	s13, [r3]
 8009680:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009688:	4413      	add	r3, r2
 800968a:	edd3 7a00 	vldr	s15, [r3]
 800968e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009694:	69da      	ldr	r2, [r3, #28]
 8009696:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096a2:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 80096a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096aa:	3301      	adds	r3, #1
 80096ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d3cd      	bcc.n	8009656 <BP_ANN+0x76>
			}
			net->output[i] = net->output[i] + bias[i];
 80096ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096bc:	69da      	ldr	r2, [r3, #28]
 80096be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	ed93 7a00 	vldr	s14, [r3]
 80096ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80096d4:	4413      	add	r3, r2
 80096d6:	edd3 7a00 	vldr	s15, [r3]
 80096da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096dc:	69da      	ldr	r2, [r3, #28]
 80096de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096ea:	edc3 7a00 	vstr	s15, [r3]
			delta[i] = (output[i]-net->output_activation_function(net->output[i])) * net->output_activation_derivative(net->output[i]);
 80096ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096f6:	4413      	add	r3, r2
 80096f8:	ed93 8a00 	vldr	s16, [r3]
 80096fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009702:	69d1      	ldr	r1, [r2, #28]
 8009704:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009708:	0092      	lsls	r2, r2, #2
 800970a:	440a      	add	r2, r1
 800970c:	edd2 7a00 	vldr	s15, [r2]
 8009710:	eeb0 0a67 	vmov.f32	s0, s15
 8009714:	4798      	blx	r3
 8009716:	eef0 7a40 	vmov.f32	s15, s0
 800971a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800971e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009724:	69d1      	ldr	r1, [r2, #28]
 8009726:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800972a:	0092      	lsls	r2, r2, #2
 800972c:	440a      	add	r2, r1
 800972e:	edd2 7a00 	vldr	s15, [r2]
 8009732:	eeb0 0a67 	vmov.f32	s0, s15
 8009736:	4798      	blx	r3
 8009738:	eef0 7a40 	vmov.f32	s15, s0
 800973c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009746:	4413      	add	r3, r2
 8009748:	ee68 7a27 	vmul.f32	s15, s16, s15
 800974c:	edc3 7a00 	vstr	s15, [r3]
			net->output[i] = net->output_activation_function(net->output[i]);
 8009750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009756:	69d1      	ldr	r1, [r2, #28]
 8009758:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800975c:	0092      	lsls	r2, r2, #2
 800975e:	440a      	add	r2, r1
 8009760:	edd2 7a00 	vldr	s15, [r2]
 8009764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009766:	69d1      	ldr	r1, [r2, #28]
 8009768:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800976c:	0092      	lsls	r2, r2, #2
 800976e:	188c      	adds	r4, r1, r2
 8009770:	eeb0 0a67 	vmov.f32	s0, s15
 8009774:	4798      	blx	r3
 8009776:	eef0 7a40 	vmov.f32	s15, s0
 800977a:	edc4 7a00 	vstr	s15, [r4]
			bias[i] = bias[i] + delta[i]*net->beta;
 800977e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009788:	4413      	add	r3, r2
 800978a:	ed93 7a00 	vldr	s14, [r3]
 800978e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009798:	4413      	add	r3, r2
 800979a:	edd3 6a00 	vldr	s13, [r3]
 800979e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80097a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097b2:	4413      	add	r3, r2
 80097b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097b8:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 80097bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097c0:	3301      	adds	r3, #1
 80097c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80097cc:	429a      	cmp	r2, r3
 80097ce:	f4ff af35 	bcc.w	800963c <BP_ANN+0x5c>
		}

		float dEdW[DIM[0]*DIM[1]];
 80097d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097d6:	fb02 f103 	mul.w	r1, r2, r3
 80097da:	460b      	mov	r3, r1
 80097dc:	3b01      	subs	r3, #1
 80097de:	66bb      	str	r3, [r7, #104]	; 0x68
 80097e0:	2300      	movs	r3, #0
 80097e2:	468a      	mov	sl, r1
 80097e4:	469b      	mov	fp, r3
 80097e6:	f04f 0200 	mov.w	r2, #0
 80097ea:	f04f 0300 	mov.w	r3, #0
 80097ee:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80097f2:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80097f6:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80097fa:	2300      	movs	r3, #0
 80097fc:	4688      	mov	r8, r1
 80097fe:	4699      	mov	r9, r3
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800980c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009810:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009814:	008b      	lsls	r3, r1, #2
 8009816:	3307      	adds	r3, #7
 8009818:	08db      	lsrs	r3, r3, #3
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	ebad 0d03 	sub.w	sp, sp, r3
 8009820:	ab04      	add	r3, sp, #16
 8009822:	3303      	adds	r3, #3
 8009824:	089b      	lsrs	r3, r3, #2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	667b      	str	r3, [r7, #100]	; 0x64
		for(i = 0; i < DIM[0]; i++){
 800982a:	2300      	movs	r3, #0
 800982c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009830:	e030      	b.n	8009894 <BP_ANN+0x2b4>
			for(j = 0; j < DIM[1]; j++){
 8009832:	2300      	movs	r3, #0
 8009834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009838:	e022      	b.n	8009880 <BP_ANN+0x2a0>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 800983a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009844:	4413      	add	r3, r2
 8009846:	ed93 7a00 	vldr	s14, [r3]
 800984a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009852:	4413      	add	r3, r2
 8009854:	edd3 7a00 	vldr	s15, [r3]
 8009858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800985a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800985e:	fb03 f202 	mul.w	r2, r3, r2
 8009862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009866:	4413      	add	r3, r2
 8009868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8009876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800987a:	3301      	adds	r3, #1
 800987c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009882:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009886:	429a      	cmp	r2, r3
 8009888:	d3d7      	bcc.n	800983a <BP_ANN+0x25a>
		for(i = 0; i < DIM[0]; i++){
 800988a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800988e:	3301      	adds	r3, #1
 8009890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009896:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800989a:	429a      	cmp	r2, r3
 800989c:	d3c9      	bcc.n	8009832 <BP_ANN+0x252>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800989e:	2300      	movs	r3, #0
 80098a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098a4:	e03f      	b.n	8009926 <BP_ANN+0x346>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 80098a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80098a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	ed93 7a00 	vldr	s14, [r3]
 80098b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80098ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80098c8:	4413      	add	r3, r2
 80098ca:	edd3 6a00 	vldr	s13, [r3]
 80098ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80098d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80098e2:	4413      	add	r3, r2
 80098e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098e8:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 80098ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098f4:	4413      	add	r3, r2
 80098f6:	ed93 7a00 	vldr	s14, [r3]
 80098fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009904:	4413      	add	r3, r2
 8009906:	edd3 7a00 	vldr	s15, [r3]
 800990a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009912:	4413      	add	r3, r2
 8009914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009918:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 800991c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009920:	3301      	adds	r3, #1
 8009922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009932:	429a      	cmp	r2, r3
 8009934:	d3b7      	bcc.n	80098a6 <BP_ANN+0x2c6>
 8009936:	46ad      	mov	sp, r5
 8009938:	e305      	b.n	8009f46 <BP_ANN+0x966>
		}
		return;
	}
	else{
 800993a:	466b      	mov	r3, sp
 800993c:	461e      	mov	r6, r3
		float a[DIM[0]];
 800993e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009940:	460b      	mov	r3, r1
 8009942:	3b01      	subs	r3, #1
 8009944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009948:	2300      	movs	r3, #0
 800994a:	460c      	mov	r4, r1
 800994c:	461d      	mov	r5, r3
 800994e:	f04f 0200 	mov.w	r2, #0
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	016b      	lsls	r3, r5, #5
 8009958:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800995c:	0162      	lsls	r2, r4, #5
 800995e:	2300      	movs	r3, #0
 8009960:	6439      	str	r1, [r7, #64]	; 0x40
 8009962:	647b      	str	r3, [r7, #68]	; 0x44
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	f04f 0300 	mov.w	r3, #0
 800996c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8009970:	4628      	mov	r0, r5
 8009972:	0143      	lsls	r3, r0, #5
 8009974:	4620      	mov	r0, r4
 8009976:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800997a:	4620      	mov	r0, r4
 800997c:	0142      	lsls	r2, r0, #5
 800997e:	008b      	lsls	r3, r1, #2
 8009980:	3307      	adds	r3, #7
 8009982:	08db      	lsrs	r3, r3, #3
 8009984:	00db      	lsls	r3, r3, #3
 8009986:	ebad 0d03 	sub.w	sp, sp, r3
 800998a:	ab04      	add	r3, sp, #16
 800998c:	3303      	adds	r3, #3
 800998e:	089b      	lsrs	r3, r3, #2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		float d[DIM[0]];
 8009996:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009998:	460b      	mov	r3, r1
 800999a:	3b01      	subs	r3, #1
 800999c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099a0:	2300      	movs	r3, #0
 80099a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099a6:	f04f 0200 	mov.w	r2, #0
 80099aa:	f04f 0300 	mov.w	r3, #0
 80099ae:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80099b2:	4628      	mov	r0, r5
 80099b4:	0143      	lsls	r3, r0, #5
 80099b6:	4620      	mov	r0, r4
 80099b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80099bc:	4620      	mov	r0, r4
 80099be:	0142      	lsls	r2, r0, #5
 80099c0:	2300      	movs	r3, #0
 80099c2:	6339      	str	r1, [r7, #48]	; 0x30
 80099c4:	637b      	str	r3, [r7, #52]	; 0x34
 80099c6:	f04f 0200 	mov.w	r2, #0
 80099ca:	f04f 0300 	mov.w	r3, #0
 80099ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80099d2:	4628      	mov	r0, r5
 80099d4:	0143      	lsls	r3, r0, #5
 80099d6:	4620      	mov	r0, r4
 80099d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80099dc:	4620      	mov	r0, r4
 80099de:	0142      	lsls	r2, r0, #5
 80099e0:	008b      	lsls	r3, r1, #2
 80099e2:	3307      	adds	r3, #7
 80099e4:	08db      	lsrs	r3, r3, #3
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	ebad 0d03 	sub.w	sp, sp, r3
 80099ec:	ab04      	add	r3, sp, #16
 80099ee:	3303      	adds	r3, #3
 80099f0:	089b      	lsrs	r3, r3, #2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		for(i = 0; i < DIM[0]; i++){
 80099f8:	2300      	movs	r3, #0
 80099fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80099fe:	e08b      	b.n	8009b18 <BP_ANN+0x538>
			a[i] = 0.0;
 8009a00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	441a      	add	r2, r3
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	6013      	str	r3, [r2, #0]
			for(j = 0; j < DIM[1]; j++){
 8009a12:	2300      	movs	r3, #0
 8009a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a18:	e02c      	b.n	8009a74 <BP_ANN+0x494>
				a[i] += weights[(DIM[1]*i)+j]*input[j];
 8009a1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	ed93 7a00 	vldr	s14, [r3]
 8009a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a30:	fb03 f202 	mul.w	r2, r3, r2
 8009a34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a38:	4413      	add	r3, r2
 8009a3a:	009a      	lsls	r2, r3, #2
 8009a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a3e:	4413      	add	r3, r2
 8009a40:	edd3 6a00 	vldr	s13, [r3]
 8009a44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a48:	009a      	lsls	r2, r3, #2
 8009a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4c:	4413      	add	r3, r2
 8009a4e:	edd3 7a00 	vldr	s15, [r3]
 8009a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8009a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a6e:	3301      	adds	r3, #1
 8009a70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d3cd      	bcc.n	8009a1a <BP_ANN+0x43a>
			}
			a[i] += bias[i];
 8009a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	ed93 7a00 	vldr	s14, [r3]
 8009a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a92:	009a      	lsls	r2, r3, #2
 8009a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a98:	4413      	add	r3, r2
 8009a9a:	edd3 7a00 	vldr	s15, [r3]
 8009a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	edc3 7a00 	vstr	s15, [r3]
			d[i] = net->hidden_activation_derivative(a[i]);
 8009ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	edd3 7a00 	vldr	s15, [r3]
 8009ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8009aca:	4788      	blx	r1
 8009acc:	eef0 7a40 	vmov.f32	s15, s0
 8009ad0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009ad4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	edc3 7a00 	vstr	s15, [r3]
			a[i] = net->hidden_activation_function(a[i]);
 8009ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009ae4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	edd3 7a00 	vldr	s15, [r3]
 8009af4:	eeb0 0a67 	vmov.f32	s0, s15
 8009af8:	4788      	blx	r1
 8009afa:	eef0 7a40 	vmov.f32	s15, s0
 8009afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 8009b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b12:	3301      	adds	r3, #1
 8009b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	f4ff af6e 	bcc.w	8009a00 <BP_ANN+0x420>
		}

		unsigned int DIM1 = net->topology[net->n_layers - depth + 1];
 8009b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b26:	68d9      	ldr	r1, [r3, #12]
 8009b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	3301      	adds	r3, #1
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		float prev_delta[DIM1];
 8009b3e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009b42:	460b      	mov	r3, r1
 8009b44:	3b01      	subs	r3, #1
 8009b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b50:	f04f 0200 	mov.w	r2, #0
 8009b54:	f04f 0300 	mov.w	r3, #0
 8009b58:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	0143      	lsls	r3, r0, #5
 8009b60:	4620      	mov	r0, r4
 8009b62:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b66:	4620      	mov	r0, r4
 8009b68:	0142      	lsls	r2, r0, #5
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6239      	str	r1, [r7, #32]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	0143      	lsls	r3, r0, #5
 8009b80:	4620      	mov	r0, r4
 8009b82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b86:	4620      	mov	r0, r4
 8009b88:	0142      	lsls	r2, r0, #5
 8009b8a:	008b      	lsls	r3, r1, #2
 8009b8c:	3307      	adds	r3, #7
 8009b8e:	08db      	lsrs	r3, r3, #3
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	ebad 0d03 	sub.w	sp, sp, r3
 8009b96:	ab04      	add	r3, sp, #16
 8009b98:	3303      	adds	r3, #3
 8009b9a:	089b      	lsrs	r3, r3, #2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		unsigned int weight_iter = DIM[0] * DIM[1];
 8009ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ba6:	fb02 f303 	mul.w	r3, r2, r3
 8009baa:	67fb      	str	r3, [r7, #124]	; 0x7c

		float next_weights_T[DIM[0]*DIM1];
 8009bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009bb2:	fb02 f103 	mul.w	r1, r2, r3
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61b9      	str	r1, [r7, #24]
 8009bc0:	61fb      	str	r3, [r7, #28]
 8009bc2:	f04f 0200 	mov.w	r2, #0
 8009bc6:	f04f 0300 	mov.w	r3, #0
 8009bca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8009bce:	4628      	mov	r0, r5
 8009bd0:	0143      	lsls	r3, r0, #5
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009bd8:	4620      	mov	r0, r4
 8009bda:	0142      	lsls	r2, r0, #5
 8009bdc:	2300      	movs	r3, #0
 8009bde:	6139      	str	r1, [r7, #16]
 8009be0:	617b      	str	r3, [r7, #20]
 8009be2:	f04f 0200 	mov.w	r2, #0
 8009be6:	f04f 0300 	mov.w	r3, #0
 8009bea:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009bee:	4628      	mov	r0, r5
 8009bf0:	0143      	lsls	r3, r0, #5
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	0142      	lsls	r2, r0, #5
 8009bfc:	008b      	lsls	r3, r1, #2
 8009bfe:	3307      	adds	r3, #7
 8009c00:	08db      	lsrs	r3, r3, #3
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	ebad 0d03 	sub.w	sp, sp, r3
 8009c08:	ab04      	add	r3, sp, #16
 8009c0a:	3303      	adds	r3, #3
 8009c0c:	089b      	lsrs	r3, r3, #2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	677b      	str	r3, [r7, #116]	; 0x74
		unsigned int iter = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		for(i = 0; i < DIM[0]; i++){
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c1e:	e02c      	b.n	8009c7a <BP_ANN+0x69a>
			for(j = 0; j < DIM1; j++){
 8009c20:	2300      	movs	r3, #0
 8009c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c26:	e01d      	b.n	8009c64 <BP_ANN+0x684>
				next_weights_T[iter] = weights[(DIM[0]*j)+i+weight_iter];
 8009c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009c2e:	fb03 f202 	mul.w	r2, r3, r2
 8009c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c36:	441a      	add	r2, r3
 8009c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c40:	4413      	add	r3, r2
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	601a      	str	r2, [r3, #0]
				iter++;
 8009c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c54:	3301      	adds	r3, #1
 8009c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			for(j = 0; j < DIM1; j++){
 8009c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c5e:	3301      	adds	r3, #1
 8009c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c64:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d3db      	bcc.n	8009c28 <BP_ANN+0x648>
		for(i = 0; i < DIM[0]; i++){
 8009c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c74:	3301      	adds	r3, #1
 8009c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c7c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d3cd      	bcc.n	8009c20 <BP_ANN+0x640>
			}
		}

		BP_ANN(net, a, output, &weights[weight_iter], &velocity[weight_iter], &bias[DIM[0]], prev_delta, depth-1);
 8009c84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c8a:	18d0      	adds	r0, r2, r3
 8009c8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009c94:	4413      	add	r3, r2
 8009c96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c98:	0092      	lsls	r2, r2, #2
 8009c9a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8009c9e:	440a      	add	r2, r1
 8009ca0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009ca4:	3901      	subs	r1, #1
 8009ca6:	9103      	str	r1, [sp, #12]
 8009ca8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009cac:	9102      	str	r1, [sp, #8]
 8009cae:	9201      	str	r2, [sp, #4]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cb6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8009cba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009cbc:	f7ff fc90 	bl	80095e0 <BP_ANN>

		for(i = 0; i < DIM[0]; i++){
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009cc6:	e07f      	b.n	8009dc8 <BP_ANN+0x7e8>
			delta[i] = 0;
 8009cc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f04f 0200 	mov.w	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
			for(j = 0; j < DIM1; j++){
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ce0:	e02e      	b.n	8009d40 <BP_ANN+0x760>
				delta[i] += next_weights_T[(DIM1*i)+j]*prev_delta[j];
 8009ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009cec:	4413      	add	r3, r2
 8009cee:	ed93 7a00 	vldr	s14, [r3]
 8009cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cf6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009cfa:	fb03 f202 	mul.w	r2, r3, r2
 8009cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d02:	4413      	add	r3, r2
 8009d04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	edd3 6a00 	vldr	s13, [r3]
 8009d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	edd3 7a00 	vldr	s15, [r3]
 8009d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d2c:	4413      	add	r3, r2
 8009d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d32:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM1; j++){
 8009d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d40:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d3ca      	bcc.n	8009ce2 <BP_ANN+0x702>
			}
			delta[i] = delta[i]*d[i];
 8009d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d56:	4413      	add	r3, r2
 8009d58:	ed93 7a00 	vldr	s14, [r3]
 8009d5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009d60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	edd3 7a00 	vldr	s15, [r3]
 8009d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d76:	4413      	add	r3, r2
 8009d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7c:	edc3 7a00 	vstr	s15, [r3]
			bias[i] = bias[i] + delta[i]*net->beta;
 8009d80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009d8a:	4413      	add	r3, r2
 8009d8c:	ed93 7a00 	vldr	s14, [r3]
 8009d90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d9a:	4413      	add	r3, r2
 8009d9c:	edd3 6a00 	vldr	s13, [r3]
 8009da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009da2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009db4:	4413      	add	r3, r2
 8009db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dba:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 8009dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	f4ff af7a 	bcc.w	8009cc8 <BP_ANN+0x6e8>
		}
		float dEdW[DIM[0]*DIM[1]];
 8009dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dd8:	fb02 f103 	mul.w	r1, r2, r3
 8009ddc:	460b      	mov	r3, r1
 8009dde:	3b01      	subs	r3, #1
 8009de0:	673b      	str	r3, [r7, #112]	; 0x70
 8009de2:	2300      	movs	r3, #0
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	f04f 0200 	mov.w	r2, #0
 8009dec:	f04f 0300 	mov.w	r3, #0
 8009df0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009df4:	4628      	mov	r0, r5
 8009df6:	0143      	lsls	r3, r0, #5
 8009df8:	4620      	mov	r0, r4
 8009dfa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009dfe:	4620      	mov	r0, r4
 8009e00:	0142      	lsls	r2, r0, #5
 8009e02:	2300      	movs	r3, #0
 8009e04:	6039      	str	r1, [r7, #0]
 8009e06:	607b      	str	r3, [r7, #4]
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	f04f 0300 	mov.w	r3, #0
 8009e10:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e14:	4628      	mov	r0, r5
 8009e16:	0143      	lsls	r3, r0, #5
 8009e18:	4620      	mov	r0, r4
 8009e1a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009e1e:	4620      	mov	r0, r4
 8009e20:	0142      	lsls	r2, r0, #5
 8009e22:	008b      	lsls	r3, r1, #2
 8009e24:	3307      	adds	r3, #7
 8009e26:	08db      	lsrs	r3, r3, #3
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	ebad 0d03 	sub.w	sp, sp, r3
 8009e2e:	ab04      	add	r3, sp, #16
 8009e30:	3303      	adds	r3, #3
 8009e32:	089b      	lsrs	r3, r3, #2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(i = 0; i < DIM[0]; i++){
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e3e:	e030      	b.n	8009ea2 <BP_ANN+0x8c2>
			for(j = 0; j < DIM[1]; j++){
 8009e40:	2300      	movs	r3, #0
 8009e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e46:	e022      	b.n	8009e8e <BP_ANN+0x8ae>
				dEdW[(DIM[1]*i)+j] = delta[i]*input[j];
 8009e48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e52:	4413      	add	r3, r2
 8009e54:	ed93 7a00 	vldr	s14, [r3]
 8009e58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e60:	4413      	add	r3, r2
 8009e62:	edd3 7a00 	vldr	s15, [r3]
 8009e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e68:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009e6c:	fb03 f202 	mul.w	r2, r3, r2
 8009e70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e74:	4413      	add	r3, r2
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	edc3 7a00 	vstr	s15, [r3]
			for(j = 0; j < DIM[1]; j++){
 8009e84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e88:	3301      	adds	r3, #1
 8009e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e90:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d3d7      	bcc.n	8009e48 <BP_ANN+0x868>
		for(i = 0; i < DIM[0]; i++){
 8009e98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ea4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d3c9      	bcc.n	8009e40 <BP_ANN+0x860>
			}
		}
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009eb2:	e03f      	b.n	8009f34 <BP_ANN+0x954>
			velocity[i] = dEdW[i]*net->eta - velocity[i]*net->alpha;
 8009eb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	ed93 7a00 	vldr	s14, [r3]
 8009ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ec4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009ed6:	4413      	add	r3, r2
 8009ed8:	edd3 6a00 	vldr	s13, [r3]
 8009edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ede:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009ef0:	4413      	add	r3, r2
 8009ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ef6:	edc3 7a00 	vstr	s15, [r3]
			weights[i] = weights[i] + velocity[i];
 8009efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f02:	4413      	add	r3, r2
 8009f04:	ed93 7a00 	vldr	s14, [r3]
 8009f08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009f12:	4413      	add	r3, r2
 8009f14:	edd3 7a00 	vldr	s15, [r3]
 8009f18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f20:	4413      	add	r3, r2
 8009f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f26:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]*DIM[1]; i++){
 8009f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f38:	fb02 f303 	mul.w	r3, r2, r3
 8009f3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d3b7      	bcc.n	8009eb4 <BP_ANN+0x8d4>
 8009f44:	46b5      	mov	sp, r6
		}
		return;
	}
}
 8009f46:	37ac      	adds	r7, #172	; 0xac
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	ecbd 8b02 	vpop	{d8}
 8009f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f52 <train_ann>:

//-----ANN-----


void train_ann(ANN *net, float *input, float *output){
 8009f52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f56:	b08b      	sub	sp, #44	; 0x2c
 8009f58:	af04      	add	r7, sp, #16
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	466b      	mov	r3, sp
 8009f62:	461e      	mov	r6, r3
	float delta[net->topology[1]];
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	6819      	ldr	r1, [r3, #0]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	2300      	movs	r3, #0
 8009f74:	4688      	mov	r8, r1
 8009f76:	4699      	mov	r9, r3
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	f04f 0300 	mov.w	r3, #0
 8009f80:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8009f84:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009f88:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	461d      	mov	r5, r3
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	f04f 0300 	mov.w	r3, #0
 8009f9a:	016b      	lsls	r3, r5, #5
 8009f9c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009fa0:	0162      	lsls	r2, r4, #5
 8009fa2:	008b      	lsls	r3, r1, #2
 8009fa4:	3307      	adds	r3, #7
 8009fa6:	08db      	lsrs	r3, r3, #3
 8009fa8:	00db      	lsls	r3, r3, #3
 8009faa:	ebad 0d03 	sub.w	sp, sp, r3
 8009fae:	ab04      	add	r3, sp, #16
 8009fb0:	3303      	adds	r3, #3
 8009fb2:	089b      	lsrs	r3, r3, #2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	613b      	str	r3, [r7, #16]
	BP_ANN(net, input, output, net->weights, net->dedw, net->bias, delta, net->n_layers-1);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	6892      	ldr	r2, [r2, #8]
 8009fc4:	68f9      	ldr	r1, [r7, #12]
 8009fc6:	6909      	ldr	r1, [r1, #16]
 8009fc8:	3901      	subs	r1, #1
 8009fca:	9103      	str	r1, [sp, #12]
 8009fcc:	6939      	ldr	r1, [r7, #16]
 8009fce:	9102      	str	r1, [sp, #8]
 8009fd0:	9201      	str	r2, [sp, #4]
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68b9      	ldr	r1, [r7, #8]
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7ff fb00 	bl	80095e0 <BP_ANN>
 8009fe0:	46b5      	mov	sp, r6
}
 8009fe2:	bf00      	nop
 8009fe4:	371c      	adds	r7, #28
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009fec <FP_ANN>:

void FP_ANN(ANN *net, float *input, unsigned int depth, float *weights){
 8009fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	b08b      	sub	sp, #44	; 0x2c
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60f8      	str	r0, [r7, #12]
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	603b      	str	r3, [r7, #0]
	unsigned int DIM[2] = {net->topology[net->n_layers - depth], net->topology[net->n_layers - depth - 1]};
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	68da      	ldr	r2, [r3, #12]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6919      	ldr	r1, [r3, #16]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	1acb      	subs	r3, r1, r3
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	613b      	str	r3, [r7, #16]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6919      	ldr	r1, [r3, #16]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	1acb      	subs	r3, r1, r3
 800a01c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a020:	3b01      	subs	r3, #1
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	617b      	str	r3, [r7, #20]
	unsigned int i,k;

	if(depth == 1){
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d15d      	bne.n	800a0ec <FP_ANN+0x100>
		for(i = 0; i < DIM[0]; i++){
 800a030:	2300      	movs	r3, #0
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
 800a034:	e055      	b.n	800a0e2 <FP_ANN+0xf6>
			net->output[i] = 0.0;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	69da      	ldr	r2, [r3, #28]
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	f04f 0200 	mov.w	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 800a046:	2300      	movs	r3, #0
 800a048:	623b      	str	r3, [r7, #32]
 800a04a:	e025      	b.n	800a098 <FP_ANN+0xac>
				net->output[i] += weights[(DIM[1]*i)+k]*input[k];
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	69da      	ldr	r2, [r3, #28]
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	ed93 7a00 	vldr	s14, [r3]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05e:	fb03 f202 	mul.w	r2, r3, r2
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	4413      	add	r3, r2
 800a06c:	edd3 6a00 	vldr	s13, [r3]
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	4413      	add	r3, r2
 800a078:	edd3 7a00 	vldr	s15, [r3]
 800a07c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	69da      	ldr	r2, [r3, #28]
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a08e:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	3301      	adds	r3, #1
 800a096:	623b      	str	r3, [r7, #32]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	6a3a      	ldr	r2, [r7, #32]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d3d5      	bcc.n	800a04c <FP_ANN+0x60>
			}
			net->output[i] = net->output_activation_function(net->output[i] + net->bias[i]);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	69d1      	ldr	r1, [r2, #28]
 800a0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	440a      	add	r2, r1
 800a0ae:	ed92 7a00 	vldr	s14, [r2]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	6891      	ldr	r1, [r2, #8]
 800a0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b8:	0092      	lsls	r2, r2, #2
 800a0ba:	440a      	add	r2, r1
 800a0bc:	edd2 7a00 	vldr	s15, [r2]
 800a0c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	69d1      	ldr	r1, [r2, #28]
 800a0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ca:	0092      	lsls	r2, r2, #2
 800a0cc:	188c      	adds	r4, r1, r2
 800a0ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a0d2:	4798      	blx	r3
 800a0d4:	eef0 7a40 	vmov.f32	s15, s0
 800a0d8:	edc4 7a00 	vstr	s15, [r4]
		for(i = 0; i < DIM[0]; i++){
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	3301      	adds	r3, #1
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d3a5      	bcc.n	800a036 <FP_ANN+0x4a>
		}
		return;
 800a0ea:	e090      	b.n	800a20e <FP_ANN+0x222>
	}
	else{
 800a0ec:	466b      	mov	r3, sp
 800a0ee:	461e      	mov	r6, r3
		float a[DIM[0]];
 800a0f0:	6939      	ldr	r1, [r7, #16]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	61fb      	str	r3, [r7, #28]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4688      	mov	r8, r1
 800a0fc:	4699      	mov	r9, r3
 800a0fe:	f04f 0200 	mov.w	r2, #0
 800a102:	f04f 0300 	mov.w	r3, #0
 800a106:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800a10a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800a10e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800a112:	2300      	movs	r3, #0
 800a114:	460c      	mov	r4, r1
 800a116:	461d      	mov	r5, r3
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	f04f 0300 	mov.w	r3, #0
 800a120:	016b      	lsls	r3, r5, #5
 800a122:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800a126:	0162      	lsls	r2, r4, #5
 800a128:	008b      	lsls	r3, r1, #2
 800a12a:	3307      	adds	r3, #7
 800a12c:	08db      	lsrs	r3, r3, #3
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	ebad 0d03 	sub.w	sp, sp, r3
 800a134:	466b      	mov	r3, sp
 800a136:	3303      	adds	r3, #3
 800a138:	089b      	lsrs	r3, r3, #2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	61bb      	str	r3, [r7, #24]
		for(i = 0; i < DIM[0]; i++){
 800a13e:	2300      	movs	r3, #0
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
 800a142:	e050      	b.n	800a1e6 <FP_ANN+0x1fa>
			a[i] = 0.0;
 800a144:	69ba      	ldr	r2, [r7, #24]
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	601a      	str	r2, [r3, #0]
			for(k = 0; k < DIM[1]; k++){
 800a152:	2300      	movs	r3, #0
 800a154:	623b      	str	r3, [r7, #32]
 800a156:	e023      	b.n	800a1a0 <FP_ANN+0x1b4>
				a[i] += weights[(DIM[1]*i)+k]*input[k];
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	ed93 7a00 	vldr	s14, [r3]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a168:	fb03 f202 	mul.w	r2, r3, r2
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	4413      	add	r3, r2
 800a176:	edd3 6a00 	vldr	s13, [r3]
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	4413      	add	r3, r2
 800a182:	edd3 7a00 	vldr	s15, [r3]
 800a186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a18a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	edc3 7a00 	vstr	s15, [r3]
			for(k = 0; k < DIM[1]; k++){
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	3301      	adds	r3, #1
 800a19e:	623b      	str	r3, [r7, #32]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	6a3a      	ldr	r2, [r7, #32]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d3d7      	bcc.n	800a158 <FP_ANN+0x16c>
			}
			a[i] = net->hidden_activation_function(a[i] + net->bias[i]);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ac:	69b9      	ldr	r1, [r7, #24]
 800a1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b0:	0092      	lsls	r2, r2, #2
 800a1b2:	440a      	add	r2, r1
 800a1b4:	ed92 7a00 	vldr	s14, [r2]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	6891      	ldr	r1, [r2, #8]
 800a1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1be:	0092      	lsls	r2, r2, #2
 800a1c0:	440a      	add	r2, r1
 800a1c2:	edd2 7a00 	vldr	s15, [r2]
 800a1c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ca:	eeb0 0a67 	vmov.f32	s0, s15
 800a1ce:	4798      	blx	r3
 800a1d0:	eef0 7a40 	vmov.f32	s15, s0
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0; i < DIM[0]; i++){
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d3aa      	bcc.n	800a144 <FP_ANN+0x158>
			//if(depth == 2) printf("%f,", a[i]);
		}
		//if(depth == 2) printf("0\n");
		FP_ANN(net, a, depth-1, &weights[DIM[0]*DIM[1]]);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	1e59      	subs	r1, r3, #1
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	fb02 f303 	mul.w	r3, r2, r3
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	4413      	add	r3, r2
 800a200:	460a      	mov	r2, r1
 800a202:	69b9      	ldr	r1, [r7, #24]
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fef1 	bl	8009fec <FP_ANN>
 800a20a:	46b5      	mov	sp, r6
	}
	return;
 800a20c:	bf00      	nop
}
 800a20e:	372c      	adds	r7, #44	; 0x2c
 800a210:	46bd      	mov	sp, r7
 800a212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a216 <run_ann>:

void run_ann(ANN *net, float *input){
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
	FP_ANN(net, input, net->n_layers-1, net->weights);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	1e5a      	subs	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff fedd 	bl	8009fec <FP_ANN>
}
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <init_ann>:

void init_ann(ANN *net){
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
	fill_number(net->bias, net->n_bias, 0.1);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a2b4 <init_ann+0x78>
 800a250:	4619      	mov	r1, r3
 800a252:	4610      	mov	r0, r2
 800a254:	f000 f855 	bl	800a302 <fill_number>
	fill_zeros(net->dedw, net->n_weights);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f000 f830 	bl	800a2c8 <fill_zeros>

	if(net->output_activation_function == &relu) net->output_activation_derivative = &relu_derivative;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	4a12      	ldr	r2, [pc, #72]	; (800a2b8 <init_ann+0x7c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d103      	bne.n	800a27a <init_ann+0x3e>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <init_ann+0x80>)
 800a276:	625a      	str	r2, [r3, #36]	; 0x24
 800a278:	e007      	b.n	800a28a <init_ann+0x4e>
	else if(net->output_activation_function == &relu2) net->output_activation_derivative = &relu2_derivative;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	4a10      	ldr	r2, [pc, #64]	; (800a2c0 <init_ann+0x84>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d102      	bne.n	800a28a <init_ann+0x4e>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a0f      	ldr	r2, [pc, #60]	; (800a2c4 <init_ann+0x88>)
 800a288:	625a      	str	r2, [r3, #36]	; 0x24

	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28e:	4a0a      	ldr	r2, [pc, #40]	; (800a2b8 <init_ann+0x7c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d103      	bne.n	800a29c <init_ann+0x60>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a09      	ldr	r2, [pc, #36]	; (800a2bc <init_ann+0x80>)
 800a298:	62da      	str	r2, [r3, #44]	; 0x2c
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}
 800a29a:	e007      	b.n	800a2ac <init_ann+0x70>
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <init_ann+0x84>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d102      	bne.n	800a2ac <init_ann+0x70>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <init_ann+0x88>)
 800a2aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	3dcccccd 	.word	0x3dcccccd
 800a2b8:	0800a341 	.word	0x0800a341
 800a2bc:	0800a481 	.word	0x0800a481
 800a2c0:	0800a3c9 	.word	0x0800a3c9
 800a2c4:	0800a4d1 	.word	0x0800a4d1

0800a2c8 <fill_zeros>:
	if(net->hidden_activation_function == &relu) net->hidden_activation_derivative = &relu_derivative;
	else if(net->hidden_activation_function == &relu2) net->hidden_activation_derivative = &relu2_derivative;
}

//-----Utility-----
void fill_zeros(float *v, unsigned int size){
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0; i < size; i++){ v[i] = 0.0; }
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	e009      	b.n	800a2ec <fill_zeros+0x24>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f04f 0200 	mov.w	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d8f1      	bhi.n	800a2d8 <fill_zeros+0x10>
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <fill_number>:
void fill_number(float *v, unsigned int size, float number){
 800a302:	b480      	push	{r7}
 800a304:	b087      	sub	sp, #28
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	ed87 0a01 	vstr	s0, [r7, #4]
	int i;
	for(i = 0; i < size; i++){ v[i] = number; }
 800a310:	2300      	movs	r3, #0
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e008      	b.n	800a328 <fill_number+0x26>
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	3301      	adds	r3, #1
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d8f2      	bhi.n	800a316 <fill_number+0x14>
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
	...

0800a340 <relu>:

//-----Activation Functions-----
float relu(float x){
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800a34a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a34e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a356:	d502      	bpl.n	800a35e <relu+0x1e>
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	e022      	b.n	800a3a4 <relu+0x64>
	else if(x > 1.0) return 0.1*x+0.93;
 800a35e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36e:	dd18      	ble.n	800a3a2 <relu+0x62>
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7f6 f8ed 	bl	8000550 <__aeabi_f2d>
 800a376:	a310      	add	r3, pc, #64	; (adr r3, 800a3b8 <relu+0x78>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7f6 f940 	bl	8000600 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4610      	mov	r0, r2
 800a386:	4619      	mov	r1, r3
 800a388:	a30d      	add	r3, pc, #52	; (adr r3, 800a3c0 <relu+0x80>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 ff81 	bl	8000294 <__adddf3>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4610      	mov	r0, r2
 800a398:	4619      	mov	r1, r3
 800a39a:	f7f6 fc09 	bl	8000bb0 <__aeabi_d2f>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	e000      	b.n	800a3a4 <relu+0x64>
	return x;
 800a3a2:	687b      	ldr	r3, [r7, #4]
}
 800a3a4:	ee07 3a90 	vmov	s15, r3
 800a3a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	f3af 8000 	nop.w
 800a3b8:	9999999a 	.word	0x9999999a
 800a3bc:	3fb99999 	.word	0x3fb99999
 800a3c0:	5c28f5c3 	.word	0x5c28f5c3
 800a3c4:	3fedc28f 	.word	0x3fedc28f

0800a3c8 <relu2>:

//Similar to Tanh
float relu2(float x){
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0)     return 0.1*x-0.93;
 800a3d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a3d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a3da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e2:	d518      	bpl.n	800a416 <relu2+0x4e>
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7f6 f8b3 	bl	8000550 <__aeabi_f2d>
 800a3ea:	a321      	add	r3, pc, #132	; (adr r3, 800a470 <relu2+0xa8>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f6 f906 	bl	8000600 <__aeabi_dmul>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	a31e      	add	r3, pc, #120	; (adr r3, 800a478 <relu2+0xb0>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff45 	bl	8000290 <__aeabi_dsub>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4610      	mov	r0, r2
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7f6 fbcf 	bl	8000bb0 <__aeabi_d2f>
 800a412:	4603      	mov	r3, r0
 800a414:	e022      	b.n	800a45c <relu2+0x94>
	else if(x > 1.0) return 0.1*x+0.93;
 800a416:	edd7 7a01 	vldr	s15, [r7, #4]
 800a41a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a41e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a426:	dd18      	ble.n	800a45a <relu2+0x92>
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7f6 f891 	bl	8000550 <__aeabi_f2d>
 800a42e:	a310      	add	r3, pc, #64	; (adr r3, 800a470 <relu2+0xa8>)
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	f7f6 f8e4 	bl	8000600 <__aeabi_dmul>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4610      	mov	r0, r2
 800a43e:	4619      	mov	r1, r3
 800a440:	a30d      	add	r3, pc, #52	; (adr r3, 800a478 <relu2+0xb0>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f5 ff25 	bl	8000294 <__adddf3>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4610      	mov	r0, r2
 800a450:	4619      	mov	r1, r3
 800a452:	f7f6 fbad 	bl	8000bb0 <__aeabi_d2f>
 800a456:	4603      	mov	r3, r0
 800a458:	e000      	b.n	800a45c <relu2+0x94>
	return x;
 800a45a:	687b      	ldr	r3, [r7, #4]
}
 800a45c:	ee07 3a90 	vmov	s15, r3
 800a460:	eeb0 0a67 	vmov.f32	s0, s15
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	f3af 8000 	nop.w
 800a470:	9999999a 	.word	0x9999999a
 800a474:	3fb99999 	.word	0x3fb99999
 800a478:	5c28f5c3 	.word	0x5c28f5c3
 800a47c:	3fedc28f 	.word	0x3fedc28f

0800a480 <relu_derivative>:

//-----Derivative Functions-----
float relu_derivative(float x){
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0.0) return 0.0;
 800a48a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a48e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a496:	d502      	bpl.n	800a49e <relu_derivative+0x1e>
 800a498:	f04f 0300 	mov.w	r3, #0
 800a49c:	e00c      	b.n	800a4b8 <relu_derivative+0x38>
	else if(x > 1.0) return 0.1;
 800a49e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a4a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ae:	dd01      	ble.n	800a4b4 <relu_derivative+0x34>
 800a4b0:	4b06      	ldr	r3, [pc, #24]	; (800a4cc <relu_derivative+0x4c>)
 800a4b2:	e001      	b.n	800a4b8 <relu_derivative+0x38>
	return 1.0;
 800a4b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
}
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eeb0 0a67 	vmov.f32	s0, s15
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	3dcccccd 	.word	0x3dcccccd

0800a4d0 <relu2_derivative>:
float relu2_derivative(float x){
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < -1.0) return 0.1;
 800a4da:	edd7 7a01 	vldr	s15, [r7, #4]
 800a4de:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a4e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ea:	d501      	bpl.n	800a4f0 <relu2_derivative+0x20>
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <relu2_derivative+0x4c>)
 800a4ee:	e00c      	b.n	800a50a <relu2_derivative+0x3a>
	else if(x > 1.0) return 0.1;
 800a4f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800a4f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a500:	dd01      	ble.n	800a506 <relu2_derivative+0x36>
 800a502:	4b06      	ldr	r3, [pc, #24]	; (800a51c <relu2_derivative+0x4c>)
 800a504:	e001      	b.n	800a50a <relu2_derivative+0x3a>
	return 1.0;
 800a506:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
}
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eeb0 0a67 	vmov.f32	s0, s15
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	3dcccccd 	.word	0x3dcccccd

0800a520 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 800a520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a524:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800a528:	af00      	add	r7, sp, #0
	int32_t i;
	uint32_t msTick, msTickPrev = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

	int32_t  result  = 0;
 800a530:	2300      	movs	r3, #0
 800a532:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

	unsigned int network_topology_ss[3] = { NUM_INPUTS, NUM_HIDDEN, NUM_OUTPUTS };
 800a536:	4aca      	ldr	r2, [pc, #808]	; (800a860 <main+0x340>)
 800a538:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800a53c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a53e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float dedw_ss[NUM_WEIGHTS];
	float bias_ss[NUM_BIAS];

	int32_t loc;

	number_weights_ss = NUM_WEIGHTS;
 800a542:	235a      	movs	r3, #90	; 0x5a
 800a544:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	number_outputs_ss = NUM_OUTPUTS;
 800a548:	2306      	movs	r3, #6
 800a54a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	number_bias_ss = NUM_BIAS;
 800a54e:	230f      	movs	r3, #15
 800a550:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	int32_t hasTrained;



	initialise_monitor_handles();	/*rtt*/
 800a554:	f003 ff2e 	bl	800e3b4 <initialise_monitor_handles>
       - Configure the Flash prefetch
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 3
       - Low Level Initialization
	 */
	HAL_Init();
 800a558:	f7fa f964 	bl	8004824 <HAL_Init>
	/* Enable the Instruction Cache */
	CACHE_Enable();
 800a55c:	f000 fa06 	bl	800a96c <CACHE_Enable>

	/* Configure the System clock to have a frequency of 160 MHz */
	SystemClock_Config();
 800a560:	f000 f992 	bl	800a888 <SystemClock_Config>

	/*
	 * Initialize User Button
	 */

	result = Ms_Button_Init();
 800a564:	f000 faea 	bl	800ab3c <Ms_Button_Init>
 800a568:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
	if (result < 0){
 800a56c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a570:	2b00      	cmp	r3, #0
 800a572:	da04      	bge.n	800a57e <main+0x5e>
		printf("Initialization Error %i\n", result);
 800a574:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 800a578:	48ba      	ldr	r0, [pc, #744]	; (800a864 <main+0x344>)
 800a57a:	f001 fb9b 	bl	800bcb4 <iprintf>
	}

	Ms_Init();
 800a57e:	f000 fb0d 	bl	800ab9c <Ms_Init>


	/* Initialize the Red LED */
	if (BSP_LED_Init(LED6) != BSP_ERROR_NONE) result--;
 800a582:	2000      	movs	r0, #0
 800a584:	f7f6 fb64 	bl	8000c50 <BSP_LED_Init>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d004      	beq.n	800a598 <main+0x78>
 800a58e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a592:	3b01      	subs	r3, #1
 800a594:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	/* Initialize the Green LED */
	if (BSP_LED_Init(LED7) != BSP_ERROR_NONE) result--;
 800a598:	2001      	movs	r0, #1
 800a59a:	f7f6 fb59 	bl	8000c50 <BSP_LED_Init>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <main+0x8e>
 800a5a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	/*
	 * Generate array of random weight values normalized to 1
	 * and with fixed seed
	 */

	printf("\n\nEmbeddedML State Machine Translation Motion Feature Extraction and Classification\n\n");
 800a5ae:	48ae      	ldr	r0, [pc, #696]	; (800a868 <main+0x348>)
 800a5b0:	f001 fbee 	bl	800bd90 <puts>

	printf("\n\nMotions Include 2 Segments\n");
 800a5b4:	48ad      	ldr	r0, [pc, #692]	; (800a86c <main+0x34c>)
 800a5b6:	f001 fbeb 	bl	800bd90 <puts>
	//EDIT - said 5 segments

	printf("\n\nEnsure Use of Level Surface for IoT Platform Motion\n\n");
 800a5ba:	48ad      	ldr	r0, [pc, #692]	; (800a870 <main+0x350>)
 800a5bc:	f001 fbe8 	bl	800bd90 <puts>

	Ms_Accel_Init();
 800a5c0:	f000 f9f2 	bl	800a9a8 <Ms_Accel_Init>

	/* Initialize the Red LED */
	if (BSP_LED_Init(LED6) != BSP_ERROR_NONE) result--;
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	f7f6 fb43 	bl	8000c50 <BSP_LED_Init>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d004      	beq.n	800a5da <main+0xba>
 800a5d0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	/* Initialize the Green LED */
	if (BSP_LED_Init(LED7) != BSP_ERROR_NONE) result--;
 800a5da:	2001      	movs	r0, #1
 800a5dc:	f7f6 fb38 	bl	8000c50 <BSP_LED_Init>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d004      	beq.n	800a5f0 <main+0xd0>
 800a5e6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

	for (i = 0; i < number_bias_ss; i++){
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a5f6:	e00f      	b.n	800a618 <main+0xf8>
		bias_ss[i] = 0.5;
 800a5f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a5fc:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 800a600:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800a60c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < number_bias_ss; i++){
 800a60e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a612:	3301      	adds	r3, #1
 800a614:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a618:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800a61c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a620:	429a      	cmp	r2, r3
 800a622:	dbe9      	blt.n	800a5f8 <main+0xd8>
	}
	for (i = 0; i < number_outputs_ss; i++){
 800a624:	2300      	movs	r3, #0
 800a626:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a62a:	e00e      	b.n	800a64a <main+0x12a>
		output_ss[i] = 0.0;
 800a62c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800a636:	443b      	add	r3, r7
 800a638:	3b4c      	subs	r3, #76	; 0x4c
 800a63a:	f04f 0200 	mov.w	r2, #0
 800a63e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < number_outputs_ss; i++){
 800a640:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a644:	3301      	adds	r3, #1
 800a646:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a64a:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800a64e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a652:	429a      	cmp	r2, r3
 800a654:	dbea      	blt.n	800a62c <main+0x10c>
	}
	for (i = 0; i < number_weights_ss; i++){
 800a656:	2300      	movs	r3, #0
 800a658:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a65c:	e00f      	b.n	800a67e <main+0x15e>
		dedw_ss[i] = 0.0;
 800a65e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a662:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 800a666:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	f04f 0200 	mov.w	r2, #0
 800a672:	601a      	str	r2, [r3, #0]
	for (i = 0; i < number_weights_ss; i++){
 800a674:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a678:	3301      	adds	r3, #1
 800a67a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a67e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800a682:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a686:	429a      	cmp	r2, r3
 800a688:	dbe9      	blt.n	800a65e <main+0x13e>
	/*
	 * Generate array of random weight values normalized to 1
	 * and with fixed seed
	 */

	srand(1);
 800a68a:	2001      	movs	r0, #1
 800a68c:	f001 f9e4 	bl	800ba58 <srand>

	float weights_initial_ss[number_weights_ss];
 800a690:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800a694:	1e4b      	subs	r3, r1, #1
 800a696:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800a69a:	460a      	mov	r2, r1
 800a69c:	2300      	movs	r3, #0
 800a69e:	4690      	mov	r8, r2
 800a6a0:	4699      	mov	r9, r3
 800a6a2:	f04f 0200 	mov.w	r2, #0
 800a6a6:	f04f 0300 	mov.w	r3, #0
 800a6aa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800a6ae:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800a6b2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800a6b6:	460a      	mov	r2, r1
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4614      	mov	r4, r2
 800a6bc:	461d      	mov	r5, r3
 800a6be:	f04f 0200 	mov.w	r2, #0
 800a6c2:	f04f 0300 	mov.w	r3, #0
 800a6c6:	016b      	lsls	r3, r5, #5
 800a6c8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800a6cc:	0162      	lsls	r2, r4, #5
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	3307      	adds	r3, #7
 800a6d4:	08db      	lsrs	r3, r3, #3
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	ebad 0d03 	sub.w	sp, sp, r3
 800a6dc:	466b      	mov	r3, sp
 800a6de:	3303      	adds	r3, #3
 800a6e0:	089b      	lsrs	r3, r3, #2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	for (i = 0; i < number_weights_ss; i++){
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a6ee:	e016      	b.n	800a71e <main+0x1fe>
		weights_initial_ss[i] = (float)rand()/RAND_MAX;
 800a6f0:	f001 f9e0 	bl	800bab4 <rand>
 800a6f4:	ee07 0a90 	vmov	s15, r0
 800a6f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6fc:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800a874 <main+0x354>
 800a700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a704:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800a708:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < number_weights_ss; i++){
 800a714:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a718:	3301      	adds	r3, #1
 800a71a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800a71e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800a722:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a726:	429a      	cmp	r2, r3
 800a728:	dbe2      	blt.n	800a6f0 <main+0x1d0>
	}
	ANN net_ss;
	net_ss.weights = weights_initial_ss;
 800a72a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a72e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a732:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800a736:	601a      	str	r2, [r3, #0]
	net_ss.dedw = dedw_ss;
 800a738:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a73c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a740:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800a744:	605a      	str	r2, [r3, #4]
	net_ss.bias = bias_ss;
 800a746:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a74a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a74e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a752:	609a      	str	r2, [r3, #8]
	net_ss.topology = network_topology_ss;
 800a754:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a758:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a75c:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 800a760:	60da      	str	r2, [r3, #12]
	net_ss.n_layers = NUM_LAYERS;
 800a762:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a766:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a76a:	2203      	movs	r2, #3
 800a76c:	611a      	str	r2, [r3, #16]
	net_ss.n_weights = number_weights_ss;
 800a76e:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800a772:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a776:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a77a:	615a      	str	r2, [r3, #20]
	net_ss.n_bias = number_bias_ss;
 800a77c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800a780:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a784:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a788:	619a      	str	r2, [r3, #24]
	net_ss.output = output_ss;
 800a78a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a78e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a792:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800a796:	61da      	str	r2, [r3, #28]

	net_ss.eta = 0.13;     //Learning Rate
 800a798:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a79c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a7a0:	4a35      	ldr	r2, [pc, #212]	; (800a878 <main+0x358>)
 800a7a2:	631a      	str	r2, [r3, #48]	; 0x30
	net_ss.beta = 0.01;    //Bias Learning Rate
 800a7a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a7a8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a7ac:	4a33      	ldr	r2, [pc, #204]	; (800a87c <main+0x35c>)
 800a7ae:	635a      	str	r2, [r3, #52]	; 0x34
	net_ss.alpha = 0.25;   //Momentum Coefficient
 800a7b0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a7b4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a7b8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800a7bc:	639a      	str	r2, [r3, #56]	; 0x38
	net_ss.output_activation_function = &relu2;
 800a7be:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a7c2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a7c6:	4a2e      	ldr	r2, [pc, #184]	; (800a880 <main+0x360>)
 800a7c8:	621a      	str	r2, [r3, #32]
	net_ss.hidden_activation_function = &relu2;
 800a7ca:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a7ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a7d2:	4a2b      	ldr	r2, [pc, #172]	; (800a880 <main+0x360>)
 800a7d4:	629a      	str	r2, [r3, #40]	; 0x28

	init_ann(&net_ss);
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fd2f 	bl	800a23c <init_ann>

	hasTrained = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220

	BSP_LED_Off(LED6);
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	f7f6 faa3 	bl	8000d30 <BSP_LED_Off>
	BSP_LED_Off(LED7);
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	f7f6 faa0 	bl	8000d30 <BSP_LED_Off>

	loc = -1;
 800a7f0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800a7f4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800a7f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7fc:	601a      	str	r2, [r3, #0]
	while (1) {
		/* Get sysTick value and check if it's time to execute the task */
		msTick = HAL_GetTick();
 800a7fe:	f7fa f889 	bl	8004914 <HAL_GetTick>
 800a802:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
		if (msTick % DATA_PERIOD_MS == 0 && msTickPrev != msTick) {
 800a806:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d114      	bne.n	800a83c <main+0x31c>
 800a812:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800a816:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d00e      	beq.n	800a83c <main+0x31c>
			msTickPrev = msTick;
 800a81e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a822:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
			if (hasTrained){
 800a826:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d006      	beq.n	800a83c <main+0x31c>
				Test_ANN_SM_Translation(&net_ss, &loc);
 800a82e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a832:	463b      	mov	r3, r7
 800a834:	4611      	mov	r1, r2
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fa36 	bl	8008ca8 <Test_ANN_SM_Translation>
			}
		}

		if (!hasTrained) {
 800a83c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1dc      	bne.n	800a7fe <main+0x2de>
			printf("Press User Button to Start Training\n");
 800a844:	480f      	ldr	r0, [pc, #60]	; (800a884 <main+0x364>)
 800a846:	f001 faa3 	bl	800bd90 <puts>
			User_Button_Wait();
 800a84a:	f000 f98b 	bl	800ab64 <User_Button_Wait>
			TrainOrientation_SM_Translation(&net_ss);
 800a84e:	463b      	mov	r3, r7
 800a850:	4618      	mov	r0, r3
 800a852:	f7fd fb79 	bl	8007f48 <TrainOrientation_SM_Translation>
			hasTrained = 1;
 800a856:	2301      	movs	r3, #1
 800a858:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		msTick = HAL_GetTick();
 800a85c:	e7cf      	b.n	800a7fe <main+0x2de>
 800a85e:	bf00      	nop
 800a860:	0800f8ac 	.word	0x0800f8ac
 800a864:	0800f7bc 	.word	0x0800f7bc
 800a868:	0800f7d8 	.word	0x0800f7d8
 800a86c:	0800f830 	.word	0x0800f830
 800a870:	0800f850 	.word	0x0800f850
 800a874:	4f000000 	.word	0x4f000000
 800a878:	3e051eb8 	.word	0x3e051eb8
 800a87c:	3c23d70a 	.word	0x3c23d70a
 800a880:	0800a3c9 	.word	0x0800a3c9
 800a884:	0800f888 	.word	0x0800f888

0800a888 <SystemClock_Config>:
 */



void SystemClock_Config(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b0a0      	sub	sp, #128	; 0x80
 800a88c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a88e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	605a      	str	r2, [r3, #4]
 800a898:	609a      	str	r2, [r3, #8]
 800a89a:	60da      	str	r2, [r3, #12]
 800a89c:	611a      	str	r2, [r3, #16]
 800a89e:	615a      	str	r2, [r3, #20]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a8a0:	f107 0308 	add.w	r3, r7, #8
 800a8a4:	2260      	movs	r2, #96	; 0x60
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 fa79 	bl	800bda0 <memset>

	/* Enable voltage range 1 for frequency above 100 Mhz */
	__HAL_RCC_PWR_CLK_ENABLE();
 800a8ae:	4b2e      	ldr	r3, [pc, #184]	; (800a968 <SystemClock_Config+0xe0>)
 800a8b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8b4:	4a2c      	ldr	r2, [pc, #176]	; (800a968 <SystemClock_Config+0xe0>)
 800a8b6:	f043 0304 	orr.w	r3, r3, #4
 800a8ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a8be:	4b2a      	ldr	r3, [pc, #168]	; (800a968 <SystemClock_Config+0xe0>)
 800a8c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	607b      	str	r3, [r7, #4]
 800a8ca:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a8cc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800a8d0:	f7fb fd8a 	bl	80063e8 <HAL_PWREx_ControlVoltageScaling>

	/* Switch to SMPS regulator instead of LDO */
	HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 800a8d4:	2002      	movs	r0, #2
 800a8d6:	f7fb fe09 	bl	80064ec <HAL_PWREx_ConfigSupply>

	__HAL_RCC_PWR_CLK_DISABLE();
 800a8da:	4b23      	ldr	r3, [pc, #140]	; (800a968 <SystemClock_Config+0xe0>)
 800a8dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8e0:	4a21      	ldr	r2, [pc, #132]	; (800a968 <SystemClock_Config+0xe0>)
 800a8e2:	f023 0304 	bic.w	r3, r3, #4
 800a8e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

	/* MSI Oscillator enabled at reset (4Mhz), activate PLL with MSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800a8ea:	2310      	movs	r3, #16
 800a8ec:	60bb      	str	r3, [r7, #8]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800a8f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800a8f8:	2310      	movs	r3, #16
 800a8fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800a900:	2301      	movs	r3, #1
 800a902:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800a904:	2300      	movs	r3, #0
 800a906:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 800a908:	2301      	movs	r3, #1
 800a90a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 80;
 800a90c:	2350      	movs	r3, #80	; 0x50
 800a90e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = 2;
 800a910:	2302      	movs	r3, #2
 800a912:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = 2;
 800a914:	2302      	movs	r3, #2
 800a916:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800a918:	2302      	movs	r3, #2
 800a91a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLFRACN= 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a920:	f107 0308 	add.w	r3, r7, #8
 800a924:	4618      	mov	r0, r3
 800a926:	f7fb fe31 	bl	800658c <HAL_RCC_OscConfig>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d000      	beq.n	800a932 <SystemClock_Config+0xaa>
	{
		/* Initialization Error */
		while(1);
 800a930:	e7fe      	b.n	800a930 <SystemClock_Config+0xa8>
	}

	/* Select PLL as system clock source and configure bus clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800a932:	231f      	movs	r3, #31
 800a934:	66bb      	str	r3, [r7, #104]	; 0x68
			RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_PCLK3);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a936:	2303      	movs	r3, #3
 800a938:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a93a:	2300      	movs	r3, #0
 800a93c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a93e:	2300      	movs	r3, #0
 800a940:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a942:	2300      	movs	r3, #0
 800a944:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800a946:	2300      	movs	r3, #0
 800a948:	67fb      	str	r3, [r7, #124]	; 0x7c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a94a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a94e:	2104      	movs	r1, #4
 800a950:	4618      	mov	r0, r3
 800a952:	f7fc fcf1 	bl	8007338 <HAL_RCC_ClockConfig>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d000      	beq.n	800a95e <SystemClock_Config+0xd6>
	{
		/* Initialization Error */
		while(1);
 800a95c:	e7fe      	b.n	800a95c <SystemClock_Config+0xd4>
	}
}
 800a95e:	bf00      	nop
 800a960:	3780      	adds	r7, #128	; 0x80
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	46020c00 	.word	0x46020c00

0800a96c <CACHE_Enable>:
 * @brief  Enable ICACHE with 1-way set-associative configuration.
 * @param  None
 * @retval None
 */
static void CACHE_Enable(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0
	/* Configure ICACHE associativity mode */
	HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY);
 800a970:	2000      	movs	r0, #0
 800a972:	f7fb fd09 	bl	8006388 <HAL_ICACHE_ConfigAssociativityMode>

	/* Enable ICACHE */
	HAL_ICACHE_Enable();
 800a976:	f7fb fd27 	bl	80063c8 <HAL_ICACHE_Enable>
}
 800a97a:	bf00      	nop
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	71fb      	strb	r3, [r7, #7]
	if (Button == BUTTON_USER)
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d102      	bne.n	800a996 <BSP_PB_Callback+0x16>
	{
		UserButtonPressed = SET;
 800a990:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <BSP_PB_Callback+0x24>)
 800a992:	2201      	movs	r2, #1
 800a994:	701a      	strb	r2, [r3, #0]
	}
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20000f20 	.word	0x20000f20

0800a9a8 <Ms_Accel_Init>:
	/* De-initialize function */
	if (BSP_MOTION_SENSOR_DeInit(0) != BSP_ERROR_NONE) result--;
}

int32_t  Ms_Accel_Init(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08c      	sub	sp, #48	; 0x30
 800a9ac:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t fullScale;

	/* Initialize function for Microaccelerometer */

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800a9b2:	2102      	movs	r1, #2
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	f7f6 ff1f 	bl	80017f8 <BSP_MOTION_SENSOR_Init>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d002      	beq.n	800a9c6 <Ms_Accel_Init+0x1e>
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 800a9c6:	f107 0310 	add.w	r3, r7, #16
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7f6 ff63 	bl	8001898 <BSP_MOTION_SENSOR_GetCapabilities>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <Ms_Accel_Init+0x36>
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 800a9de:	f107 030f 	add.w	r3, r7, #15
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	f7f6 ff8f 	bl	8001908 <BSP_MOTION_SENSOR_ReadID>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d002      	beq.n	800a9f6 <Ms_Accel_Init+0x4e>
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800a9f6:	2102      	movs	r1, #2
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	f7f6 ffbd 	bl	8001978 <BSP_MOTION_SENSOR_Enable>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <Ms_Accel_Init+0x62>
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	3b01      	subs	r3, #1
 800aa08:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 800aa0a:	2210      	movs	r2, #16
 800aa0c:	2102      	movs	r1, #2
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f7f7 fa06 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <Ms_Accel_Init+0x78>
 800aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800aa20:	463b      	mov	r3, r7
 800aa22:	461a      	mov	r2, r3
 800aa24:	2102      	movs	r1, #2
 800aa26:	2000      	movs	r0, #0
 800aa28:	f7f7 f996 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <Ms_Accel_Init+0x90>
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	3b01      	subs	r3, #1
 800aa36:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (fullScale != 16) result--;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2b10      	cmp	r3, #16
 800aa3c:	d002      	beq.n	800aa44 <Ms_Accel_Init+0x9c>
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	3b01      	subs	r3, #1
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 800aa44:	2202      	movs	r2, #2
 800aa46:	2102      	movs	r1, #2
 800aa48:	2000      	movs	r0, #0
 800aa4a:	f7f7 f9e9 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <Ms_Accel_Init+0xb2>
 800aa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa56:	3b01      	subs	r3, #1
 800aa58:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	2102      	movs	r1, #2
 800aa60:	2000      	movs	r0, #0
 800aa62:	f7f7 f979 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <Ms_Accel_Init+0xca>
 800aa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (fullScale != 2) result--;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d002      	beq.n	800aa7e <Ms_Accel_Init+0xd6>
 800aa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 800aa7e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ab34 <Ms_Accel_Init+0x18c>
 800aa82:	2102      	movs	r1, #2
 800aa84:	2000      	movs	r0, #0
 800aa86:	f7f7 f903 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <Ms_Accel_Init+0xee>
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	3b01      	subs	r3, #1
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800aa96:	1d3b      	adds	r3, r7, #4
 800aa98:	461a      	mov	r2, r3
 800aa9a:	2102      	movs	r1, #2
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	f7f7 f893 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <Ms_Accel_Init+0x106>
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (outputDataRate != 3333.0f) result--;
 800aaae:	edd7 7a01 	vldr	s15, [r7, #4]
 800aab2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800ab34 <Ms_Accel_Init+0x18c>
 800aab6:	eef4 7a47 	vcmp.f32	s15, s14
 800aaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aabe:	d002      	beq.n	800aac6 <Ms_Accel_Init+0x11e>
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	3b01      	subs	r3, #1
 800aac4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 800aac6:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800ab38 <Ms_Accel_Init+0x190>
 800aaca:	2102      	movs	r1, #2
 800aacc:	2000      	movs	r0, #0
 800aace:	f7f7 f8df 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <Ms_Accel_Init+0x136>
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	3b01      	subs	r3, #1
 800aadc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800aade:	1d3b      	adds	r3, r7, #4
 800aae0:	461a      	mov	r2, r3
 800aae2:	2102      	movs	r1, #2
 800aae4:	2000      	movs	r0, #0
 800aae6:	f7f7 f86f 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <Ms_Accel_Init+0x14e>
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (outputDataRate != 208.0f) result--;
 800aaf6:	edd7 7a01 	vldr	s15, [r7, #4]
 800aafa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ab38 <Ms_Accel_Init+0x190>
 800aafe:	eef4 7a47 	vcmp.f32	s15, s14
 800ab02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab06:	d002      	beq.n	800ab0e <Ms_Accel_Init+0x166>
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 800ab0e:	f107 0308 	add.w	r3, r7, #8
 800ab12:	461a      	mov	r2, r3
 800ab14:	2102      	movs	r1, #2
 800ab16:	2000      	movs	r0, #0
 800ab18:	f7f6 fff2 	bl	8001b00 <BSP_MOTION_SENSOR_GetSensitivity>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <Ms_Accel_Init+0x180>
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	3b01      	subs	r3, #1
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c

	return result;
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3730      	adds	r7, #48	; 0x30
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	45505000 	.word	0x45505000
 800ab38:	43500000 	.word	0x43500000

0800ab3c <Ms_Button_Init>:
	return result;

}

int32_t Ms_Button_Init(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	607b      	str	r3, [r7, #4]
	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 800ab46:	2101      	movs	r1, #1
 800ab48:	2000      	movs	r0, #0
 800ab4a:	f7f6 f90f 	bl	8000d6c <BSP_PB_Init>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <Ms_Button_Init+0x1e>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	607b      	str	r3, [r7, #4]
	return result;
 800ab5a:	687b      	ldr	r3, [r7, #4]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <User_Button_Wait>:
	UserButtonPressed = RESET;
	printf("\n");
}

void User_Button_Wait()
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
	printf("\n");
 800ab68:	200a      	movs	r0, #10
 800ab6a:	f001 f8b5 	bl	800bcd8 <putchar>
	UserButtonPressed = RESET;
 800ab6e:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <User_Button_Wait+0x34>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	701a      	strb	r2, [r3, #0]
	while (UserButtonPressed == 0)
 800ab74:	e002      	b.n	800ab7c <User_Button_Wait+0x18>
	{
		HAL_Delay(10);
 800ab76:	200a      	movs	r0, #10
 800ab78:	f7f9 fed8 	bl	800492c <HAL_Delay>
	while (UserButtonPressed == 0)
 800ab7c:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <User_Button_Wait+0x34>)
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0f7      	beq.n	800ab76 <User_Button_Wait+0x12>
	}
	UserButtonPressed = RESET;
 800ab86:	4b04      	ldr	r3, [pc, #16]	; (800ab98 <User_Button_Wait+0x34>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	701a      	strb	r2, [r3, #0]
	printf("\n");
 800ab8c:	200a      	movs	r0, #10
 800ab8e:	f001 f8a3 	bl	800bcd8 <putchar>
}
 800ab92:	bf00      	nop
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000f20 	.word	0x20000f20

0800ab9c <Ms_Init>:
		if (BSP_MOTION_SENSOR_GetSensitivity(1, MOTION_MAGNETO, &sensitivity) != BSP_ERROR_NONE) result--;
		return result;
}

int32_t Ms_Init(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08c      	sub	sp, #48	; 0x30
 800aba0:	af00      	add	r7, sp, #0
	int32_t  result  = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t fullScale;

	/* Initialize function for Microaccelerometer */

	/* Initialize user button */
	if (BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI) != BSP_ERROR_NONE) result--;
 800aba6:	2101      	movs	r1, #1
 800aba8:	2000      	movs	r0, #0
 800abaa:	f7f6 f8df 	bl	8000d6c <BSP_PB_Init>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <Ms_Init+0x1e>
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb6:	3b01      	subs	r3, #1
 800abb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800abba:	2102      	movs	r1, #2
 800abbc:	2000      	movs	r0, #0
 800abbe:	f7f6 fe1b 	bl	80017f8 <BSP_MOTION_SENSOR_Init>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <Ms_Init+0x32>
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	3b01      	subs	r3, #1
 800abcc:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_GetCapabilities(0, &Capabilities) != BSP_ERROR_NONE) result--;
 800abce:	f107 0310 	add.w	r3, r7, #16
 800abd2:	4619      	mov	r1, r3
 800abd4:	2000      	movs	r0, #0
 800abd6:	f7f6 fe5f 	bl	8001898 <BSP_MOTION_SENSOR_GetCapabilities>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <Ms_Init+0x4a>
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	3b01      	subs	r3, #1
 800abe4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Read id function */
	if (BSP_MOTION_SENSOR_ReadID(0, &chipId) != BSP_ERROR_NONE) result--;
 800abe6:	f107 030f 	add.w	r3, r7, #15
 800abea:	4619      	mov	r1, r3
 800abec:	2000      	movs	r0, #0
 800abee:	f7f6 fe8b 	bl	8001908 <BSP_MOTION_SENSOR_ReadID>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <Ms_Init+0x62>
 800abf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfa:	3b01      	subs	r3, #1
 800abfc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_ACCELERO) != BSP_ERROR_NONE) result--;
 800abfe:	2102      	movs	r1, #2
 800ac00:	2000      	movs	r0, #0
 800ac02:	f7f6 feb9 	bl	8001978 <BSP_MOTION_SENSOR_Enable>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <Ms_Init+0x76>
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 16) != BSP_ERROR_NONE) result--;
 800ac12:	2210      	movs	r2, #16
 800ac14:	2102      	movs	r1, #2
 800ac16:	2000      	movs	r0, #0
 800ac18:	f7f7 f902 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <Ms_Init+0x8c>
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	3b01      	subs	r3, #1
 800ac26:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800ac28:	463b      	mov	r3, r7
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	2102      	movs	r1, #2
 800ac2e:	2000      	movs	r0, #0
 800ac30:	f7f7 f892 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <Ms_Init+0xa4>
 800ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (fullScale != 16) result--;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b10      	cmp	r3, #16
 800ac44:	d002      	beq.n	800ac4c <Ms_Init+0xb0>
 800ac46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_ACCELERO, 2) != BSP_ERROR_NONE) result--;
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	2102      	movs	r1, #2
 800ac50:	2000      	movs	r0, #0
 800ac52:	f7f7 f8e5 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <Ms_Init+0xc6>
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_ACCELERO, &fullScale) != BSP_ERROR_NONE) result--;
 800ac62:	463b      	mov	r3, r7
 800ac64:	461a      	mov	r2, r3
 800ac66:	2102      	movs	r1, #2
 800ac68:	2000      	movs	r0, #0
 800ac6a:	f7f7 f875 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <Ms_Init+0xde>
 800ac74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac76:	3b01      	subs	r3, #1
 800ac78:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (fullScale != 2) result--;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d002      	beq.n	800ac86 <Ms_Init+0xea>
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	3b01      	subs	r3, #1
 800ac84:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 3333.0f) != BSP_ERROR_NONE) result--;
 800ac86:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800ae88 <Ms_Init+0x2ec>
 800ac8a:	2102      	movs	r1, #2
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f7f6 ffff 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <Ms_Init+0x102>
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800ac9e:	1d3b      	adds	r3, r7, #4
 800aca0:	461a      	mov	r2, r3
 800aca2:	2102      	movs	r1, #2
 800aca4:	2000      	movs	r0, #0
 800aca6:	f7f6 ff8f 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <Ms_Init+0x11a>
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	3b01      	subs	r3, #1
 800acb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (outputDataRate != 3333.0f) result--;
 800acb6:	edd7 7a01 	vldr	s15, [r7, #4]
 800acba:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800ae88 <Ms_Init+0x2ec>
 800acbe:	eef4 7a47 	vcmp.f32	s15, s14
 800acc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc6:	d002      	beq.n	800acce <Ms_Init+0x132>
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	3b01      	subs	r3, #1
 800accc:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_ACCELERO, 208.0f) != BSP_ERROR_NONE) result--;
 800acce:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800ae8c <Ms_Init+0x2f0>
 800acd2:	2102      	movs	r1, #2
 800acd4:	2000      	movs	r0, #0
 800acd6:	f7f6 ffdb 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <Ms_Init+0x14a>
 800ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace2:	3b01      	subs	r3, #1
 800ace4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_ACCELERO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800ace6:	1d3b      	adds	r3, r7, #4
 800ace8:	461a      	mov	r2, r3
 800acea:	2102      	movs	r1, #2
 800acec:	2000      	movs	r0, #0
 800acee:	f7f6 ff6b 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <Ms_Init+0x162>
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	3b01      	subs	r3, #1
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (outputDataRate != 208.0f) result--;
 800acfe:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad02:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800ae8c <Ms_Init+0x2f0>
 800ad06:	eef4 7a47 	vcmp.f32	s15, s14
 800ad0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0e:	d002      	beq.n	800ad16 <Ms_Init+0x17a>
 800ad10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad12:	3b01      	subs	r3, #1
 800ad14:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_ACCELERO, &sensitivity) != BSP_ERROR_NONE) result--;
 800ad16:	f107 0308 	add.w	r3, r7, #8
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	2102      	movs	r1, #2
 800ad1e:	2000      	movs	r0, #0
 800ad20:	f7f6 feee 	bl	8001b00 <BSP_MOTION_SENSOR_GetSensitivity>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <Ms_Init+0x194>
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Initialize function for Microgyro */

	/* Initialize function */
	if (BSP_MOTION_SENSOR_Init(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 800ad30:	2101      	movs	r1, #1
 800ad32:	2000      	movs	r0, #0
 800ad34:	f7f6 fd60 	bl	80017f8 <BSP_MOTION_SENSOR_Init>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <Ms_Init+0x1a8>
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	3b01      	subs	r3, #1
 800ad42:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Enable function */
	if (BSP_MOTION_SENSOR_Enable(0, MOTION_GYRO) != BSP_ERROR_NONE) result--;
 800ad44:	2101      	movs	r1, #1
 800ad46:	2000      	movs	r0, #0
 800ad48:	f7f6 fe16 	bl	8001978 <BSP_MOTION_SENSOR_Enable>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <Ms_Init+0x1bc>
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	3b01      	subs	r3, #1
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetFullScale and SetFullScale functions */
	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 2000) != BSP_ERROR_NONE) result--;
 800ad58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	2000      	movs	r0, #0
 800ad60:	f7f7 f85e 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <Ms_Init+0x1d4>
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 800ad70:	463b      	mov	r3, r7
 800ad72:	461a      	mov	r2, r3
 800ad74:	2101      	movs	r1, #1
 800ad76:	2000      	movs	r0, #0
 800ad78:	f7f6 ffee 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <Ms_Init+0x1ec>
 800ad82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad84:	3b01      	subs	r3, #1
 800ad86:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (fullScale != 2000) result--;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ad8e:	d002      	beq.n	800ad96 <Ms_Init+0x1fa>
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	3b01      	subs	r3, #1
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_SetFullScale(0, MOTION_GYRO, 500) != BSP_ERROR_NONE) result--;
 800ad96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	f7f7 f83f 	bl	8001e20 <BSP_MOTION_SENSOR_SetFullScale>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <Ms_Init+0x212>
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	3b01      	subs	r3, #1
 800adac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetFullScale(0, MOTION_GYRO, &fullScale) != BSP_ERROR_NONE) result--;
 800adae:	463b      	mov	r3, r7
 800adb0:	461a      	mov	r2, r3
 800adb2:	2101      	movs	r1, #1
 800adb4:	2000      	movs	r0, #0
 800adb6:	f7f6 ffcf 	bl	8001d58 <BSP_MOTION_SENSOR_GetFullScale>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <Ms_Init+0x22a>
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	3b01      	subs	r3, #1
 800adc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (fullScale != 500) result--;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800adcc:	d002      	beq.n	800add4 <Ms_Init+0x238>
 800adce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add0:	3b01      	subs	r3, #1
 800add2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetOutputDataRate and SetOutputDataRate functions */
	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 3333.0f) != BSP_ERROR_NONE) result--;
 800add4:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800ae88 <Ms_Init+0x2ec>
 800add8:	2101      	movs	r1, #1
 800adda:	2000      	movs	r0, #0
 800addc:	f7f6 ff58 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <Ms_Init+0x250>
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	3b01      	subs	r3, #1
 800adea:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800adec:	1d3b      	adds	r3, r7, #4
 800adee:	461a      	mov	r2, r3
 800adf0:	2101      	movs	r1, #1
 800adf2:	2000      	movs	r0, #0
 800adf4:	f7f6 fee8 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <Ms_Init+0x268>
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	3b01      	subs	r3, #1
 800ae02:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (outputDataRate != 3333.0f) result--;
 800ae04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae08:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ae88 <Ms_Init+0x2ec>
 800ae0c:	eef4 7a47 	vcmp.f32	s15, s14
 800ae10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae14:	d002      	beq.n	800ae1c <Ms_Init+0x280>
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (BSP_MOTION_SENSOR_SetOutputDataRate(0, MOTION_GYRO, 208.0f) != BSP_ERROR_NONE) result--;
 800ae1c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800ae8c <Ms_Init+0x2f0>
 800ae20:	2101      	movs	r1, #1
 800ae22:	2000      	movs	r0, #0
 800ae24:	f7f6 ff34 	bl	8001c90 <BSP_MOTION_SENSOR_SetOutputDataRate>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <Ms_Init+0x298>
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	3b01      	subs	r3, #1
 800ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (BSP_MOTION_SENSOR_GetOutputDataRate(0, MOTION_GYRO, &outputDataRate) != BSP_ERROR_NONE) result--;
 800ae34:	1d3b      	adds	r3, r7, #4
 800ae36:	461a      	mov	r2, r3
 800ae38:	2101      	movs	r1, #1
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f7f6 fec4 	bl	8001bc8 <BSP_MOTION_SENSOR_GetOutputDataRate>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <Ms_Init+0x2b0>
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (outputDataRate != 208.0f) result--;
 800ae4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae50:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ae8c <Ms_Init+0x2f0>
 800ae54:	eef4 7a47 	vcmp.f32	s15, s14
 800ae58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5c:	d002      	beq.n	800ae64 <Ms_Init+0x2c8>
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	3b01      	subs	r3, #1
 800ae62:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GetSensitivity function */
	if (BSP_MOTION_SENSOR_GetSensitivity(0, MOTION_GYRO, &sensitivity) != BSP_ERROR_NONE) result--;
 800ae64:	f107 0308 	add.w	r3, r7, #8
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	f7f6 fe47 	bl	8001b00 <BSP_MOTION_SENSOR_GetSensitivity>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <Ms_Init+0x2e2>
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	return result;
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3730      	adds	r7, #48	; 0x30
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	45505000 	.word	0x45505000
 800ae8c:	43500000 	.word	0x43500000

0800ae90 <HAL_MspInit>:
/**
  * @brief  Initialize the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800ae94:	bf00      	nop
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	af00      	add	r7, sp, #0
}
 800aea2:	bf00      	nop
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800aeb0:	e7fe      	b.n	800aeb0 <HardFault_Handler+0x4>

0800aeb2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800aeb6:	e7fe      	b.n	800aeb6 <MemManage_Handler+0x4>

0800aeb8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800aebc:	e7fe      	b.n	800aebc <BusFault_Handler+0x4>

0800aebe <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800aebe:	b480      	push	{r7}
 800aec0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800aec2:	e7fe      	b.n	800aec2 <UsageFault_Handler+0x4>

0800aec4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800aec4:	b480      	push	{r7}
 800aec6:	af00      	add	r7, sp, #0
}
 800aec8:	bf00      	nop
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800aed2:	b480      	push	{r7}
 800aed4:	af00      	add	r7, sp, #0
  while (1)
 800aed6:	e7fe      	b.n	800aed6 <DebugMon_Handler+0x4>

0800aed8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800aed8:	b480      	push	{r7}
 800aeda:	af00      	add	r7, sp, #0
  while (1)
 800aedc:	e7fe      	b.n	800aedc <PendSV_Handler+0x4>

0800aede <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800aee2:	f7f9 fd03 	bl	80048ec <HAL_IncTick>
}
 800aee6:	bf00      	nop
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <GPDMA1_Channel0_IRQHandler>:
  * @brief  This function handles GPDMA_Channel0 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 800aeee:	2102      	movs	r1, #2
 800aef0:	2000      	movs	r0, #0
 800aef2:	f7f5 ffc5 	bl	8000e80 <BSP_AUDIO_IN_IRQHandler>
}
 800aef6:	bf00      	nop
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <GPDMA1_Channel6_IRQHandler>:
  * @brief  This function handles GPDMA_Channel6 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 800aefe:	2101      	movs	r1, #1
 800af00:	2000      	movs	r0, #0
 800af02:	f7f5 ffbd 	bl	8000e80 <BSP_AUDIO_IN_IRQHandler>
} 
 800af06:	bf00      	nop
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <EXTI13_IRQHandler>:
  * @brief  This function handles EXTI13 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI13_IRQHandler(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hpb_exti[0]);
 800af10:	4802      	ldr	r0, [pc, #8]	; (800af1c <EXTI13_IRQHandler+0x10>)
 800af12:	f7fa f8cb 	bl	80050ac <HAL_EXTI_IRQHandler>
}
 800af16:	bf00      	nop
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	200002ac 	.word	0x200002ac

0800af20 <DCMI_PSSI_IRQHandler>:
  * @brief  This function handles DCMI_PSSI interrupt request.
  * @param  None
  * @retval None
  */
void DCMI_PSSI_IRQHandler(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800af24:	4802      	ldr	r0, [pc, #8]	; (800af30 <DCMI_PSSI_IRQHandler+0x10>)
 800af26:	f7f9 fe35 	bl	8004b94 <HAL_DCMI_IRQHandler>
}
 800af2a:	bf00      	nop
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000dfc 	.word	0x20000dfc

0800af34 <GPDMA1_Channel12_IRQHandler>:
  * @brief  This function handles GPDMA_Channel12 interrupt request.
  * @param  None
  * @retval None
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800af38:	4b03      	ldr	r3, [pc, #12]	; (800af48 <GPDMA1_Channel12_IRQHandler+0x14>)
 800af3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7f9 ff01 	bl	8004d44 <HAL_DMA_IRQHandler>
}
 800af42:	bf00      	nop
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20000dfc 	.word	0x20000dfc

0800af4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800af54:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <_sbrk+0x5c>)
 800af56:	4b15      	ldr	r3, [pc, #84]	; (800afac <_sbrk+0x60>)
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800af60:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <_sbrk+0x64>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800af68:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <_sbrk+0x64>)
 800af6a:	4a12      	ldr	r2, [pc, #72]	; (800afb4 <_sbrk+0x68>)
 800af6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800af6e:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <_sbrk+0x64>)
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4413      	add	r3, r2
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d207      	bcs.n	800af8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800af7c:	f000 ff2c 	bl	800bdd8 <__errno>
 800af80:	4603      	mov	r3, r0
 800af82:	220c      	movs	r2, #12
 800af84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800af86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af8a:	e009      	b.n	800afa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800af8c:	4b08      	ldr	r3, [pc, #32]	; (800afb0 <_sbrk+0x64>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800af92:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <_sbrk+0x64>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4413      	add	r3, r2
 800af9a:	4a05      	ldr	r2, [pc, #20]	; (800afb0 <_sbrk+0x64>)
 800af9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800af9e:	68fb      	ldr	r3, [r7, #12]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	200c0000 	.word	0x200c0000
 800afac:	00001000 	.word	0x00001000
 800afb0:	20000f24 	.word	0x20000f24
 800afb4:	20001120 	.word	0x20001120

0800afb8 <__cvt>:
 800afb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	ec55 4b10 	vmov	r4, r5, d0
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	460e      	mov	r6, r1
 800afc4:	4619      	mov	r1, r3
 800afc6:	462b      	mov	r3, r5
 800afc8:	bfb4      	ite	lt
 800afca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800afce:	2300      	movge	r3, #0
 800afd0:	4691      	mov	r9, r2
 800afd2:	bfbf      	itttt	lt
 800afd4:	4622      	movlt	r2, r4
 800afd6:	461d      	movlt	r5, r3
 800afd8:	232d      	movlt	r3, #45	; 0x2d
 800afda:	4614      	movlt	r4, r2
 800afdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800afe0:	700b      	strb	r3, [r1, #0]
 800afe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe4:	f023 0820 	bic.w	r8, r3, #32
 800afe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afec:	d005      	beq.n	800affa <__cvt+0x42>
 800afee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aff2:	d100      	bne.n	800aff6 <__cvt+0x3e>
 800aff4:	3601      	adds	r6, #1
 800aff6:	2102      	movs	r1, #2
 800aff8:	e000      	b.n	800affc <__cvt+0x44>
 800affa:	2103      	movs	r1, #3
 800affc:	ab03      	add	r3, sp, #12
 800affe:	4632      	mov	r2, r6
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	ab02      	add	r3, sp, #8
 800b004:	ec45 4b10 	vmov	d0, r4, r5
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4653      	mov	r3, sl
 800b00c:	f000 ffdc 	bl	800bfc8 <_dtoa_r>
 800b010:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b014:	4607      	mov	r7, r0
 800b016:	d102      	bne.n	800b01e <__cvt+0x66>
 800b018:	f019 0f01 	tst.w	r9, #1
 800b01c:	d022      	beq.n	800b064 <__cvt+0xac>
 800b01e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b022:	eb07 0906 	add.w	r9, r7, r6
 800b026:	d110      	bne.n	800b04a <__cvt+0x92>
 800b028:	783b      	ldrb	r3, [r7, #0]
 800b02a:	2b30      	cmp	r3, #48	; 0x30
 800b02c:	d10a      	bne.n	800b044 <__cvt+0x8c>
 800b02e:	2200      	movs	r2, #0
 800b030:	2300      	movs	r3, #0
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f7f5 fd4b 	bl	8000ad0 <__aeabi_dcmpeq>
 800b03a:	b918      	cbnz	r0, 800b044 <__cvt+0x8c>
 800b03c:	f1c6 0601 	rsb	r6, r6, #1
 800b040:	f8ca 6000 	str.w	r6, [sl]
 800b044:	f8da 3000 	ldr.w	r3, [sl]
 800b048:	4499      	add	r9, r3
 800b04a:	2200      	movs	r2, #0
 800b04c:	2300      	movs	r3, #0
 800b04e:	4620      	mov	r0, r4
 800b050:	4629      	mov	r1, r5
 800b052:	f7f5 fd3d 	bl	8000ad0 <__aeabi_dcmpeq>
 800b056:	b108      	cbz	r0, 800b05c <__cvt+0xa4>
 800b058:	f8cd 900c 	str.w	r9, [sp, #12]
 800b05c:	2230      	movs	r2, #48	; 0x30
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	454b      	cmp	r3, r9
 800b062:	d307      	bcc.n	800b074 <__cvt+0xbc>
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	4638      	mov	r0, r7
 800b068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b06a:	1bdb      	subs	r3, r3, r7
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	b004      	add	sp, #16
 800b070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b074:	1c59      	adds	r1, r3, #1
 800b076:	9103      	str	r1, [sp, #12]
 800b078:	701a      	strb	r2, [r3, #0]
 800b07a:	e7f0      	b.n	800b05e <__cvt+0xa6>

0800b07c <__exponent>:
 800b07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b07e:	2900      	cmp	r1, #0
 800b080:	4603      	mov	r3, r0
 800b082:	bfb8      	it	lt
 800b084:	4249      	neglt	r1, r1
 800b086:	f803 2b02 	strb.w	r2, [r3], #2
 800b08a:	bfb4      	ite	lt
 800b08c:	222d      	movlt	r2, #45	; 0x2d
 800b08e:	222b      	movge	r2, #43	; 0x2b
 800b090:	2909      	cmp	r1, #9
 800b092:	7042      	strb	r2, [r0, #1]
 800b094:	dd29      	ble.n	800b0ea <__exponent+0x6e>
 800b096:	f10d 0207 	add.w	r2, sp, #7
 800b09a:	260a      	movs	r6, #10
 800b09c:	4617      	mov	r7, r2
 800b09e:	4694      	mov	ip, r2
 800b0a0:	3a01      	subs	r2, #1
 800b0a2:	fb91 f5f6 	sdiv	r5, r1, r6
 800b0a6:	fb06 1415 	mls	r4, r6, r5, r1
 800b0aa:	3430      	adds	r4, #48	; 0x30
 800b0ac:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	2c63      	cmp	r4, #99	; 0x63
 800b0b6:	dcf2      	bgt.n	800b09e <__exponent+0x22>
 800b0b8:	3130      	adds	r1, #48	; 0x30
 800b0ba:	f1ac 0402 	sub.w	r4, ip, #2
 800b0be:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b0c2:	1c41      	adds	r1, r0, #1
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	42ba      	cmp	r2, r7
 800b0c8:	d30a      	bcc.n	800b0e0 <__exponent+0x64>
 800b0ca:	f10d 0209 	add.w	r2, sp, #9
 800b0ce:	eba2 020c 	sub.w	r2, r2, ip
 800b0d2:	42bc      	cmp	r4, r7
 800b0d4:	bf88      	it	hi
 800b0d6:	2200      	movhi	r2, #0
 800b0d8:	4413      	add	r3, r2
 800b0da:	1a18      	subs	r0, r3, r0
 800b0dc:	b003      	add	sp, #12
 800b0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b0e4:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b0e8:	e7ed      	b.n	800b0c6 <__exponent+0x4a>
 800b0ea:	2330      	movs	r3, #48	; 0x30
 800b0ec:	3130      	adds	r1, #48	; 0x30
 800b0ee:	7083      	strb	r3, [r0, #2]
 800b0f0:	1d03      	adds	r3, r0, #4
 800b0f2:	70c1      	strb	r1, [r0, #3]
 800b0f4:	e7f1      	b.n	800b0da <__exponent+0x5e>
	...

0800b0f8 <_printf_float>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	ed2d 8b02 	vpush	{d8}
 800b100:	b08d      	sub	sp, #52	; 0x34
 800b102:	460c      	mov	r4, r1
 800b104:	4616      	mov	r6, r2
 800b106:	461f      	mov	r7, r3
 800b108:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b10c:	4605      	mov	r5, r0
 800b10e:	f000 fe4f 	bl	800bdb0 <_localeconv_r>
 800b112:	f8d0 a000 	ldr.w	sl, [r0]
 800b116:	4650      	mov	r0, sl
 800b118:	f7f5 f8ae 	bl	8000278 <strlen>
 800b11c:	2300      	movs	r3, #0
 800b11e:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b122:	ee08 0a10 	vmov	s16, r0
 800b126:	930a      	str	r3, [sp, #40]	; 0x28
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	9305      	str	r3, [sp, #20]
 800b12c:	f8d8 3000 	ldr.w	r3, [r8]
 800b130:	3307      	adds	r3, #7
 800b132:	f023 0307 	bic.w	r3, r3, #7
 800b136:	f103 0208 	add.w	r2, r3, #8
 800b13a:	f8c8 2000 	str.w	r2, [r8]
 800b13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b142:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b146:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b14a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b14e:	9307      	str	r3, [sp, #28]
 800b150:	4b9f      	ldr	r3, [pc, #636]	; (800b3d0 <_printf_float+0x2d8>)
 800b152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b156:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b15a:	f7f5 fceb 	bl	8000b34 <__aeabi_dcmpun>
 800b15e:	bb88      	cbnz	r0, 800b1c4 <_printf_float+0xcc>
 800b160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b164:	4b9a      	ldr	r3, [pc, #616]	; (800b3d0 <_printf_float+0x2d8>)
 800b166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b16a:	f7f5 fcc5 	bl	8000af8 <__aeabi_dcmple>
 800b16e:	bb48      	cbnz	r0, 800b1c4 <_printf_float+0xcc>
 800b170:	2200      	movs	r2, #0
 800b172:	2300      	movs	r3, #0
 800b174:	4640      	mov	r0, r8
 800b176:	4649      	mov	r1, r9
 800b178:	f7f5 fcb4 	bl	8000ae4 <__aeabi_dcmplt>
 800b17c:	b110      	cbz	r0, 800b184 <_printf_float+0x8c>
 800b17e:	232d      	movs	r3, #45	; 0x2d
 800b180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b184:	4a93      	ldr	r2, [pc, #588]	; (800b3d4 <_printf_float+0x2dc>)
 800b186:	4b94      	ldr	r3, [pc, #592]	; (800b3d8 <_printf_float+0x2e0>)
 800b188:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b18c:	bf94      	ite	ls
 800b18e:	4690      	movls	r8, r2
 800b190:	4698      	movhi	r8, r3
 800b192:	2303      	movs	r3, #3
 800b194:	f04f 0900 	mov.w	r9, #0
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	9b05      	ldr	r3, [sp, #20]
 800b19c:	f023 0304 	bic.w	r3, r3, #4
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	4633      	mov	r3, r6
 800b1a4:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	9700      	str	r7, [sp, #0]
 800b1ac:	f000 fa82 	bl	800b6b4 <_printf_common>
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	f040 8090 	bne.w	800b2d6 <_printf_float+0x1de>
 800b1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1ba:	b00d      	add	sp, #52	; 0x34
 800b1bc:	ecbd 8b02 	vpop	{d8}
 800b1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	464b      	mov	r3, r9
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	f7f5 fcb2 	bl	8000b34 <__aeabi_dcmpun>
 800b1d0:	b140      	cbz	r0, 800b1e4 <_printf_float+0xec>
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	4a81      	ldr	r2, [pc, #516]	; (800b3dc <_printf_float+0x2e4>)
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	bfbc      	itt	lt
 800b1da:	232d      	movlt	r3, #45	; 0x2d
 800b1dc:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1e0:	4b7f      	ldr	r3, [pc, #508]	; (800b3e0 <_printf_float+0x2e8>)
 800b1e2:	e7d1      	b.n	800b188 <_printf_float+0x90>
 800b1e4:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b1e8:	6863      	ldr	r3, [r4, #4]
 800b1ea:	9206      	str	r2, [sp, #24]
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	d13f      	bne.n	800b270 <_printf_float+0x178>
 800b1f0:	2306      	movs	r3, #6
 800b1f2:	6063      	str	r3, [r4, #4]
 800b1f4:	9b05      	ldr	r3, [sp, #20]
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	6861      	ldr	r1, [r4, #4]
 800b1fa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1fe:	2300      	movs	r3, #0
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	ab0a      	add	r3, sp, #40	; 0x28
 800b204:	6022      	str	r2, [r4, #0]
 800b206:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b20a:	ab09      	add	r3, sp, #36	; 0x24
 800b20c:	ec49 8b10 	vmov	d0, r8, r9
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b216:	f7ff fecf 	bl	800afb8 <__cvt>
 800b21a:	9b06      	ldr	r3, [sp, #24]
 800b21c:	4680      	mov	r8, r0
 800b21e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b220:	2b47      	cmp	r3, #71	; 0x47
 800b222:	d108      	bne.n	800b236 <_printf_float+0x13e>
 800b224:	1cc8      	adds	r0, r1, #3
 800b226:	db02      	blt.n	800b22e <_printf_float+0x136>
 800b228:	6863      	ldr	r3, [r4, #4]
 800b22a:	4299      	cmp	r1, r3
 800b22c:	dd41      	ble.n	800b2b2 <_printf_float+0x1ba>
 800b22e:	f1ab 0302 	sub.w	r3, fp, #2
 800b232:	fa5f fb83 	uxtb.w	fp, r3
 800b236:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b23a:	d820      	bhi.n	800b27e <_printf_float+0x186>
 800b23c:	3901      	subs	r1, #1
 800b23e:	465a      	mov	r2, fp
 800b240:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b244:	9109      	str	r1, [sp, #36]	; 0x24
 800b246:	f7ff ff19 	bl	800b07c <__exponent>
 800b24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b24c:	4681      	mov	r9, r0
 800b24e:	1813      	adds	r3, r2, r0
 800b250:	2a01      	cmp	r2, #1
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	dc02      	bgt.n	800b25c <_printf_float+0x164>
 800b256:	6822      	ldr	r2, [r4, #0]
 800b258:	07d2      	lsls	r2, r2, #31
 800b25a:	d501      	bpl.n	800b260 <_printf_float+0x168>
 800b25c:	3301      	adds	r3, #1
 800b25e:	6123      	str	r3, [r4, #16]
 800b260:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b264:	2b00      	cmp	r3, #0
 800b266:	d09c      	beq.n	800b1a2 <_printf_float+0xaa>
 800b268:	232d      	movs	r3, #45	; 0x2d
 800b26a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b26e:	e798      	b.n	800b1a2 <_printf_float+0xaa>
 800b270:	9a06      	ldr	r2, [sp, #24]
 800b272:	2a47      	cmp	r2, #71	; 0x47
 800b274:	d1be      	bne.n	800b1f4 <_printf_float+0xfc>
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1bc      	bne.n	800b1f4 <_printf_float+0xfc>
 800b27a:	2301      	movs	r3, #1
 800b27c:	e7b9      	b.n	800b1f2 <_printf_float+0xfa>
 800b27e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b282:	d118      	bne.n	800b2b6 <_printf_float+0x1be>
 800b284:	2900      	cmp	r1, #0
 800b286:	6863      	ldr	r3, [r4, #4]
 800b288:	dd0b      	ble.n	800b2a2 <_printf_float+0x1aa>
 800b28a:	6121      	str	r1, [r4, #16]
 800b28c:	b913      	cbnz	r3, 800b294 <_printf_float+0x19c>
 800b28e:	6822      	ldr	r2, [r4, #0]
 800b290:	07d0      	lsls	r0, r2, #31
 800b292:	d502      	bpl.n	800b29a <_printf_float+0x1a2>
 800b294:	3301      	adds	r3, #1
 800b296:	440b      	add	r3, r1
 800b298:	6123      	str	r3, [r4, #16]
 800b29a:	f04f 0900 	mov.w	r9, #0
 800b29e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b2a0:	e7de      	b.n	800b260 <_printf_float+0x168>
 800b2a2:	b913      	cbnz	r3, 800b2aa <_printf_float+0x1b2>
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	07d2      	lsls	r2, r2, #31
 800b2a8:	d501      	bpl.n	800b2ae <_printf_float+0x1b6>
 800b2aa:	3302      	adds	r3, #2
 800b2ac:	e7f4      	b.n	800b298 <_printf_float+0x1a0>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e7f2      	b.n	800b298 <_printf_float+0x1a0>
 800b2b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	db05      	blt.n	800b2c8 <_printf_float+0x1d0>
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	6121      	str	r1, [r4, #16]
 800b2c0:	07d8      	lsls	r0, r3, #31
 800b2c2:	d5ea      	bpl.n	800b29a <_printf_float+0x1a2>
 800b2c4:	1c4b      	adds	r3, r1, #1
 800b2c6:	e7e7      	b.n	800b298 <_printf_float+0x1a0>
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	bfd4      	ite	le
 800b2cc:	f1c1 0202 	rsble	r2, r1, #2
 800b2d0:	2201      	movgt	r2, #1
 800b2d2:	4413      	add	r3, r2
 800b2d4:	e7e0      	b.n	800b298 <_printf_float+0x1a0>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	055a      	lsls	r2, r3, #21
 800b2da:	d407      	bmi.n	800b2ec <_printf_float+0x1f4>
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	4642      	mov	r2, r8
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	d12c      	bne.n	800b344 <_printf_float+0x24c>
 800b2ea:	e764      	b.n	800b1b6 <_printf_float+0xbe>
 800b2ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2f0:	f240 80e0 	bls.w	800b4b4 <_printf_float+0x3bc>
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2fc:	f7f5 fbe8 	bl	8000ad0 <__aeabi_dcmpeq>
 800b300:	2800      	cmp	r0, #0
 800b302:	d034      	beq.n	800b36e <_printf_float+0x276>
 800b304:	2301      	movs	r3, #1
 800b306:	4a37      	ldr	r2, [pc, #220]	; (800b3e4 <_printf_float+0x2ec>)
 800b308:	4631      	mov	r1, r6
 800b30a:	4628      	mov	r0, r5
 800b30c:	47b8      	blx	r7
 800b30e:	3001      	adds	r0, #1
 800b310:	f43f af51 	beq.w	800b1b6 <_printf_float+0xbe>
 800b314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b318:	429a      	cmp	r2, r3
 800b31a:	db02      	blt.n	800b322 <_printf_float+0x22a>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	07d8      	lsls	r0, r3, #31
 800b320:	d510      	bpl.n	800b344 <_printf_float+0x24c>
 800b322:	ee18 3a10 	vmov	r3, s16
 800b326:	4652      	mov	r2, sl
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f af41 	beq.w	800b1b6 <_printf_float+0xbe>
 800b334:	f04f 0800 	mov.w	r8, #0
 800b338:	f104 091a 	add.w	r9, r4, #26
 800b33c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33e:	3b01      	subs	r3, #1
 800b340:	4543      	cmp	r3, r8
 800b342:	dc09      	bgt.n	800b358 <_printf_float+0x260>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	079b      	lsls	r3, r3, #30
 800b348:	f100 8107 	bmi.w	800b55a <_printf_float+0x462>
 800b34c:	68e0      	ldr	r0, [r4, #12]
 800b34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b350:	4298      	cmp	r0, r3
 800b352:	bfb8      	it	lt
 800b354:	4618      	movlt	r0, r3
 800b356:	e730      	b.n	800b1ba <_printf_float+0xc2>
 800b358:	2301      	movs	r3, #1
 800b35a:	464a      	mov	r2, r9
 800b35c:	4631      	mov	r1, r6
 800b35e:	4628      	mov	r0, r5
 800b360:	47b8      	blx	r7
 800b362:	3001      	adds	r0, #1
 800b364:	f43f af27 	beq.w	800b1b6 <_printf_float+0xbe>
 800b368:	f108 0801 	add.w	r8, r8, #1
 800b36c:	e7e6      	b.n	800b33c <_printf_float+0x244>
 800b36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b370:	2b00      	cmp	r3, #0
 800b372:	dc39      	bgt.n	800b3e8 <_printf_float+0x2f0>
 800b374:	2301      	movs	r3, #1
 800b376:	4a1b      	ldr	r2, [pc, #108]	; (800b3e4 <_printf_float+0x2ec>)
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	47b8      	blx	r7
 800b37e:	3001      	adds	r0, #1
 800b380:	f43f af19 	beq.w	800b1b6 <_printf_float+0xbe>
 800b384:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b388:	4313      	orrs	r3, r2
 800b38a:	d102      	bne.n	800b392 <_printf_float+0x29a>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	07d9      	lsls	r1, r3, #31
 800b390:	d5d8      	bpl.n	800b344 <_printf_float+0x24c>
 800b392:	ee18 3a10 	vmov	r3, s16
 800b396:	4652      	mov	r2, sl
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f af09 	beq.w	800b1b6 <_printf_float+0xbe>
 800b3a4:	f04f 0900 	mov.w	r9, #0
 800b3a8:	f104 0a1a 	add.w	sl, r4, #26
 800b3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ae:	425b      	negs	r3, r3
 800b3b0:	454b      	cmp	r3, r9
 800b3b2:	dc01      	bgt.n	800b3b8 <_printf_float+0x2c0>
 800b3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b6:	e792      	b.n	800b2de <_printf_float+0x1e6>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f43f aef7 	beq.w	800b1b6 <_printf_float+0xbe>
 800b3c8:	f109 0901 	add.w	r9, r9, #1
 800b3cc:	e7ee      	b.n	800b3ac <_printf_float+0x2b4>
 800b3ce:	bf00      	nop
 800b3d0:	7fefffff 	.word	0x7fefffff
 800b3d4:	0800fa50 	.word	0x0800fa50
 800b3d8:	0800fa54 	.word	0x0800fa54
 800b3dc:	0800fa58 	.word	0x0800fa58
 800b3e0:	0800fa5c 	.word	0x0800fa5c
 800b3e4:	0800fa60 	.word	0x0800fa60
 800b3e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	bfa8      	it	ge
 800b3f0:	461a      	movge	r2, r3
 800b3f2:	2a00      	cmp	r2, #0
 800b3f4:	4691      	mov	r9, r2
 800b3f6:	dc37      	bgt.n	800b468 <_printf_float+0x370>
 800b3f8:	f04f 0b00 	mov.w	fp, #0
 800b3fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b400:	f104 021a 	add.w	r2, r4, #26
 800b404:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b406:	9305      	str	r3, [sp, #20]
 800b408:	eba3 0309 	sub.w	r3, r3, r9
 800b40c:	455b      	cmp	r3, fp
 800b40e:	dc33      	bgt.n	800b478 <_printf_float+0x380>
 800b410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b414:	429a      	cmp	r2, r3
 800b416:	db3b      	blt.n	800b490 <_printf_float+0x398>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	07da      	lsls	r2, r3, #31
 800b41c:	d438      	bmi.n	800b490 <_printf_float+0x398>
 800b41e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b422:	eba2 0903 	sub.w	r9, r2, r3
 800b426:	9b05      	ldr	r3, [sp, #20]
 800b428:	1ad2      	subs	r2, r2, r3
 800b42a:	4591      	cmp	r9, r2
 800b42c:	bfa8      	it	ge
 800b42e:	4691      	movge	r9, r2
 800b430:	f1b9 0f00 	cmp.w	r9, #0
 800b434:	dc35      	bgt.n	800b4a2 <_printf_float+0x3aa>
 800b436:	f04f 0800 	mov.w	r8, #0
 800b43a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b43e:	f104 0a1a 	add.w	sl, r4, #26
 800b442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b446:	1a9b      	subs	r3, r3, r2
 800b448:	eba3 0309 	sub.w	r3, r3, r9
 800b44c:	4543      	cmp	r3, r8
 800b44e:	f77f af79 	ble.w	800b344 <_printf_float+0x24c>
 800b452:	2301      	movs	r3, #1
 800b454:	4652      	mov	r2, sl
 800b456:	4631      	mov	r1, r6
 800b458:	4628      	mov	r0, r5
 800b45a:	47b8      	blx	r7
 800b45c:	3001      	adds	r0, #1
 800b45e:	f43f aeaa 	beq.w	800b1b6 <_printf_float+0xbe>
 800b462:	f108 0801 	add.w	r8, r8, #1
 800b466:	e7ec      	b.n	800b442 <_printf_float+0x34a>
 800b468:	4613      	mov	r3, r2
 800b46a:	4631      	mov	r1, r6
 800b46c:	4642      	mov	r2, r8
 800b46e:	4628      	mov	r0, r5
 800b470:	47b8      	blx	r7
 800b472:	3001      	adds	r0, #1
 800b474:	d1c0      	bne.n	800b3f8 <_printf_float+0x300>
 800b476:	e69e      	b.n	800b1b6 <_printf_float+0xbe>
 800b478:	2301      	movs	r3, #1
 800b47a:	4631      	mov	r1, r6
 800b47c:	4628      	mov	r0, r5
 800b47e:	9205      	str	r2, [sp, #20]
 800b480:	47b8      	blx	r7
 800b482:	3001      	adds	r0, #1
 800b484:	f43f ae97 	beq.w	800b1b6 <_printf_float+0xbe>
 800b488:	f10b 0b01 	add.w	fp, fp, #1
 800b48c:	9a05      	ldr	r2, [sp, #20]
 800b48e:	e7b9      	b.n	800b404 <_printf_float+0x30c>
 800b490:	ee18 3a10 	vmov	r3, s16
 800b494:	4652      	mov	r2, sl
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	d1be      	bne.n	800b41e <_printf_float+0x326>
 800b4a0:	e689      	b.n	800b1b6 <_printf_float+0xbe>
 800b4a2:	9a05      	ldr	r2, [sp, #20]
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	4442      	add	r2, r8
 800b4ac:	47b8      	blx	r7
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d1c1      	bne.n	800b436 <_printf_float+0x33e>
 800b4b2:	e680      	b.n	800b1b6 <_printf_float+0xbe>
 800b4b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4b6:	2a01      	cmp	r2, #1
 800b4b8:	dc01      	bgt.n	800b4be <_printf_float+0x3c6>
 800b4ba:	07db      	lsls	r3, r3, #31
 800b4bc:	d53a      	bpl.n	800b534 <_printf_float+0x43c>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	4642      	mov	r2, r8
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b8      	blx	r7
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	f43f ae74 	beq.w	800b1b6 <_printf_float+0xbe>
 800b4ce:	ee18 3a10 	vmov	r3, s16
 800b4d2:	4652      	mov	r2, sl
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	f43f ae6b 	beq.w	800b1b6 <_printf_float+0xbe>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b4e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4ec:	f7f5 faf0 	bl	8000ad0 <__aeabi_dcmpeq>
 800b4f0:	b9d8      	cbnz	r0, 800b52a <_printf_float+0x432>
 800b4f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b4f6:	f108 0201 	add.w	r2, r8, #1
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	47b8      	blx	r7
 800b500:	3001      	adds	r0, #1
 800b502:	d10e      	bne.n	800b522 <_printf_float+0x42a>
 800b504:	e657      	b.n	800b1b6 <_printf_float+0xbe>
 800b506:	2301      	movs	r3, #1
 800b508:	4652      	mov	r2, sl
 800b50a:	4631      	mov	r1, r6
 800b50c:	4628      	mov	r0, r5
 800b50e:	47b8      	blx	r7
 800b510:	3001      	adds	r0, #1
 800b512:	f43f ae50 	beq.w	800b1b6 <_printf_float+0xbe>
 800b516:	f108 0801 	add.w	r8, r8, #1
 800b51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b51c:	3b01      	subs	r3, #1
 800b51e:	4543      	cmp	r3, r8
 800b520:	dcf1      	bgt.n	800b506 <_printf_float+0x40e>
 800b522:	464b      	mov	r3, r9
 800b524:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b528:	e6da      	b.n	800b2e0 <_printf_float+0x1e8>
 800b52a:	f04f 0800 	mov.w	r8, #0
 800b52e:	f104 0a1a 	add.w	sl, r4, #26
 800b532:	e7f2      	b.n	800b51a <_printf_float+0x422>
 800b534:	2301      	movs	r3, #1
 800b536:	4642      	mov	r2, r8
 800b538:	e7df      	b.n	800b4fa <_printf_float+0x402>
 800b53a:	2301      	movs	r3, #1
 800b53c:	464a      	mov	r2, r9
 800b53e:	4631      	mov	r1, r6
 800b540:	4628      	mov	r0, r5
 800b542:	47b8      	blx	r7
 800b544:	3001      	adds	r0, #1
 800b546:	f43f ae36 	beq.w	800b1b6 <_printf_float+0xbe>
 800b54a:	f108 0801 	add.w	r8, r8, #1
 800b54e:	68e3      	ldr	r3, [r4, #12]
 800b550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b552:	1a5b      	subs	r3, r3, r1
 800b554:	4543      	cmp	r3, r8
 800b556:	dcf0      	bgt.n	800b53a <_printf_float+0x442>
 800b558:	e6f8      	b.n	800b34c <_printf_float+0x254>
 800b55a:	f04f 0800 	mov.w	r8, #0
 800b55e:	f104 0919 	add.w	r9, r4, #25
 800b562:	e7f4      	b.n	800b54e <_printf_float+0x456>

0800b564 <malloc>:
 800b564:	4b02      	ldr	r3, [pc, #8]	; (800b570 <malloc+0xc>)
 800b566:	4601      	mov	r1, r0
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	f000 b823 	b.w	800b5b4 <_malloc_r>
 800b56e:	bf00      	nop
 800b570:	20000104 	.word	0x20000104

0800b574 <sbrk_aligned>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	4e0e      	ldr	r6, [pc, #56]	; (800b5b0 <sbrk_aligned+0x3c>)
 800b578:	460c      	mov	r4, r1
 800b57a:	4605      	mov	r5, r0
 800b57c:	6831      	ldr	r1, [r6, #0]
 800b57e:	b911      	cbnz	r1, 800b586 <sbrk_aligned+0x12>
 800b580:	f000 fc1a 	bl	800bdb8 <_sbrk_r>
 800b584:	6030      	str	r0, [r6, #0]
 800b586:	4621      	mov	r1, r4
 800b588:	4628      	mov	r0, r5
 800b58a:	f000 fc15 	bl	800bdb8 <_sbrk_r>
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	d00a      	beq.n	800b5a8 <sbrk_aligned+0x34>
 800b592:	1cc4      	adds	r4, r0, #3
 800b594:	f024 0403 	bic.w	r4, r4, #3
 800b598:	42a0      	cmp	r0, r4
 800b59a:	d007      	beq.n	800b5ac <sbrk_aligned+0x38>
 800b59c:	1a21      	subs	r1, r4, r0
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f000 fc0a 	bl	800bdb8 <_sbrk_r>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d101      	bne.n	800b5ac <sbrk_aligned+0x38>
 800b5a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
 800b5b0:	20000f2c 	.word	0x20000f2c

0800b5b4 <_malloc_r>:
 800b5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b8:	1ccd      	adds	r5, r1, #3
 800b5ba:	4607      	mov	r7, r0
 800b5bc:	f025 0503 	bic.w	r5, r5, #3
 800b5c0:	3508      	adds	r5, #8
 800b5c2:	2d0c      	cmp	r5, #12
 800b5c4:	bf38      	it	cc
 800b5c6:	250c      	movcc	r5, #12
 800b5c8:	2d00      	cmp	r5, #0
 800b5ca:	db01      	blt.n	800b5d0 <_malloc_r+0x1c>
 800b5cc:	42a9      	cmp	r1, r5
 800b5ce:	d905      	bls.n	800b5dc <_malloc_r+0x28>
 800b5d0:	230c      	movs	r3, #12
 800b5d2:	2600      	movs	r6, #0
 800b5d4:	603b      	str	r3, [r7, #0]
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6b0 <_malloc_r+0xfc>
 800b5e0:	f000 fa2e 	bl	800ba40 <__malloc_lock>
 800b5e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5e8:	461c      	mov	r4, r3
 800b5ea:	bb5c      	cbnz	r4, 800b644 <_malloc_r+0x90>
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	f7ff ffc0 	bl	800b574 <sbrk_aligned>
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	d155      	bne.n	800b6a6 <_malloc_r+0xf2>
 800b5fa:	f8d8 4000 	ldr.w	r4, [r8]
 800b5fe:	4626      	mov	r6, r4
 800b600:	2e00      	cmp	r6, #0
 800b602:	d145      	bne.n	800b690 <_malloc_r+0xdc>
 800b604:	2c00      	cmp	r4, #0
 800b606:	d048      	beq.n	800b69a <_malloc_r+0xe6>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	4631      	mov	r1, r6
 800b60c:	4638      	mov	r0, r7
 800b60e:	eb04 0903 	add.w	r9, r4, r3
 800b612:	f000 fbd1 	bl	800bdb8 <_sbrk_r>
 800b616:	4581      	cmp	r9, r0
 800b618:	d13f      	bne.n	800b69a <_malloc_r+0xe6>
 800b61a:	6821      	ldr	r1, [r4, #0]
 800b61c:	4638      	mov	r0, r7
 800b61e:	1a6d      	subs	r5, r5, r1
 800b620:	4629      	mov	r1, r5
 800b622:	f7ff ffa7 	bl	800b574 <sbrk_aligned>
 800b626:	3001      	adds	r0, #1
 800b628:	d037      	beq.n	800b69a <_malloc_r+0xe6>
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	442b      	add	r3, r5
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	f8d8 3000 	ldr.w	r3, [r8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d038      	beq.n	800b6aa <_malloc_r+0xf6>
 800b638:	685a      	ldr	r2, [r3, #4]
 800b63a:	42a2      	cmp	r2, r4
 800b63c:	d12b      	bne.n	800b696 <_malloc_r+0xe2>
 800b63e:	2200      	movs	r2, #0
 800b640:	605a      	str	r2, [r3, #4]
 800b642:	e00f      	b.n	800b664 <_malloc_r+0xb0>
 800b644:	6822      	ldr	r2, [r4, #0]
 800b646:	1b52      	subs	r2, r2, r5
 800b648:	d41f      	bmi.n	800b68a <_malloc_r+0xd6>
 800b64a:	2a0b      	cmp	r2, #11
 800b64c:	d917      	bls.n	800b67e <_malloc_r+0xca>
 800b64e:	1961      	adds	r1, r4, r5
 800b650:	42a3      	cmp	r3, r4
 800b652:	6025      	str	r5, [r4, #0]
 800b654:	bf18      	it	ne
 800b656:	6059      	strne	r1, [r3, #4]
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	bf08      	it	eq
 800b65c:	f8c8 1000 	streq.w	r1, [r8]
 800b660:	5162      	str	r2, [r4, r5]
 800b662:	604b      	str	r3, [r1, #4]
 800b664:	f104 060b 	add.w	r6, r4, #11
 800b668:	4638      	mov	r0, r7
 800b66a:	f000 f9ef 	bl	800ba4c <__malloc_unlock>
 800b66e:	1d23      	adds	r3, r4, #4
 800b670:	f026 0607 	bic.w	r6, r6, #7
 800b674:	1af2      	subs	r2, r6, r3
 800b676:	d0ae      	beq.n	800b5d6 <_malloc_r+0x22>
 800b678:	1b9b      	subs	r3, r3, r6
 800b67a:	50a3      	str	r3, [r4, r2]
 800b67c:	e7ab      	b.n	800b5d6 <_malloc_r+0x22>
 800b67e:	42a3      	cmp	r3, r4
 800b680:	6862      	ldr	r2, [r4, #4]
 800b682:	d1dd      	bne.n	800b640 <_malloc_r+0x8c>
 800b684:	f8c8 2000 	str.w	r2, [r8]
 800b688:	e7ec      	b.n	800b664 <_malloc_r+0xb0>
 800b68a:	4623      	mov	r3, r4
 800b68c:	6864      	ldr	r4, [r4, #4]
 800b68e:	e7ac      	b.n	800b5ea <_malloc_r+0x36>
 800b690:	4634      	mov	r4, r6
 800b692:	6876      	ldr	r6, [r6, #4]
 800b694:	e7b4      	b.n	800b600 <_malloc_r+0x4c>
 800b696:	4613      	mov	r3, r2
 800b698:	e7cc      	b.n	800b634 <_malloc_r+0x80>
 800b69a:	230c      	movs	r3, #12
 800b69c:	4638      	mov	r0, r7
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	f000 f9d4 	bl	800ba4c <__malloc_unlock>
 800b6a4:	e797      	b.n	800b5d6 <_malloc_r+0x22>
 800b6a6:	6025      	str	r5, [r4, #0]
 800b6a8:	e7dc      	b.n	800b664 <_malloc_r+0xb0>
 800b6aa:	605b      	str	r3, [r3, #4]
 800b6ac:	deff      	udf	#255	; 0xff
 800b6ae:	bf00      	nop
 800b6b0:	20000f28 	.word	0x20000f28

0800b6b4 <_printf_common>:
 800b6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b8:	4616      	mov	r6, r2
 800b6ba:	4699      	mov	r9, r3
 800b6bc:	688a      	ldr	r2, [r1, #8]
 800b6be:	4607      	mov	r7, r0
 800b6c0:	690b      	ldr	r3, [r1, #16]
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	bfb8      	it	lt
 800b6cc:	4613      	movlt	r3, r2
 800b6ce:	6033      	str	r3, [r6, #0]
 800b6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6d4:	b10a      	cbz	r2, 800b6da <_printf_common+0x26>
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	6033      	str	r3, [r6, #0]
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	0699      	lsls	r1, r3, #26
 800b6de:	bf42      	ittt	mi
 800b6e0:	6833      	ldrmi	r3, [r6, #0]
 800b6e2:	3302      	addmi	r3, #2
 800b6e4:	6033      	strmi	r3, [r6, #0]
 800b6e6:	6825      	ldr	r5, [r4, #0]
 800b6e8:	f015 0506 	ands.w	r5, r5, #6
 800b6ec:	d106      	bne.n	800b6fc <_printf_common+0x48>
 800b6ee:	f104 0a19 	add.w	sl, r4, #25
 800b6f2:	68e3      	ldr	r3, [r4, #12]
 800b6f4:	6832      	ldr	r2, [r6, #0]
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	dc2b      	bgt.n	800b754 <_printf_common+0xa0>
 800b6fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b700:	1e13      	subs	r3, r2, #0
 800b702:	6822      	ldr	r2, [r4, #0]
 800b704:	bf18      	it	ne
 800b706:	2301      	movne	r3, #1
 800b708:	0692      	lsls	r2, r2, #26
 800b70a:	d430      	bmi.n	800b76e <_printf_common+0xba>
 800b70c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b710:	4649      	mov	r1, r9
 800b712:	4638      	mov	r0, r7
 800b714:	47c0      	blx	r8
 800b716:	3001      	adds	r0, #1
 800b718:	d023      	beq.n	800b762 <_printf_common+0xae>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	341a      	adds	r4, #26
 800b71e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b722:	f003 0306 	and.w	r3, r3, #6
 800b726:	2b04      	cmp	r3, #4
 800b728:	bf0a      	itet	eq
 800b72a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b72e:	2500      	movne	r5, #0
 800b730:	6833      	ldreq	r3, [r6, #0]
 800b732:	f04f 0600 	mov.w	r6, #0
 800b736:	bf08      	it	eq
 800b738:	1aed      	subeq	r5, r5, r3
 800b73a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b73e:	bf08      	it	eq
 800b740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b744:	4293      	cmp	r3, r2
 800b746:	bfc4      	itt	gt
 800b748:	1a9b      	subgt	r3, r3, r2
 800b74a:	18ed      	addgt	r5, r5, r3
 800b74c:	42b5      	cmp	r5, r6
 800b74e:	d11a      	bne.n	800b786 <_printf_common+0xd2>
 800b750:	2000      	movs	r0, #0
 800b752:	e008      	b.n	800b766 <_printf_common+0xb2>
 800b754:	2301      	movs	r3, #1
 800b756:	4652      	mov	r2, sl
 800b758:	4649      	mov	r1, r9
 800b75a:	4638      	mov	r0, r7
 800b75c:	47c0      	blx	r8
 800b75e:	3001      	adds	r0, #1
 800b760:	d103      	bne.n	800b76a <_printf_common+0xb6>
 800b762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76a:	3501      	adds	r5, #1
 800b76c:	e7c1      	b.n	800b6f2 <_printf_common+0x3e>
 800b76e:	18e1      	adds	r1, r4, r3
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	2030      	movs	r0, #48	; 0x30
 800b774:	3302      	adds	r3, #2
 800b776:	4422      	add	r2, r4
 800b778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b77c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b784:	e7c2      	b.n	800b70c <_printf_common+0x58>
 800b786:	2301      	movs	r3, #1
 800b788:	4622      	mov	r2, r4
 800b78a:	4649      	mov	r1, r9
 800b78c:	4638      	mov	r0, r7
 800b78e:	47c0      	blx	r8
 800b790:	3001      	adds	r0, #1
 800b792:	d0e6      	beq.n	800b762 <_printf_common+0xae>
 800b794:	3601      	adds	r6, #1
 800b796:	e7d9      	b.n	800b74c <_printf_common+0x98>

0800b798 <_printf_i>:
 800b798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b79c:	7e0f      	ldrb	r7, [r1, #24]
 800b79e:	4691      	mov	r9, r2
 800b7a0:	4680      	mov	r8, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	2f78      	cmp	r7, #120	; 0x78
 800b7a6:	469a      	mov	sl, r3
 800b7a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7ae:	d807      	bhi.n	800b7c0 <_printf_i+0x28>
 800b7b0:	2f62      	cmp	r7, #98	; 0x62
 800b7b2:	d80a      	bhi.n	800b7ca <_printf_i+0x32>
 800b7b4:	2f00      	cmp	r7, #0
 800b7b6:	f000 80d3 	beq.w	800b960 <_printf_i+0x1c8>
 800b7ba:	2f58      	cmp	r7, #88	; 0x58
 800b7bc:	f000 80bf 	beq.w	800b93e <_printf_i+0x1a6>
 800b7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7c8:	e03a      	b.n	800b840 <_printf_i+0xa8>
 800b7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7ce:	2b15      	cmp	r3, #21
 800b7d0:	d8f6      	bhi.n	800b7c0 <_printf_i+0x28>
 800b7d2:	a101      	add	r1, pc, #4	; (adr r1, 800b7d8 <_printf_i+0x40>)
 800b7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7d8:	0800b831 	.word	0x0800b831
 800b7dc:	0800b845 	.word	0x0800b845
 800b7e0:	0800b7c1 	.word	0x0800b7c1
 800b7e4:	0800b7c1 	.word	0x0800b7c1
 800b7e8:	0800b7c1 	.word	0x0800b7c1
 800b7ec:	0800b7c1 	.word	0x0800b7c1
 800b7f0:	0800b845 	.word	0x0800b845
 800b7f4:	0800b7c1 	.word	0x0800b7c1
 800b7f8:	0800b7c1 	.word	0x0800b7c1
 800b7fc:	0800b7c1 	.word	0x0800b7c1
 800b800:	0800b7c1 	.word	0x0800b7c1
 800b804:	0800b947 	.word	0x0800b947
 800b808:	0800b871 	.word	0x0800b871
 800b80c:	0800b903 	.word	0x0800b903
 800b810:	0800b7c1 	.word	0x0800b7c1
 800b814:	0800b7c1 	.word	0x0800b7c1
 800b818:	0800b969 	.word	0x0800b969
 800b81c:	0800b7c1 	.word	0x0800b7c1
 800b820:	0800b871 	.word	0x0800b871
 800b824:	0800b7c1 	.word	0x0800b7c1
 800b828:	0800b7c1 	.word	0x0800b7c1
 800b82c:	0800b90b 	.word	0x0800b90b
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	1d1a      	adds	r2, r3, #4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	602a      	str	r2, [r5, #0]
 800b838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b840:	2301      	movs	r3, #1
 800b842:	e09e      	b.n	800b982 <_printf_i+0x1ea>
 800b844:	6820      	ldr	r0, [r4, #0]
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	0607      	lsls	r7, r0, #24
 800b84a:	f103 0104 	add.w	r1, r3, #4
 800b84e:	6029      	str	r1, [r5, #0]
 800b850:	d501      	bpl.n	800b856 <_printf_i+0xbe>
 800b852:	681e      	ldr	r6, [r3, #0]
 800b854:	e003      	b.n	800b85e <_printf_i+0xc6>
 800b856:	0646      	lsls	r6, r0, #25
 800b858:	d5fb      	bpl.n	800b852 <_printf_i+0xba>
 800b85a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b85e:	2e00      	cmp	r6, #0
 800b860:	da03      	bge.n	800b86a <_printf_i+0xd2>
 800b862:	232d      	movs	r3, #45	; 0x2d
 800b864:	4276      	negs	r6, r6
 800b866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b86a:	4859      	ldr	r0, [pc, #356]	; (800b9d0 <_printf_i+0x238>)
 800b86c:	230a      	movs	r3, #10
 800b86e:	e012      	b.n	800b896 <_printf_i+0xfe>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	6820      	ldr	r0, [r4, #0]
 800b874:	1d19      	adds	r1, r3, #4
 800b876:	6029      	str	r1, [r5, #0]
 800b878:	0605      	lsls	r5, r0, #24
 800b87a:	d501      	bpl.n	800b880 <_printf_i+0xe8>
 800b87c:	681e      	ldr	r6, [r3, #0]
 800b87e:	e002      	b.n	800b886 <_printf_i+0xee>
 800b880:	0641      	lsls	r1, r0, #25
 800b882:	d5fb      	bpl.n	800b87c <_printf_i+0xe4>
 800b884:	881e      	ldrh	r6, [r3, #0]
 800b886:	2f6f      	cmp	r7, #111	; 0x6f
 800b888:	4851      	ldr	r0, [pc, #324]	; (800b9d0 <_printf_i+0x238>)
 800b88a:	bf0c      	ite	eq
 800b88c:	2308      	moveq	r3, #8
 800b88e:	230a      	movne	r3, #10
 800b890:	2100      	movs	r1, #0
 800b892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b896:	6865      	ldr	r5, [r4, #4]
 800b898:	2d00      	cmp	r5, #0
 800b89a:	60a5      	str	r5, [r4, #8]
 800b89c:	bfa2      	ittt	ge
 800b89e:	6821      	ldrge	r1, [r4, #0]
 800b8a0:	f021 0104 	bicge.w	r1, r1, #4
 800b8a4:	6021      	strge	r1, [r4, #0]
 800b8a6:	b90e      	cbnz	r6, 800b8ac <_printf_i+0x114>
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	d04a      	beq.n	800b942 <_printf_i+0x1aa>
 800b8ac:	4615      	mov	r5, r2
 800b8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800b8b6:	5dc7      	ldrb	r7, [r0, r7]
 800b8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8bc:	4637      	mov	r7, r6
 800b8be:	460e      	mov	r6, r1
 800b8c0:	42bb      	cmp	r3, r7
 800b8c2:	d9f4      	bls.n	800b8ae <_printf_i+0x116>
 800b8c4:	2b08      	cmp	r3, #8
 800b8c6:	d10b      	bne.n	800b8e0 <_printf_i+0x148>
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	07de      	lsls	r6, r3, #31
 800b8cc:	d508      	bpl.n	800b8e0 <_printf_i+0x148>
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	6861      	ldr	r1, [r4, #4]
 800b8d2:	4299      	cmp	r1, r3
 800b8d4:	bfde      	ittt	le
 800b8d6:	2330      	movle	r3, #48	; 0x30
 800b8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b8e0:	1b52      	subs	r2, r2, r5
 800b8e2:	6122      	str	r2, [r4, #16]
 800b8e4:	464b      	mov	r3, r9
 800b8e6:	aa03      	add	r2, sp, #12
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	f8cd a000 	str.w	sl, [sp]
 800b8f0:	f7ff fee0 	bl	800b6b4 <_printf_common>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d149      	bne.n	800b98c <_printf_i+0x1f4>
 800b8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8fc:	b004      	add	sp, #16
 800b8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	f043 0320 	orr.w	r3, r3, #32
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	2778      	movs	r7, #120	; 0x78
 800b90c:	4831      	ldr	r0, [pc, #196]	; (800b9d4 <_printf_i+0x23c>)
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b914:	061f      	lsls	r7, r3, #24
 800b916:	6829      	ldr	r1, [r5, #0]
 800b918:	f851 6b04 	ldr.w	r6, [r1], #4
 800b91c:	d402      	bmi.n	800b924 <_printf_i+0x18c>
 800b91e:	065f      	lsls	r7, r3, #25
 800b920:	bf48      	it	mi
 800b922:	b2b6      	uxthmi	r6, r6
 800b924:	07df      	lsls	r7, r3, #31
 800b926:	6029      	str	r1, [r5, #0]
 800b928:	bf44      	itt	mi
 800b92a:	f043 0320 	orrmi.w	r3, r3, #32
 800b92e:	6023      	strmi	r3, [r4, #0]
 800b930:	b91e      	cbnz	r6, 800b93a <_printf_i+0x1a2>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	f023 0320 	bic.w	r3, r3, #32
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	2310      	movs	r3, #16
 800b93c:	e7a8      	b.n	800b890 <_printf_i+0xf8>
 800b93e:	4824      	ldr	r0, [pc, #144]	; (800b9d0 <_printf_i+0x238>)
 800b940:	e7e5      	b.n	800b90e <_printf_i+0x176>
 800b942:	4615      	mov	r5, r2
 800b944:	e7be      	b.n	800b8c4 <_printf_i+0x12c>
 800b946:	682b      	ldr	r3, [r5, #0]
 800b948:	6826      	ldr	r6, [r4, #0]
 800b94a:	1d18      	adds	r0, r3, #4
 800b94c:	6961      	ldr	r1, [r4, #20]
 800b94e:	6028      	str	r0, [r5, #0]
 800b950:	0635      	lsls	r5, r6, #24
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	d501      	bpl.n	800b95a <_printf_i+0x1c2>
 800b956:	6019      	str	r1, [r3, #0]
 800b958:	e002      	b.n	800b960 <_printf_i+0x1c8>
 800b95a:	0670      	lsls	r0, r6, #25
 800b95c:	d5fb      	bpl.n	800b956 <_printf_i+0x1be>
 800b95e:	8019      	strh	r1, [r3, #0]
 800b960:	2300      	movs	r3, #0
 800b962:	4615      	mov	r5, r2
 800b964:	6123      	str	r3, [r4, #16]
 800b966:	e7bd      	b.n	800b8e4 <_printf_i+0x14c>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	2100      	movs	r1, #0
 800b96c:	1d1a      	adds	r2, r3, #4
 800b96e:	602a      	str	r2, [r5, #0]
 800b970:	681d      	ldr	r5, [r3, #0]
 800b972:	6862      	ldr	r2, [r4, #4]
 800b974:	4628      	mov	r0, r5
 800b976:	f000 fa5c 	bl	800be32 <memchr>
 800b97a:	b108      	cbz	r0, 800b980 <_printf_i+0x1e8>
 800b97c:	1b40      	subs	r0, r0, r5
 800b97e:	6060      	str	r0, [r4, #4]
 800b980:	6863      	ldr	r3, [r4, #4]
 800b982:	6123      	str	r3, [r4, #16]
 800b984:	2300      	movs	r3, #0
 800b986:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b98a:	e7ab      	b.n	800b8e4 <_printf_i+0x14c>
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	462a      	mov	r2, r5
 800b990:	4649      	mov	r1, r9
 800b992:	4640      	mov	r0, r8
 800b994:	47d0      	blx	sl
 800b996:	3001      	adds	r0, #1
 800b998:	d0ae      	beq.n	800b8f8 <_printf_i+0x160>
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	079b      	lsls	r3, r3, #30
 800b99e:	d413      	bmi.n	800b9c8 <_printf_i+0x230>
 800b9a0:	68e0      	ldr	r0, [r4, #12]
 800b9a2:	9b03      	ldr	r3, [sp, #12]
 800b9a4:	4298      	cmp	r0, r3
 800b9a6:	bfb8      	it	lt
 800b9a8:	4618      	movlt	r0, r3
 800b9aa:	e7a7      	b.n	800b8fc <_printf_i+0x164>
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	4632      	mov	r2, r6
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	47d0      	blx	sl
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d09e      	beq.n	800b8f8 <_printf_i+0x160>
 800b9ba:	3501      	adds	r5, #1
 800b9bc:	68e3      	ldr	r3, [r4, #12]
 800b9be:	9903      	ldr	r1, [sp, #12]
 800b9c0:	1a5b      	subs	r3, r3, r1
 800b9c2:	42ab      	cmp	r3, r5
 800b9c4:	dcf2      	bgt.n	800b9ac <_printf_i+0x214>
 800b9c6:	e7eb      	b.n	800b9a0 <_printf_i+0x208>
 800b9c8:	2500      	movs	r5, #0
 800b9ca:	f104 0619 	add.w	r6, r4, #25
 800b9ce:	e7f5      	b.n	800b9bc <_printf_i+0x224>
 800b9d0:	0800fa62 	.word	0x0800fa62
 800b9d4:	0800fa73 	.word	0x0800fa73

0800b9d8 <sniprintf>:
 800b9d8:	b40c      	push	{r2, r3}
 800b9da:	4b18      	ldr	r3, [pc, #96]	; (800ba3c <sniprintf+0x64>)
 800b9dc:	b530      	push	{r4, r5, lr}
 800b9de:	1e0c      	subs	r4, r1, #0
 800b9e0:	b09d      	sub	sp, #116	; 0x74
 800b9e2:	681d      	ldr	r5, [r3, #0]
 800b9e4:	da08      	bge.n	800b9f8 <sniprintf+0x20>
 800b9e6:	238b      	movs	r3, #139	; 0x8b
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	b01d      	add	sp, #116	; 0x74
 800b9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9f4:	b002      	add	sp, #8
 800b9f6:	4770      	bx	lr
 800b9f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9fc:	9002      	str	r0, [sp, #8]
 800b9fe:	9006      	str	r0, [sp, #24]
 800ba00:	a902      	add	r1, sp, #8
 800ba02:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ba06:	bf14      	ite	ne
 800ba08:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ba0c:	4623      	moveq	r3, r4
 800ba0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ba10:	4628      	mov	r0, r5
 800ba12:	9304      	str	r3, [sp, #16]
 800ba14:	9307      	str	r3, [sp, #28]
 800ba16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba1e:	ab21      	add	r3, sp, #132	; 0x84
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	f001 f967 	bl	800ccf4 <_svfiprintf_r>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	bfbc      	itt	lt
 800ba2a:	238b      	movlt	r3, #139	; 0x8b
 800ba2c:	602b      	strlt	r3, [r5, #0]
 800ba2e:	2c00      	cmp	r4, #0
 800ba30:	d0dd      	beq.n	800b9ee <sniprintf+0x16>
 800ba32:	9b02      	ldr	r3, [sp, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	701a      	strb	r2, [r3, #0]
 800ba38:	e7d9      	b.n	800b9ee <sniprintf+0x16>
 800ba3a:	bf00      	nop
 800ba3c:	20000104 	.word	0x20000104

0800ba40 <__malloc_lock>:
 800ba40:	4801      	ldr	r0, [pc, #4]	; (800ba48 <__malloc_lock+0x8>)
 800ba42:	f000 b9f4 	b.w	800be2e <__retarget_lock_acquire_recursive>
 800ba46:	bf00      	nop
 800ba48:	2000106c 	.word	0x2000106c

0800ba4c <__malloc_unlock>:
 800ba4c:	4801      	ldr	r0, [pc, #4]	; (800ba54 <__malloc_unlock+0x8>)
 800ba4e:	f000 b9ef 	b.w	800be30 <__retarget_lock_release_recursive>
 800ba52:	bf00      	nop
 800ba54:	2000106c 	.word	0x2000106c

0800ba58 <srand>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4b10      	ldr	r3, [pc, #64]	; (800ba9c <srand+0x44>)
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	681d      	ldr	r5, [r3, #0]
 800ba60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ba62:	b9b3      	cbnz	r3, 800ba92 <srand+0x3a>
 800ba64:	2018      	movs	r0, #24
 800ba66:	f7ff fd7d 	bl	800b564 <malloc>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	6328      	str	r0, [r5, #48]	; 0x30
 800ba6e:	b920      	cbnz	r0, 800ba7a <srand+0x22>
 800ba70:	4b0b      	ldr	r3, [pc, #44]	; (800baa0 <srand+0x48>)
 800ba72:	2146      	movs	r1, #70	; 0x46
 800ba74:	480b      	ldr	r0, [pc, #44]	; (800baa4 <srand+0x4c>)
 800ba76:	f000 f9f7 	bl	800be68 <__assert_func>
 800ba7a:	490b      	ldr	r1, [pc, #44]	; (800baa8 <srand+0x50>)
 800ba7c:	4b0b      	ldr	r3, [pc, #44]	; (800baac <srand+0x54>)
 800ba7e:	e9c0 1300 	strd	r1, r3, [r0]
 800ba82:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <srand+0x58>)
 800ba84:	2100      	movs	r1, #0
 800ba86:	6083      	str	r3, [r0, #8]
 800ba88:	230b      	movs	r3, #11
 800ba8a:	8183      	strh	r3, [r0, #12]
 800ba8c:	2001      	movs	r0, #1
 800ba8e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ba92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ba94:	2200      	movs	r2, #0
 800ba96:	611c      	str	r4, [r3, #16]
 800ba98:	615a      	str	r2, [r3, #20]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	20000104 	.word	0x20000104
 800baa0:	0800fa84 	.word	0x0800fa84
 800baa4:	0800fa9b 	.word	0x0800fa9b
 800baa8:	abcd330e 	.word	0xabcd330e
 800baac:	e66d1234 	.word	0xe66d1234
 800bab0:	0005deec 	.word	0x0005deec

0800bab4 <rand>:
 800bab4:	4b16      	ldr	r3, [pc, #88]	; (800bb10 <rand+0x5c>)
 800bab6:	b510      	push	{r4, lr}
 800bab8:	681c      	ldr	r4, [r3, #0]
 800baba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800babc:	b9b3      	cbnz	r3, 800baec <rand+0x38>
 800babe:	2018      	movs	r0, #24
 800bac0:	f7ff fd50 	bl	800b564 <malloc>
 800bac4:	4602      	mov	r2, r0
 800bac6:	6320      	str	r0, [r4, #48]	; 0x30
 800bac8:	b920      	cbnz	r0, 800bad4 <rand+0x20>
 800baca:	4b12      	ldr	r3, [pc, #72]	; (800bb14 <rand+0x60>)
 800bacc:	2152      	movs	r1, #82	; 0x52
 800bace:	4812      	ldr	r0, [pc, #72]	; (800bb18 <rand+0x64>)
 800bad0:	f000 f9ca 	bl	800be68 <__assert_func>
 800bad4:	4911      	ldr	r1, [pc, #68]	; (800bb1c <rand+0x68>)
 800bad6:	4b12      	ldr	r3, [pc, #72]	; (800bb20 <rand+0x6c>)
 800bad8:	e9c0 1300 	strd	r1, r3, [r0]
 800badc:	4b11      	ldr	r3, [pc, #68]	; (800bb24 <rand+0x70>)
 800bade:	2100      	movs	r1, #0
 800bae0:	6083      	str	r3, [r0, #8]
 800bae2:	230b      	movs	r3, #11
 800bae4:	8183      	strh	r3, [r0, #12]
 800bae6:	2001      	movs	r0, #1
 800bae8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800baec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800baee:	480e      	ldr	r0, [pc, #56]	; (800bb28 <rand+0x74>)
 800baf0:	690b      	ldr	r3, [r1, #16]
 800baf2:	694c      	ldr	r4, [r1, #20]
 800baf4:	4a0d      	ldr	r2, [pc, #52]	; (800bb2c <rand+0x78>)
 800baf6:	4358      	muls	r0, r3
 800baf8:	fb02 0004 	mla	r0, r2, r4, r0
 800bafc:	fba3 3202 	umull	r3, r2, r3, r2
 800bb00:	3301      	adds	r3, #1
 800bb02:	eb40 0002 	adc.w	r0, r0, r2
 800bb06:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bb0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bb0e:	bd10      	pop	{r4, pc}
 800bb10:	20000104 	.word	0x20000104
 800bb14:	0800fa84 	.word	0x0800fa84
 800bb18:	0800fa9b 	.word	0x0800fa9b
 800bb1c:	abcd330e 	.word	0xabcd330e
 800bb20:	e66d1234 	.word	0xe66d1234
 800bb24:	0005deec 	.word	0x0005deec
 800bb28:	5851f42d 	.word	0x5851f42d
 800bb2c:	4c957f2d 	.word	0x4c957f2d

0800bb30 <std>:
 800bb30:	2300      	movs	r3, #0
 800bb32:	b510      	push	{r4, lr}
 800bb34:	4604      	mov	r4, r0
 800bb36:	6083      	str	r3, [r0, #8]
 800bb38:	8181      	strh	r1, [r0, #12]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6643      	str	r3, [r0, #100]	; 0x64
 800bb3e:	81c2      	strh	r2, [r0, #14]
 800bb40:	2208      	movs	r2, #8
 800bb42:	6183      	str	r3, [r0, #24]
 800bb44:	e9c0 3300 	strd	r3, r3, [r0]
 800bb48:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb4c:	305c      	adds	r0, #92	; 0x5c
 800bb4e:	f000 f927 	bl	800bda0 <memset>
 800bb52:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <std+0x58>)
 800bb54:	6224      	str	r4, [r4, #32]
 800bb56:	6263      	str	r3, [r4, #36]	; 0x24
 800bb58:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <std+0x5c>)
 800bb5a:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb5c:	4b0c      	ldr	r3, [pc, #48]	; (800bb90 <std+0x60>)
 800bb5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb60:	4b0c      	ldr	r3, [pc, #48]	; (800bb94 <std+0x64>)
 800bb62:	6323      	str	r3, [r4, #48]	; 0x30
 800bb64:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <std+0x68>)
 800bb66:	429c      	cmp	r4, r3
 800bb68:	d006      	beq.n	800bb78 <std+0x48>
 800bb6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bb6e:	4294      	cmp	r4, r2
 800bb70:	d002      	beq.n	800bb78 <std+0x48>
 800bb72:	33d0      	adds	r3, #208	; 0xd0
 800bb74:	429c      	cmp	r4, r3
 800bb76:	d105      	bne.n	800bb84 <std+0x54>
 800bb78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb80:	f000 b954 	b.w	800be2c <__retarget_lock_init_recursive>
 800bb84:	bd10      	pop	{r4, pc}
 800bb86:	bf00      	nop
 800bb88:	0800d9d9 	.word	0x0800d9d9
 800bb8c:	0800d9fb 	.word	0x0800d9fb
 800bb90:	0800da33 	.word	0x0800da33
 800bb94:	0800da57 	.word	0x0800da57
 800bb98:	20000f30 	.word	0x20000f30

0800bb9c <stdio_exit_handler>:
 800bb9c:	4a02      	ldr	r2, [pc, #8]	; (800bba8 <stdio_exit_handler+0xc>)
 800bb9e:	4903      	ldr	r1, [pc, #12]	; (800bbac <stdio_exit_handler+0x10>)
 800bba0:	4803      	ldr	r0, [pc, #12]	; (800bbb0 <stdio_exit_handler+0x14>)
 800bba2:	f000 b869 	b.w	800bc78 <_fwalk_sglue>
 800bba6:	bf00      	nop
 800bba8:	200000ac 	.word	0x200000ac
 800bbac:	0800d281 	.word	0x0800d281
 800bbb0:	200000b8 	.word	0x200000b8

0800bbb4 <cleanup_stdio>:
 800bbb4:	6841      	ldr	r1, [r0, #4]
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <cleanup_stdio+0x34>)
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	d001      	beq.n	800bbc4 <cleanup_stdio+0x10>
 800bbc0:	f001 fb5e 	bl	800d280 <_fflush_r>
 800bbc4:	68a1      	ldr	r1, [r4, #8]
 800bbc6:	4b09      	ldr	r3, [pc, #36]	; (800bbec <cleanup_stdio+0x38>)
 800bbc8:	4299      	cmp	r1, r3
 800bbca:	d002      	beq.n	800bbd2 <cleanup_stdio+0x1e>
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f001 fb57 	bl	800d280 <_fflush_r>
 800bbd2:	68e1      	ldr	r1, [r4, #12]
 800bbd4:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <cleanup_stdio+0x3c>)
 800bbd6:	4299      	cmp	r1, r3
 800bbd8:	d004      	beq.n	800bbe4 <cleanup_stdio+0x30>
 800bbda:	4620      	mov	r0, r4
 800bbdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe0:	f001 bb4e 	b.w	800d280 <_fflush_r>
 800bbe4:	bd10      	pop	{r4, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20000f30 	.word	0x20000f30
 800bbec:	20000f98 	.word	0x20000f98
 800bbf0:	20001000 	.word	0x20001000

0800bbf4 <global_stdio_init.part.0>:
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	4b0b      	ldr	r3, [pc, #44]	; (800bc24 <global_stdio_init.part.0+0x30>)
 800bbf8:	2104      	movs	r1, #4
 800bbfa:	4c0b      	ldr	r4, [pc, #44]	; (800bc28 <global_stdio_init.part.0+0x34>)
 800bbfc:	4a0b      	ldr	r2, [pc, #44]	; (800bc2c <global_stdio_init.part.0+0x38>)
 800bbfe:	4620      	mov	r0, r4
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f7ff ff94 	bl	800bb30 <std>
 800bc08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	2109      	movs	r1, #9
 800bc10:	f7ff ff8e 	bl	800bb30 <std>
 800bc14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc18:	2202      	movs	r2, #2
 800bc1a:	2112      	movs	r1, #18
 800bc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc20:	f7ff bf86 	b.w	800bb30 <std>
 800bc24:	20001068 	.word	0x20001068
 800bc28:	20000f30 	.word	0x20000f30
 800bc2c:	0800bb9d 	.word	0x0800bb9d

0800bc30 <__sfp_lock_acquire>:
 800bc30:	4801      	ldr	r0, [pc, #4]	; (800bc38 <__sfp_lock_acquire+0x8>)
 800bc32:	f000 b8fc 	b.w	800be2e <__retarget_lock_acquire_recursive>
 800bc36:	bf00      	nop
 800bc38:	2000106d 	.word	0x2000106d

0800bc3c <__sfp_lock_release>:
 800bc3c:	4801      	ldr	r0, [pc, #4]	; (800bc44 <__sfp_lock_release+0x8>)
 800bc3e:	f000 b8f7 	b.w	800be30 <__retarget_lock_release_recursive>
 800bc42:	bf00      	nop
 800bc44:	2000106d 	.word	0x2000106d

0800bc48 <__sinit>:
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	f7ff fff0 	bl	800bc30 <__sfp_lock_acquire>
 800bc50:	6a23      	ldr	r3, [r4, #32]
 800bc52:	b11b      	cbz	r3, 800bc5c <__sinit+0x14>
 800bc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc58:	f7ff bff0 	b.w	800bc3c <__sfp_lock_release>
 800bc5c:	4b04      	ldr	r3, [pc, #16]	; (800bc70 <__sinit+0x28>)
 800bc5e:	6223      	str	r3, [r4, #32]
 800bc60:	4b04      	ldr	r3, [pc, #16]	; (800bc74 <__sinit+0x2c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1f5      	bne.n	800bc54 <__sinit+0xc>
 800bc68:	f7ff ffc4 	bl	800bbf4 <global_stdio_init.part.0>
 800bc6c:	e7f2      	b.n	800bc54 <__sinit+0xc>
 800bc6e:	bf00      	nop
 800bc70:	0800bbb5 	.word	0x0800bbb5
 800bc74:	20001068 	.word	0x20001068

0800bc78 <_fwalk_sglue>:
 800bc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	4688      	mov	r8, r1
 800bc80:	4614      	mov	r4, r2
 800bc82:	2600      	movs	r6, #0
 800bc84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc88:	f1b9 0901 	subs.w	r9, r9, #1
 800bc8c:	d505      	bpl.n	800bc9a <_fwalk_sglue+0x22>
 800bc8e:	6824      	ldr	r4, [r4, #0]
 800bc90:	2c00      	cmp	r4, #0
 800bc92:	d1f7      	bne.n	800bc84 <_fwalk_sglue+0xc>
 800bc94:	4630      	mov	r0, r6
 800bc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9a:	89ab      	ldrh	r3, [r5, #12]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d907      	bls.n	800bcb0 <_fwalk_sglue+0x38>
 800bca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bca4:	3301      	adds	r3, #1
 800bca6:	d003      	beq.n	800bcb0 <_fwalk_sglue+0x38>
 800bca8:	4629      	mov	r1, r5
 800bcaa:	4638      	mov	r0, r7
 800bcac:	47c0      	blx	r8
 800bcae:	4306      	orrs	r6, r0
 800bcb0:	3568      	adds	r5, #104	; 0x68
 800bcb2:	e7e9      	b.n	800bc88 <_fwalk_sglue+0x10>

0800bcb4 <iprintf>:
 800bcb4:	b40f      	push	{r0, r1, r2, r3}
 800bcb6:	b507      	push	{r0, r1, r2, lr}
 800bcb8:	4906      	ldr	r1, [pc, #24]	; (800bcd4 <iprintf+0x20>)
 800bcba:	ab04      	add	r3, sp, #16
 800bcbc:	6808      	ldr	r0, [r1, #0]
 800bcbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc2:	6881      	ldr	r1, [r0, #8]
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	f001 f93d 	bl	800cf44 <_vfiprintf_r>
 800bcca:	b003      	add	sp, #12
 800bccc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd0:	b004      	add	sp, #16
 800bcd2:	4770      	bx	lr
 800bcd4:	20000104 	.word	0x20000104

0800bcd8 <putchar>:
 800bcd8:	4b02      	ldr	r3, [pc, #8]	; (800bce4 <putchar+0xc>)
 800bcda:	4601      	mov	r1, r0
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	6882      	ldr	r2, [r0, #8]
 800bce0:	f001 bff5 	b.w	800dcce <_putc_r>
 800bce4:	20000104 	.word	0x20000104

0800bce8 <_puts_r>:
 800bce8:	6a03      	ldr	r3, [r0, #32]
 800bcea:	b570      	push	{r4, r5, r6, lr}
 800bcec:	4605      	mov	r5, r0
 800bcee:	460e      	mov	r6, r1
 800bcf0:	6884      	ldr	r4, [r0, #8]
 800bcf2:	b90b      	cbnz	r3, 800bcf8 <_puts_r+0x10>
 800bcf4:	f7ff ffa8 	bl	800bc48 <__sinit>
 800bcf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcfa:	07db      	lsls	r3, r3, #31
 800bcfc:	d405      	bmi.n	800bd0a <_puts_r+0x22>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	0598      	lsls	r0, r3, #22
 800bd02:	d402      	bmi.n	800bd0a <_puts_r+0x22>
 800bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd06:	f000 f892 	bl	800be2e <__retarget_lock_acquire_recursive>
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	0719      	lsls	r1, r3, #28
 800bd0e:	d513      	bpl.n	800bd38 <_puts_r+0x50>
 800bd10:	6923      	ldr	r3, [r4, #16]
 800bd12:	b18b      	cbz	r3, 800bd38 <_puts_r+0x50>
 800bd14:	3e01      	subs	r6, #1
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	60a3      	str	r3, [r4, #8]
 800bd20:	b9e9      	cbnz	r1, 800bd5e <_puts_r+0x76>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	da2e      	bge.n	800bd84 <_puts_r+0x9c>
 800bd26:	4622      	mov	r2, r4
 800bd28:	210a      	movs	r1, #10
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	f001 fed9 	bl	800dae2 <__swbuf_r>
 800bd30:	3001      	adds	r0, #1
 800bd32:	d007      	beq.n	800bd44 <_puts_r+0x5c>
 800bd34:	250a      	movs	r5, #10
 800bd36:	e007      	b.n	800bd48 <_puts_r+0x60>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f001 ff0e 	bl	800db5c <__swsetup_r>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d0e7      	beq.n	800bd14 <_puts_r+0x2c>
 800bd44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bd48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd4a:	07da      	lsls	r2, r3, #31
 800bd4c:	d405      	bmi.n	800bd5a <_puts_r+0x72>
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	059b      	lsls	r3, r3, #22
 800bd52:	d402      	bmi.n	800bd5a <_puts_r+0x72>
 800bd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd56:	f000 f86b 	bl	800be30 <__retarget_lock_release_recursive>
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	bd70      	pop	{r4, r5, r6, pc}
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	da04      	bge.n	800bd6c <_puts_r+0x84>
 800bd62:	69a2      	ldr	r2, [r4, #24]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	dc06      	bgt.n	800bd76 <_puts_r+0x8e>
 800bd68:	290a      	cmp	r1, #10
 800bd6a:	d004      	beq.n	800bd76 <_puts_r+0x8e>
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	6022      	str	r2, [r4, #0]
 800bd72:	7019      	strb	r1, [r3, #0]
 800bd74:	e7cf      	b.n	800bd16 <_puts_r+0x2e>
 800bd76:	4622      	mov	r2, r4
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f001 feb2 	bl	800dae2 <__swbuf_r>
 800bd7e:	3001      	adds	r0, #1
 800bd80:	d1c9      	bne.n	800bd16 <_puts_r+0x2e>
 800bd82:	e7df      	b.n	800bd44 <_puts_r+0x5c>
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	250a      	movs	r5, #10
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	6022      	str	r2, [r4, #0]
 800bd8c:	701d      	strb	r5, [r3, #0]
 800bd8e:	e7db      	b.n	800bd48 <_puts_r+0x60>

0800bd90 <puts>:
 800bd90:	4b02      	ldr	r3, [pc, #8]	; (800bd9c <puts+0xc>)
 800bd92:	4601      	mov	r1, r0
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	f7ff bfa7 	b.w	800bce8 <_puts_r>
 800bd9a:	bf00      	nop
 800bd9c:	20000104 	.word	0x20000104

0800bda0 <memset>:
 800bda0:	4402      	add	r2, r0
 800bda2:	4603      	mov	r3, r0
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d100      	bne.n	800bdaa <memset+0xa>
 800bda8:	4770      	bx	lr
 800bdaa:	f803 1b01 	strb.w	r1, [r3], #1
 800bdae:	e7f9      	b.n	800bda4 <memset+0x4>

0800bdb0 <_localeconv_r>:
 800bdb0:	4800      	ldr	r0, [pc, #0]	; (800bdb4 <_localeconv_r+0x4>)
 800bdb2:	4770      	bx	lr
 800bdb4:	200001f8 	.word	0x200001f8

0800bdb8 <_sbrk_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	2300      	movs	r3, #0
 800bdbc:	4d05      	ldr	r5, [pc, #20]	; (800bdd4 <_sbrk_r+0x1c>)
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4608      	mov	r0, r1
 800bdc2:	602b      	str	r3, [r5, #0]
 800bdc4:	f7ff f8c2 	bl	800af4c <_sbrk>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_sbrk_r+0x1a>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_sbrk_r+0x1a>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	20001070 	.word	0x20001070

0800bdd8 <__errno>:
 800bdd8:	4b01      	ldr	r3, [pc, #4]	; (800bde0 <__errno+0x8>)
 800bdda:	6818      	ldr	r0, [r3, #0]
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	20000104 	.word	0x20000104

0800bde4 <__libc_init_array>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	4d0d      	ldr	r5, [pc, #52]	; (800be1c <__libc_init_array+0x38>)
 800bde8:	2600      	movs	r6, #0
 800bdea:	4c0d      	ldr	r4, [pc, #52]	; (800be20 <__libc_init_array+0x3c>)
 800bdec:	1b64      	subs	r4, r4, r5
 800bdee:	10a4      	asrs	r4, r4, #2
 800bdf0:	42a6      	cmp	r6, r4
 800bdf2:	d109      	bne.n	800be08 <__libc_init_array+0x24>
 800bdf4:	4d0b      	ldr	r5, [pc, #44]	; (800be24 <__libc_init_array+0x40>)
 800bdf6:	2600      	movs	r6, #0
 800bdf8:	4c0b      	ldr	r4, [pc, #44]	; (800be28 <__libc_init_array+0x44>)
 800bdfa:	f003 faef 	bl	800f3dc <_init>
 800bdfe:	1b64      	subs	r4, r4, r5
 800be00:	10a4      	asrs	r4, r4, #2
 800be02:	42a6      	cmp	r6, r4
 800be04:	d105      	bne.n	800be12 <__libc_init_array+0x2e>
 800be06:	bd70      	pop	{r4, r5, r6, pc}
 800be08:	f855 3b04 	ldr.w	r3, [r5], #4
 800be0c:	3601      	adds	r6, #1
 800be0e:	4798      	blx	r3
 800be10:	e7ee      	b.n	800bdf0 <__libc_init_array+0xc>
 800be12:	f855 3b04 	ldr.w	r3, [r5], #4
 800be16:	3601      	adds	r6, #1
 800be18:	4798      	blx	r3
 800be1a:	e7f2      	b.n	800be02 <__libc_init_array+0x1e>
 800be1c:	0800fe68 	.word	0x0800fe68
 800be20:	0800fe68 	.word	0x0800fe68
 800be24:	0800fe68 	.word	0x0800fe68
 800be28:	0800fe6c 	.word	0x0800fe6c

0800be2c <__retarget_lock_init_recursive>:
 800be2c:	4770      	bx	lr

0800be2e <__retarget_lock_acquire_recursive>:
 800be2e:	4770      	bx	lr

0800be30 <__retarget_lock_release_recursive>:
 800be30:	4770      	bx	lr

0800be32 <memchr>:
 800be32:	b2c9      	uxtb	r1, r1
 800be34:	4402      	add	r2, r0
 800be36:	b510      	push	{r4, lr}
 800be38:	4290      	cmp	r0, r2
 800be3a:	4603      	mov	r3, r0
 800be3c:	d101      	bne.n	800be42 <memchr+0x10>
 800be3e:	2300      	movs	r3, #0
 800be40:	e003      	b.n	800be4a <memchr+0x18>
 800be42:	781c      	ldrb	r4, [r3, #0]
 800be44:	3001      	adds	r0, #1
 800be46:	428c      	cmp	r4, r1
 800be48:	d1f6      	bne.n	800be38 <memchr+0x6>
 800be4a:	4618      	mov	r0, r3
 800be4c:	bd10      	pop	{r4, pc}

0800be4e <memcpy>:
 800be4e:	440a      	add	r2, r1
 800be50:	1e43      	subs	r3, r0, #1
 800be52:	4291      	cmp	r1, r2
 800be54:	d100      	bne.n	800be58 <memcpy+0xa>
 800be56:	4770      	bx	lr
 800be58:	b510      	push	{r4, lr}
 800be5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be5e:	4291      	cmp	r1, r2
 800be60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be64:	d1f9      	bne.n	800be5a <memcpy+0xc>
 800be66:	bd10      	pop	{r4, pc}

0800be68 <__assert_func>:
 800be68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be6a:	4614      	mov	r4, r2
 800be6c:	461a      	mov	r2, r3
 800be6e:	4b09      	ldr	r3, [pc, #36]	; (800be94 <__assert_func+0x2c>)
 800be70:	4605      	mov	r5, r0
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68d8      	ldr	r0, [r3, #12]
 800be76:	b14c      	cbz	r4, 800be8c <__assert_func+0x24>
 800be78:	4b07      	ldr	r3, [pc, #28]	; (800be98 <__assert_func+0x30>)
 800be7a:	9100      	str	r1, [sp, #0]
 800be7c:	4907      	ldr	r1, [pc, #28]	; (800be9c <__assert_func+0x34>)
 800be7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be82:	462b      	mov	r3, r5
 800be84:	f001 fdec 	bl	800da60 <fiprintf>
 800be88:	f001 ffd8 	bl	800de3c <abort>
 800be8c:	4b04      	ldr	r3, [pc, #16]	; (800bea0 <__assert_func+0x38>)
 800be8e:	461c      	mov	r4, r3
 800be90:	e7f3      	b.n	800be7a <__assert_func+0x12>
 800be92:	bf00      	nop
 800be94:	20000104 	.word	0x20000104
 800be98:	0800faf3 	.word	0x0800faf3
 800be9c:	0800fb00 	.word	0x0800fb00
 800bea0:	0800fb2e 	.word	0x0800fb2e

0800bea4 <quorem>:
 800bea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	6903      	ldr	r3, [r0, #16]
 800beaa:	4607      	mov	r7, r0
 800beac:	690c      	ldr	r4, [r1, #16]
 800beae:	42a3      	cmp	r3, r4
 800beb0:	f2c0 8086 	blt.w	800bfc0 <quorem+0x11c>
 800beb4:	3c01      	subs	r4, #1
 800beb6:	f100 0514 	add.w	r5, r0, #20
 800beba:	f101 0814 	add.w	r8, r1, #20
 800bebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bec6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bed0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bed4:	3301      	adds	r3, #1
 800bed6:	429a      	cmp	r2, r3
 800bed8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bedc:	d335      	bcc.n	800bf4a <quorem+0xa6>
 800bede:	f04f 0e00 	mov.w	lr, #0
 800bee2:	4640      	mov	r0, r8
 800bee4:	46ac      	mov	ip, r5
 800bee6:	46f2      	mov	sl, lr
 800bee8:	f850 2b04 	ldr.w	r2, [r0], #4
 800beec:	b293      	uxth	r3, r2
 800beee:	4581      	cmp	r9, r0
 800bef0:	fb06 e303 	mla	r3, r6, r3, lr
 800bef4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bef8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800befc:	b29b      	uxth	r3, r3
 800befe:	fb06 220e 	mla	r2, r6, lr, r2
 800bf02:	ebaa 0303 	sub.w	r3, sl, r3
 800bf06:	f8dc a000 	ldr.w	sl, [ip]
 800bf0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf0e:	fa1f fa8a 	uxth.w	sl, sl
 800bf12:	b292      	uxth	r2, r2
 800bf14:	4453      	add	r3, sl
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	f8dc 3000 	ldr.w	r3, [ip]
 800bf1c:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800bf20:	9b00      	ldr	r3, [sp, #0]
 800bf22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf26:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf32:	f84c 3b04 	str.w	r3, [ip], #4
 800bf36:	d2d7      	bcs.n	800bee8 <quorem+0x44>
 800bf38:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf3c:	b92b      	cbnz	r3, 800bf4a <quorem+0xa6>
 800bf3e:	9b01      	ldr	r3, [sp, #4]
 800bf40:	3b04      	subs	r3, #4
 800bf42:	429d      	cmp	r5, r3
 800bf44:	461a      	mov	r2, r3
 800bf46:	d32f      	bcc.n	800bfa8 <quorem+0x104>
 800bf48:	613c      	str	r4, [r7, #16]
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	f001 fc3e 	bl	800d7cc <__mcmp>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	db25      	blt.n	800bfa0 <quorem+0xfc>
 800bf54:	3601      	adds	r6, #1
 800bf56:	4629      	mov	r1, r5
 800bf58:	2000      	movs	r0, #0
 800bf5a:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf5e:	f8d1 c000 	ldr.w	ip, [r1]
 800bf62:	b293      	uxth	r3, r2
 800bf64:	45c1      	cmp	r9, r8
 800bf66:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bf6a:	eba0 0303 	sub.w	r3, r0, r3
 800bf6e:	fa1f f08c 	uxth.w	r0, ip
 800bf72:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bf76:	4403      	add	r3, r0
 800bf78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf86:	f841 3b04 	str.w	r3, [r1], #4
 800bf8a:	d2e6      	bcs.n	800bf5a <quorem+0xb6>
 800bf8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf94:	b922      	cbnz	r2, 800bfa0 <quorem+0xfc>
 800bf96:	3b04      	subs	r3, #4
 800bf98:	429d      	cmp	r5, r3
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	d30a      	bcc.n	800bfb4 <quorem+0x110>
 800bf9e:	613c      	str	r4, [r7, #16]
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	b003      	add	sp, #12
 800bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa8:	6812      	ldr	r2, [r2, #0]
 800bfaa:	3b04      	subs	r3, #4
 800bfac:	2a00      	cmp	r2, #0
 800bfae:	d1cb      	bne.n	800bf48 <quorem+0xa4>
 800bfb0:	3c01      	subs	r4, #1
 800bfb2:	e7c6      	b.n	800bf42 <quorem+0x9e>
 800bfb4:	6812      	ldr	r2, [r2, #0]
 800bfb6:	3b04      	subs	r3, #4
 800bfb8:	2a00      	cmp	r2, #0
 800bfba:	d1f0      	bne.n	800bf9e <quorem+0xfa>
 800bfbc:	3c01      	subs	r4, #1
 800bfbe:	e7eb      	b.n	800bf98 <quorem+0xf4>
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	e7ee      	b.n	800bfa2 <quorem+0xfe>
 800bfc4:	0000      	movs	r0, r0
	...

0800bfc8 <_dtoa_r>:
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	69c5      	ldr	r5, [r0, #28]
 800bfce:	4604      	mov	r4, r0
 800bfd0:	ed2d 8b04 	vpush	{d8-d9}
 800bfd4:	b093      	sub	sp, #76	; 0x4c
 800bfd6:	ec57 6b10 	vmov	r6, r7, d0
 800bfda:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bfde:	9107      	str	r1, [sp, #28]
 800bfe0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfe2:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bfe8:	b975      	cbnz	r5, 800c008 <_dtoa_r+0x40>
 800bfea:	2010      	movs	r0, #16
 800bfec:	f7ff faba 	bl	800b564 <malloc>
 800bff0:	4602      	mov	r2, r0
 800bff2:	61e0      	str	r0, [r4, #28]
 800bff4:	b920      	cbnz	r0, 800c000 <_dtoa_r+0x38>
 800bff6:	4bae      	ldr	r3, [pc, #696]	; (800c2b0 <_dtoa_r+0x2e8>)
 800bff8:	21ef      	movs	r1, #239	; 0xef
 800bffa:	48ae      	ldr	r0, [pc, #696]	; (800c2b4 <_dtoa_r+0x2ec>)
 800bffc:	f7ff ff34 	bl	800be68 <__assert_func>
 800c000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c004:	6005      	str	r5, [r0, #0]
 800c006:	60c5      	str	r5, [r0, #12]
 800c008:	69e3      	ldr	r3, [r4, #28]
 800c00a:	6819      	ldr	r1, [r3, #0]
 800c00c:	b151      	cbz	r1, 800c024 <_dtoa_r+0x5c>
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	2301      	movs	r3, #1
 800c012:	4620      	mov	r0, r4
 800c014:	4093      	lsls	r3, r2
 800c016:	604a      	str	r2, [r1, #4]
 800c018:	608b      	str	r3, [r1, #8]
 800c01a:	f001 f999 	bl	800d350 <_Bfree>
 800c01e:	69e3      	ldr	r3, [r4, #28]
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	1e3b      	subs	r3, r7, #0
 800c026:	bfb7      	itett	lt
 800c028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c02c:	2300      	movge	r3, #0
 800c02e:	2201      	movlt	r2, #1
 800c030:	9303      	strlt	r3, [sp, #12]
 800c032:	bfac      	ite	ge
 800c034:	f8c8 3000 	strge.w	r3, [r8]
 800c038:	f8c8 2000 	strlt.w	r2, [r8]
 800c03c:	4b9e      	ldr	r3, [pc, #632]	; (800c2b8 <_dtoa_r+0x2f0>)
 800c03e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c042:	ea33 0308 	bics.w	r3, r3, r8
 800c046:	d11b      	bne.n	800c080 <_dtoa_r+0xb8>
 800c048:	f242 730f 	movw	r3, #9999	; 0x270f
 800c04c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c054:	4333      	orrs	r3, r6
 800c056:	f000 8592 	beq.w	800cb7e <_dtoa_r+0xbb6>
 800c05a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c05c:	b963      	cbnz	r3, 800c078 <_dtoa_r+0xb0>
 800c05e:	4b97      	ldr	r3, [pc, #604]	; (800c2bc <_dtoa_r+0x2f4>)
 800c060:	e027      	b.n	800c0b2 <_dtoa_r+0xea>
 800c062:	4b97      	ldr	r3, [pc, #604]	; (800c2c0 <_dtoa_r+0x2f8>)
 800c064:	9300      	str	r3, [sp, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c06a:	6013      	str	r3, [r2, #0]
 800c06c:	9800      	ldr	r0, [sp, #0]
 800c06e:	b013      	add	sp, #76	; 0x4c
 800c070:	ecbd 8b04 	vpop	{d8-d9}
 800c074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c078:	4b90      	ldr	r3, [pc, #576]	; (800c2bc <_dtoa_r+0x2f4>)
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	3303      	adds	r3, #3
 800c07e:	e7f3      	b.n	800c068 <_dtoa_r+0xa0>
 800c080:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c084:	2200      	movs	r2, #0
 800c086:	2300      	movs	r3, #0
 800c088:	ec51 0b17 	vmov	r0, r1, d7
 800c08c:	eeb0 8a47 	vmov.f32	s16, s14
 800c090:	eef0 8a67 	vmov.f32	s17, s15
 800c094:	f7f4 fd1c 	bl	8000ad0 <__aeabi_dcmpeq>
 800c098:	4681      	mov	r9, r0
 800c09a:	b160      	cbz	r0, 800c0b6 <_dtoa_r+0xee>
 800c09c:	2301      	movs	r3, #1
 800c09e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 8567 	beq.w	800cb78 <_dtoa_r+0xbb0>
 800c0aa:	4b86      	ldr	r3, [pc, #536]	; (800c2c4 <_dtoa_r+0x2fc>)
 800c0ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	e7da      	b.n	800c06c <_dtoa_r+0xa4>
 800c0b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c0ba:	eeb0 0a48 	vmov.f32	s0, s16
 800c0be:	eef0 0a68 	vmov.f32	s1, s17
 800c0c2:	aa10      	add	r2, sp, #64	; 0x40
 800c0c4:	a911      	add	r1, sp, #68	; 0x44
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f001 fc2c 	bl	800d924 <__d2b>
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	2d00      	cmp	r5, #0
 800c0d0:	d07d      	beq.n	800c1ce <_dtoa_r+0x206>
 800c0d2:	ee18 3a90 	vmov	r3, s17
 800c0d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c0da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c0e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c0ea:	ec51 0b18 	vmov	r0, r1, d8
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	4b75      	ldr	r3, [pc, #468]	; (800c2c8 <_dtoa_r+0x300>)
 800c0f4:	f7f4 f8cc 	bl	8000290 <__aeabi_dsub>
 800c0f8:	a367      	add	r3, pc, #412	; (adr r3, 800c298 <_dtoa_r+0x2d0>)
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	f7f4 fa7f 	bl	8000600 <__aeabi_dmul>
 800c102:	a367      	add	r3, pc, #412	; (adr r3, 800c2a0 <_dtoa_r+0x2d8>)
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	f7f4 f8c4 	bl	8000294 <__adddf3>
 800c10c:	4606      	mov	r6, r0
 800c10e:	460f      	mov	r7, r1
 800c110:	4628      	mov	r0, r5
 800c112:	f7f4 fa0b 	bl	800052c <__aeabi_i2d>
 800c116:	a364      	add	r3, pc, #400	; (adr r3, 800c2a8 <_dtoa_r+0x2e0>)
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f7f4 fa70 	bl	8000600 <__aeabi_dmul>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	4630      	mov	r0, r6
 800c126:	4639      	mov	r1, r7
 800c128:	f7f4 f8b4 	bl	8000294 <__adddf3>
 800c12c:	4606      	mov	r6, r0
 800c12e:	460f      	mov	r7, r1
 800c130:	f7f4 fd16 	bl	8000b60 <__aeabi_d2iz>
 800c134:	2200      	movs	r2, #0
 800c136:	4683      	mov	fp, r0
 800c138:	2300      	movs	r3, #0
 800c13a:	4630      	mov	r0, r6
 800c13c:	4639      	mov	r1, r7
 800c13e:	f7f4 fcd1 	bl	8000ae4 <__aeabi_dcmplt>
 800c142:	b148      	cbz	r0, 800c158 <_dtoa_r+0x190>
 800c144:	4658      	mov	r0, fp
 800c146:	f7f4 f9f1 	bl	800052c <__aeabi_i2d>
 800c14a:	4632      	mov	r2, r6
 800c14c:	463b      	mov	r3, r7
 800c14e:	f7f4 fcbf 	bl	8000ad0 <__aeabi_dcmpeq>
 800c152:	b908      	cbnz	r0, 800c158 <_dtoa_r+0x190>
 800c154:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c158:	f1bb 0f16 	cmp.w	fp, #22
 800c15c:	d857      	bhi.n	800c20e <_dtoa_r+0x246>
 800c15e:	4b5b      	ldr	r3, [pc, #364]	; (800c2cc <_dtoa_r+0x304>)
 800c160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c164:	ec51 0b18 	vmov	r0, r1, d8
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	f7f4 fcba 	bl	8000ae4 <__aeabi_dcmplt>
 800c170:	2800      	cmp	r0, #0
 800c172:	d04e      	beq.n	800c212 <_dtoa_r+0x24a>
 800c174:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c178:	2300      	movs	r3, #0
 800c17a:	930c      	str	r3, [sp, #48]	; 0x30
 800c17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c17e:	1b5b      	subs	r3, r3, r5
 800c180:	1e5a      	subs	r2, r3, #1
 800c182:	bf4c      	ite	mi
 800c184:	f1c3 0301 	rsbmi	r3, r3, #1
 800c188:	2300      	movpl	r3, #0
 800c18a:	9206      	str	r2, [sp, #24]
 800c18c:	bf45      	ittet	mi
 800c18e:	9305      	strmi	r3, [sp, #20]
 800c190:	2300      	movmi	r3, #0
 800c192:	9305      	strpl	r3, [sp, #20]
 800c194:	9306      	strmi	r3, [sp, #24]
 800c196:	f1bb 0f00 	cmp.w	fp, #0
 800c19a:	db3c      	blt.n	800c216 <_dtoa_r+0x24e>
 800c19c:	9b06      	ldr	r3, [sp, #24]
 800c19e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c1a2:	445b      	add	r3, fp
 800c1a4:	9306      	str	r3, [sp, #24]
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	9308      	str	r3, [sp, #32]
 800c1aa:	9b07      	ldr	r3, [sp, #28]
 800c1ac:	2b09      	cmp	r3, #9
 800c1ae:	d868      	bhi.n	800c282 <_dtoa_r+0x2ba>
 800c1b0:	2b05      	cmp	r3, #5
 800c1b2:	bfc5      	ittet	gt
 800c1b4:	3b04      	subgt	r3, #4
 800c1b6:	2500      	movgt	r5, #0
 800c1b8:	2501      	movle	r5, #1
 800c1ba:	9307      	strgt	r3, [sp, #28]
 800c1bc:	9b07      	ldr	r3, [sp, #28]
 800c1be:	3b02      	subs	r3, #2
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	f200 8087 	bhi.w	800c2d4 <_dtoa_r+0x30c>
 800c1c6:	e8df f003 	tbb	[pc, r3]
 800c1ca:	3d30      	.short	0x3d30
 800c1cc:	5a3b      	.short	0x5a3b
 800c1ce:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c1d2:	441d      	add	r5, r3
 800c1d4:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	bfc9      	itett	gt
 800c1dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c1e0:	f1c3 0320 	rsble	r3, r3, #32
 800c1e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c1e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c1ec:	bfd8      	it	le
 800c1ee:	fa06 f003 	lslle.w	r0, r6, r3
 800c1f2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800c1f6:	bfc4      	itt	gt
 800c1f8:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c1fc:	ea48 0003 	orrgt.w	r0, r8, r3
 800c200:	f7f4 f984 	bl	800050c <__aeabi_ui2d>
 800c204:	2201      	movs	r2, #1
 800c206:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c20a:	920e      	str	r2, [sp, #56]	; 0x38
 800c20c:	e76f      	b.n	800c0ee <_dtoa_r+0x126>
 800c20e:	2301      	movs	r3, #1
 800c210:	e7b3      	b.n	800c17a <_dtoa_r+0x1b2>
 800c212:	900c      	str	r0, [sp, #48]	; 0x30
 800c214:	e7b2      	b.n	800c17c <_dtoa_r+0x1b4>
 800c216:	9b05      	ldr	r3, [sp, #20]
 800c218:	eba3 030b 	sub.w	r3, r3, fp
 800c21c:	9305      	str	r3, [sp, #20]
 800c21e:	f1cb 0300 	rsb	r3, fp, #0
 800c222:	9308      	str	r3, [sp, #32]
 800c224:	2300      	movs	r3, #0
 800c226:	930b      	str	r3, [sp, #44]	; 0x2c
 800c228:	e7bf      	b.n	800c1aa <_dtoa_r+0x1e2>
 800c22a:	2300      	movs	r3, #0
 800c22c:	9309      	str	r3, [sp, #36]	; 0x24
 800c22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c230:	2b00      	cmp	r3, #0
 800c232:	dc52      	bgt.n	800c2da <_dtoa_r+0x312>
 800c234:	2301      	movs	r3, #1
 800c236:	461a      	mov	r2, r3
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	9304      	str	r3, [sp, #16]
 800c23c:	920a      	str	r2, [sp, #40]	; 0x28
 800c23e:	e00b      	b.n	800c258 <_dtoa_r+0x290>
 800c240:	2301      	movs	r3, #1
 800c242:	e7f3      	b.n	800c22c <_dtoa_r+0x264>
 800c244:	2300      	movs	r3, #0
 800c246:	9309      	str	r3, [sp, #36]	; 0x24
 800c248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24a:	445b      	add	r3, fp
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	3301      	adds	r3, #1
 800c250:	2b01      	cmp	r3, #1
 800c252:	9304      	str	r3, [sp, #16]
 800c254:	bfb8      	it	lt
 800c256:	2301      	movlt	r3, #1
 800c258:	69e0      	ldr	r0, [r4, #28]
 800c25a:	2100      	movs	r1, #0
 800c25c:	2204      	movs	r2, #4
 800c25e:	f102 0614 	add.w	r6, r2, #20
 800c262:	429e      	cmp	r6, r3
 800c264:	d93d      	bls.n	800c2e2 <_dtoa_r+0x31a>
 800c266:	6041      	str	r1, [r0, #4]
 800c268:	4620      	mov	r0, r4
 800c26a:	f001 f831 	bl	800d2d0 <_Balloc>
 800c26e:	9000      	str	r0, [sp, #0]
 800c270:	2800      	cmp	r0, #0
 800c272:	d139      	bne.n	800c2e8 <_dtoa_r+0x320>
 800c274:	4b16      	ldr	r3, [pc, #88]	; (800c2d0 <_dtoa_r+0x308>)
 800c276:	4602      	mov	r2, r0
 800c278:	f240 11af 	movw	r1, #431	; 0x1af
 800c27c:	e6bd      	b.n	800bffa <_dtoa_r+0x32>
 800c27e:	2301      	movs	r3, #1
 800c280:	e7e1      	b.n	800c246 <_dtoa_r+0x27e>
 800c282:	2501      	movs	r5, #1
 800c284:	2300      	movs	r3, #0
 800c286:	9509      	str	r5, [sp, #36]	; 0x24
 800c288:	9307      	str	r3, [sp, #28]
 800c28a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c28e:	2200      	movs	r2, #0
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	2312      	movs	r3, #18
 800c296:	e7d1      	b.n	800c23c <_dtoa_r+0x274>
 800c298:	636f4361 	.word	0x636f4361
 800c29c:	3fd287a7 	.word	0x3fd287a7
 800c2a0:	8b60c8b3 	.word	0x8b60c8b3
 800c2a4:	3fc68a28 	.word	0x3fc68a28
 800c2a8:	509f79fb 	.word	0x509f79fb
 800c2ac:	3fd34413 	.word	0x3fd34413
 800c2b0:	0800fa84 	.word	0x0800fa84
 800c2b4:	0800fb3c 	.word	0x0800fb3c
 800c2b8:	7ff00000 	.word	0x7ff00000
 800c2bc:	0800fb38 	.word	0x0800fb38
 800c2c0:	0800fb2f 	.word	0x0800fb2f
 800c2c4:	0800fa61 	.word	0x0800fa61
 800c2c8:	3ff80000 	.word	0x3ff80000
 800c2cc:	0800fc38 	.word	0x0800fc38
 800c2d0:	0800fb94 	.word	0x0800fb94
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d8:	e7d7      	b.n	800c28a <_dtoa_r+0x2c2>
 800c2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	9304      	str	r3, [sp, #16]
 800c2e0:	e7ba      	b.n	800c258 <_dtoa_r+0x290>
 800c2e2:	3101      	adds	r1, #1
 800c2e4:	0052      	lsls	r2, r2, #1
 800c2e6:	e7ba      	b.n	800c25e <_dtoa_r+0x296>
 800c2e8:	69e3      	ldr	r3, [r4, #28]
 800c2ea:	9a00      	ldr	r2, [sp, #0]
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	9b04      	ldr	r3, [sp, #16]
 800c2f0:	2b0e      	cmp	r3, #14
 800c2f2:	f200 80a8 	bhi.w	800c446 <_dtoa_r+0x47e>
 800c2f6:	2d00      	cmp	r5, #0
 800c2f8:	f000 80a5 	beq.w	800c446 <_dtoa_r+0x47e>
 800c2fc:	f1bb 0f00 	cmp.w	fp, #0
 800c300:	dd38      	ble.n	800c374 <_dtoa_r+0x3ac>
 800c302:	f00b 020f 	and.w	r2, fp, #15
 800c306:	4bbf      	ldr	r3, [pc, #764]	; (800c604 <_dtoa_r+0x63c>)
 800c308:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c30c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c314:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c318:	d019      	beq.n	800c34e <_dtoa_r+0x386>
 800c31a:	4bbb      	ldr	r3, [pc, #748]	; (800c608 <_dtoa_r+0x640>)
 800c31c:	f008 080f 	and.w	r8, r8, #15
 800c320:	2503      	movs	r5, #3
 800c322:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c326:	ec51 0b18 	vmov	r0, r1, d8
 800c32a:	f7f4 fa93 	bl	8000854 <__aeabi_ddiv>
 800c32e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c332:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c608 <_dtoa_r+0x640>
 800c336:	f1b8 0f00 	cmp.w	r8, #0
 800c33a:	d10a      	bne.n	800c352 <_dtoa_r+0x38a>
 800c33c:	4632      	mov	r2, r6
 800c33e:	463b      	mov	r3, r7
 800c340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c344:	f7f4 fa86 	bl	8000854 <__aeabi_ddiv>
 800c348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c34c:	e02b      	b.n	800c3a6 <_dtoa_r+0x3de>
 800c34e:	2502      	movs	r5, #2
 800c350:	e7ef      	b.n	800c332 <_dtoa_r+0x36a>
 800c352:	f018 0f01 	tst.w	r8, #1
 800c356:	d008      	beq.n	800c36a <_dtoa_r+0x3a2>
 800c358:	4630      	mov	r0, r6
 800c35a:	4639      	mov	r1, r7
 800c35c:	3501      	adds	r5, #1
 800c35e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c362:	f7f4 f94d 	bl	8000600 <__aeabi_dmul>
 800c366:	4606      	mov	r6, r0
 800c368:	460f      	mov	r7, r1
 800c36a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c36e:	f109 0908 	add.w	r9, r9, #8
 800c372:	e7e0      	b.n	800c336 <_dtoa_r+0x36e>
 800c374:	f000 809f 	beq.w	800c4b6 <_dtoa_r+0x4ee>
 800c378:	f1cb 0600 	rsb	r6, fp, #0
 800c37c:	4ba1      	ldr	r3, [pc, #644]	; (800c604 <_dtoa_r+0x63c>)
 800c37e:	4fa2      	ldr	r7, [pc, #648]	; (800c608 <_dtoa_r+0x640>)
 800c380:	2502      	movs	r5, #2
 800c382:	f006 020f 	and.w	r2, r6, #15
 800c386:	1136      	asrs	r6, r6, #4
 800c388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c38c:	ec51 0b18 	vmov	r0, r1, d8
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f4 f934 	bl	8000600 <__aeabi_dmul>
 800c398:	2300      	movs	r3, #0
 800c39a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d17e      	bne.n	800c4a0 <_dtoa_r+0x4d8>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1d0      	bne.n	800c348 <_dtoa_r+0x380>
 800c3a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 8084 	beq.w	800c4ba <_dtoa_r+0x4f2>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4b95      	ldr	r3, [pc, #596]	; (800c60c <_dtoa_r+0x644>)
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	f7f4 fb93 	bl	8000ae4 <__aeabi_dcmplt>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d07b      	beq.n	800c4ba <_dtoa_r+0x4f2>
 800c3c2:	9b04      	ldr	r3, [sp, #16]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d078      	beq.n	800c4ba <_dtoa_r+0x4f2>
 800c3c8:	9b01      	ldr	r3, [sp, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dd39      	ble.n	800c442 <_dtoa_r+0x47a>
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	4b8f      	ldr	r3, [pc, #572]	; (800c610 <_dtoa_r+0x648>)
 800c3d2:	4640      	mov	r0, r8
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	f7f4 f913 	bl	8000600 <__aeabi_dmul>
 800c3da:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c3de:	3501      	adds	r5, #1
 800c3e0:	9e01      	ldr	r6, [sp, #4]
 800c3e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	f7f4 f89e 	bl	800052c <__aeabi_i2d>
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	464b      	mov	r3, r9
 800c3f4:	f7f4 f904 	bl	8000600 <__aeabi_dmul>
 800c3f8:	4b86      	ldr	r3, [pc, #536]	; (800c614 <_dtoa_r+0x64c>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f7f3 ff4a 	bl	8000294 <__adddf3>
 800c400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c408:	9303      	str	r3, [sp, #12]
 800c40a:	2e00      	cmp	r6, #0
 800c40c:	d158      	bne.n	800c4c0 <_dtoa_r+0x4f8>
 800c40e:	2200      	movs	r2, #0
 800c410:	4b81      	ldr	r3, [pc, #516]	; (800c618 <_dtoa_r+0x650>)
 800c412:	4640      	mov	r0, r8
 800c414:	4649      	mov	r1, r9
 800c416:	f7f3 ff3b 	bl	8000290 <__aeabi_dsub>
 800c41a:	4680      	mov	r8, r0
 800c41c:	4689      	mov	r9, r1
 800c41e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c422:	f7f4 fb7d 	bl	8000b20 <__aeabi_dcmpgt>
 800c426:	2800      	cmp	r0, #0
 800c428:	f040 8296 	bne.w	800c958 <_dtoa_r+0x990>
 800c42c:	4640      	mov	r0, r8
 800c42e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c436:	4649      	mov	r1, r9
 800c438:	f7f4 fb54 	bl	8000ae4 <__aeabi_dcmplt>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f040 8289 	bne.w	800c954 <_dtoa_r+0x98c>
 800c442:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f2c0 814e 	blt.w	800c6ea <_dtoa_r+0x722>
 800c44e:	f1bb 0f0e 	cmp.w	fp, #14
 800c452:	f300 814a 	bgt.w	800c6ea <_dtoa_r+0x722>
 800c456:	4b6b      	ldr	r3, [pc, #428]	; (800c604 <_dtoa_r+0x63c>)
 800c458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c45c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c462:	2b00      	cmp	r3, #0
 800c464:	f280 80dc 	bge.w	800c620 <_dtoa_r+0x658>
 800c468:	9b04      	ldr	r3, [sp, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f300 80d8 	bgt.w	800c620 <_dtoa_r+0x658>
 800c470:	f040 826f 	bne.w	800c952 <_dtoa_r+0x98a>
 800c474:	2200      	movs	r2, #0
 800c476:	4b68      	ldr	r3, [pc, #416]	; (800c618 <_dtoa_r+0x650>)
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f4 f8c0 	bl	8000600 <__aeabi_dmul>
 800c480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c484:	f7f4 fb42 	bl	8000b0c <__aeabi_dcmpge>
 800c488:	9e04      	ldr	r6, [sp, #16]
 800c48a:	4637      	mov	r7, r6
 800c48c:	2800      	cmp	r0, #0
 800c48e:	f040 8245 	bne.w	800c91c <_dtoa_r+0x954>
 800c492:	9d00      	ldr	r5, [sp, #0]
 800c494:	2331      	movs	r3, #49	; 0x31
 800c496:	f10b 0b01 	add.w	fp, fp, #1
 800c49a:	f805 3b01 	strb.w	r3, [r5], #1
 800c49e:	e241      	b.n	800c924 <_dtoa_r+0x95c>
 800c4a0:	07f2      	lsls	r2, r6, #31
 800c4a2:	d505      	bpl.n	800c4b0 <_dtoa_r+0x4e8>
 800c4a4:	3501      	adds	r5, #1
 800c4a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4aa:	f7f4 f8a9 	bl	8000600 <__aeabi_dmul>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	1076      	asrs	r6, r6, #1
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	e773      	b.n	800c39e <_dtoa_r+0x3d6>
 800c4b6:	2502      	movs	r5, #2
 800c4b8:	e775      	b.n	800c3a6 <_dtoa_r+0x3de>
 800c4ba:	465f      	mov	r7, fp
 800c4bc:	9e04      	ldr	r6, [sp, #16]
 800c4be:	e792      	b.n	800c3e6 <_dtoa_r+0x41e>
 800c4c0:	9900      	ldr	r1, [sp, #0]
 800c4c2:	4b50      	ldr	r3, [pc, #320]	; (800c604 <_dtoa_r+0x63c>)
 800c4c4:	4431      	add	r1, r6
 800c4c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c4ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4ce:	9102      	str	r1, [sp, #8]
 800c4d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4d2:	eeb0 9a47 	vmov.f32	s18, s14
 800c4d6:	eef0 9a67 	vmov.f32	s19, s15
 800c4da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4de:	2900      	cmp	r1, #0
 800c4e0:	d044      	beq.n	800c56c <_dtoa_r+0x5a4>
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	494d      	ldr	r1, [pc, #308]	; (800c61c <_dtoa_r+0x654>)
 800c4e6:	f7f4 f9b5 	bl	8000854 <__aeabi_ddiv>
 800c4ea:	ec53 2b19 	vmov	r2, r3, d9
 800c4ee:	f7f3 fecf 	bl	8000290 <__aeabi_dsub>
 800c4f2:	9d00      	ldr	r5, [sp, #0]
 800c4f4:	ec41 0b19 	vmov	d9, r0, r1
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	4640      	mov	r0, r8
 800c4fc:	f7f4 fb30 	bl	8000b60 <__aeabi_d2iz>
 800c500:	4606      	mov	r6, r0
 800c502:	f7f4 f813 	bl	800052c <__aeabi_i2d>
 800c506:	4602      	mov	r2, r0
 800c508:	3630      	adds	r6, #48	; 0x30
 800c50a:	460b      	mov	r3, r1
 800c50c:	4640      	mov	r0, r8
 800c50e:	4649      	mov	r1, r9
 800c510:	f7f3 febe 	bl	8000290 <__aeabi_dsub>
 800c514:	f805 6b01 	strb.w	r6, [r5], #1
 800c518:	4680      	mov	r8, r0
 800c51a:	4689      	mov	r9, r1
 800c51c:	ec53 2b19 	vmov	r2, r3, d9
 800c520:	f7f4 fae0 	bl	8000ae4 <__aeabi_dcmplt>
 800c524:	2800      	cmp	r0, #0
 800c526:	d164      	bne.n	800c5f2 <_dtoa_r+0x62a>
 800c528:	4642      	mov	r2, r8
 800c52a:	464b      	mov	r3, r9
 800c52c:	2000      	movs	r0, #0
 800c52e:	4937      	ldr	r1, [pc, #220]	; (800c60c <_dtoa_r+0x644>)
 800c530:	f7f3 feae 	bl	8000290 <__aeabi_dsub>
 800c534:	ec53 2b19 	vmov	r2, r3, d9
 800c538:	f7f4 fad4 	bl	8000ae4 <__aeabi_dcmplt>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f040 80b6 	bne.w	800c6ae <_dtoa_r+0x6e6>
 800c542:	9b02      	ldr	r3, [sp, #8]
 800c544:	429d      	cmp	r5, r3
 800c546:	f43f af7c 	beq.w	800c442 <_dtoa_r+0x47a>
 800c54a:	2200      	movs	r2, #0
 800c54c:	4b30      	ldr	r3, [pc, #192]	; (800c610 <_dtoa_r+0x648>)
 800c54e:	ec51 0b19 	vmov	r0, r1, d9
 800c552:	f7f4 f855 	bl	8000600 <__aeabi_dmul>
 800c556:	2200      	movs	r2, #0
 800c558:	4b2d      	ldr	r3, [pc, #180]	; (800c610 <_dtoa_r+0x648>)
 800c55a:	ec41 0b19 	vmov	d9, r0, r1
 800c55e:	4640      	mov	r0, r8
 800c560:	4649      	mov	r1, r9
 800c562:	f7f4 f84d 	bl	8000600 <__aeabi_dmul>
 800c566:	4680      	mov	r8, r0
 800c568:	4689      	mov	r9, r1
 800c56a:	e7c5      	b.n	800c4f8 <_dtoa_r+0x530>
 800c56c:	ec51 0b17 	vmov	r0, r1, d7
 800c570:	f7f4 f846 	bl	8000600 <__aeabi_dmul>
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	9d00      	ldr	r5, [sp, #0]
 800c578:	930f      	str	r3, [sp, #60]	; 0x3c
 800c57a:	ec41 0b19 	vmov	d9, r0, r1
 800c57e:	4649      	mov	r1, r9
 800c580:	4640      	mov	r0, r8
 800c582:	f7f4 faed 	bl	8000b60 <__aeabi_d2iz>
 800c586:	4606      	mov	r6, r0
 800c588:	f7f3 ffd0 	bl	800052c <__aeabi_i2d>
 800c58c:	4602      	mov	r2, r0
 800c58e:	460b      	mov	r3, r1
 800c590:	4640      	mov	r0, r8
 800c592:	4649      	mov	r1, r9
 800c594:	3630      	adds	r6, #48	; 0x30
 800c596:	f7f3 fe7b 	bl	8000290 <__aeabi_dsub>
 800c59a:	9b02      	ldr	r3, [sp, #8]
 800c59c:	f805 6b01 	strb.w	r6, [r5], #1
 800c5a0:	4680      	mov	r8, r0
 800c5a2:	429d      	cmp	r5, r3
 800c5a4:	4689      	mov	r9, r1
 800c5a6:	f04f 0200 	mov.w	r2, #0
 800c5aa:	d124      	bne.n	800c5f6 <_dtoa_r+0x62e>
 800c5ac:	4b1b      	ldr	r3, [pc, #108]	; (800c61c <_dtoa_r+0x654>)
 800c5ae:	ec51 0b19 	vmov	r0, r1, d9
 800c5b2:	f7f3 fe6f 	bl	8000294 <__adddf3>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	4649      	mov	r1, r9
 800c5be:	f7f4 faaf 	bl	8000b20 <__aeabi_dcmpgt>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d173      	bne.n	800c6ae <_dtoa_r+0x6e6>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	4914      	ldr	r1, [pc, #80]	; (800c61c <_dtoa_r+0x654>)
 800c5ca:	ec53 2b19 	vmov	r2, r3, d9
 800c5ce:	f7f3 fe5f 	bl	8000290 <__aeabi_dsub>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	4649      	mov	r1, r9
 800c5da:	f7f4 fa83 	bl	8000ae4 <__aeabi_dcmplt>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f af2f 	beq.w	800c442 <_dtoa_r+0x47a>
 800c5e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c5e6:	1e6b      	subs	r3, r5, #1
 800c5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5ee:	2b30      	cmp	r3, #48	; 0x30
 800c5f0:	d0f8      	beq.n	800c5e4 <_dtoa_r+0x61c>
 800c5f2:	46bb      	mov	fp, r7
 800c5f4:	e04a      	b.n	800c68c <_dtoa_r+0x6c4>
 800c5f6:	4b06      	ldr	r3, [pc, #24]	; (800c610 <_dtoa_r+0x648>)
 800c5f8:	f7f4 f802 	bl	8000600 <__aeabi_dmul>
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	e7bd      	b.n	800c57e <_dtoa_r+0x5b6>
 800c602:	bf00      	nop
 800c604:	0800fc38 	.word	0x0800fc38
 800c608:	0800fc10 	.word	0x0800fc10
 800c60c:	3ff00000 	.word	0x3ff00000
 800c610:	40240000 	.word	0x40240000
 800c614:	401c0000 	.word	0x401c0000
 800c618:	40140000 	.word	0x40140000
 800c61c:	3fe00000 	.word	0x3fe00000
 800c620:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c624:	9d00      	ldr	r5, [sp, #0]
 800c626:	4642      	mov	r2, r8
 800c628:	464b      	mov	r3, r9
 800c62a:	4630      	mov	r0, r6
 800c62c:	4639      	mov	r1, r7
 800c62e:	f7f4 f911 	bl	8000854 <__aeabi_ddiv>
 800c632:	f7f4 fa95 	bl	8000b60 <__aeabi_d2iz>
 800c636:	9001      	str	r0, [sp, #4]
 800c638:	f7f3 ff78 	bl	800052c <__aeabi_i2d>
 800c63c:	4642      	mov	r2, r8
 800c63e:	464b      	mov	r3, r9
 800c640:	f7f3 ffde 	bl	8000600 <__aeabi_dmul>
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	4630      	mov	r0, r6
 800c64a:	4639      	mov	r1, r7
 800c64c:	f7f3 fe20 	bl	8000290 <__aeabi_dsub>
 800c650:	9e01      	ldr	r6, [sp, #4]
 800c652:	9f04      	ldr	r7, [sp, #16]
 800c654:	4602      	mov	r2, r0
 800c656:	3630      	adds	r6, #48	; 0x30
 800c658:	460b      	mov	r3, r1
 800c65a:	f805 6b01 	strb.w	r6, [r5], #1
 800c65e:	9e00      	ldr	r6, [sp, #0]
 800c660:	1bae      	subs	r6, r5, r6
 800c662:	42b7      	cmp	r7, r6
 800c664:	d134      	bne.n	800c6d0 <_dtoa_r+0x708>
 800c666:	f7f3 fe15 	bl	8000294 <__adddf3>
 800c66a:	4642      	mov	r2, r8
 800c66c:	464b      	mov	r3, r9
 800c66e:	4606      	mov	r6, r0
 800c670:	460f      	mov	r7, r1
 800c672:	f7f4 fa55 	bl	8000b20 <__aeabi_dcmpgt>
 800c676:	b9c8      	cbnz	r0, 800c6ac <_dtoa_r+0x6e4>
 800c678:	4642      	mov	r2, r8
 800c67a:	464b      	mov	r3, r9
 800c67c:	4630      	mov	r0, r6
 800c67e:	4639      	mov	r1, r7
 800c680:	f7f4 fa26 	bl	8000ad0 <__aeabi_dcmpeq>
 800c684:	b110      	cbz	r0, 800c68c <_dtoa_r+0x6c4>
 800c686:	9b01      	ldr	r3, [sp, #4]
 800c688:	07db      	lsls	r3, r3, #31
 800c68a:	d40f      	bmi.n	800c6ac <_dtoa_r+0x6e4>
 800c68c:	4651      	mov	r1, sl
 800c68e:	4620      	mov	r0, r4
 800c690:	f000 fe5e 	bl	800d350 <_Bfree>
 800c694:	2300      	movs	r3, #0
 800c696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c698:	702b      	strb	r3, [r5, #0]
 800c69a:	f10b 0301 	add.w	r3, fp, #1
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f43f ace2 	beq.w	800c06c <_dtoa_r+0xa4>
 800c6a8:	601d      	str	r5, [r3, #0]
 800c6aa:	e4df      	b.n	800c06c <_dtoa_r+0xa4>
 800c6ac:	465f      	mov	r7, fp
 800c6ae:	462b      	mov	r3, r5
 800c6b0:	461d      	mov	r5, r3
 800c6b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6b6:	2a39      	cmp	r2, #57	; 0x39
 800c6b8:	d106      	bne.n	800c6c8 <_dtoa_r+0x700>
 800c6ba:	9a00      	ldr	r2, [sp, #0]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d1f7      	bne.n	800c6b0 <_dtoa_r+0x6e8>
 800c6c0:	2230      	movs	r2, #48	; 0x30
 800c6c2:	9900      	ldr	r1, [sp, #0]
 800c6c4:	3701      	adds	r7, #1
 800c6c6:	700a      	strb	r2, [r1, #0]
 800c6c8:	781a      	ldrb	r2, [r3, #0]
 800c6ca:	3201      	adds	r2, #1
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e790      	b.n	800c5f2 <_dtoa_r+0x62a>
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	4ba3      	ldr	r3, [pc, #652]	; (800c960 <_dtoa_r+0x998>)
 800c6d4:	f7f3 ff94 	bl	8000600 <__aeabi_dmul>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	f7f4 f9f6 	bl	8000ad0 <__aeabi_dcmpeq>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d09e      	beq.n	800c626 <_dtoa_r+0x65e>
 800c6e8:	e7d0      	b.n	800c68c <_dtoa_r+0x6c4>
 800c6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ec:	2a00      	cmp	r2, #0
 800c6ee:	f000 80ca 	beq.w	800c886 <_dtoa_r+0x8be>
 800c6f2:	9a07      	ldr	r2, [sp, #28]
 800c6f4:	2a01      	cmp	r2, #1
 800c6f6:	f300 80ad 	bgt.w	800c854 <_dtoa_r+0x88c>
 800c6fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6fc:	2a00      	cmp	r2, #0
 800c6fe:	f000 80a5 	beq.w	800c84c <_dtoa_r+0x884>
 800c702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c706:	9e08      	ldr	r6, [sp, #32]
 800c708:	9d05      	ldr	r5, [sp, #20]
 800c70a:	9a05      	ldr	r2, [sp, #20]
 800c70c:	2101      	movs	r1, #1
 800c70e:	4620      	mov	r0, r4
 800c710:	441a      	add	r2, r3
 800c712:	9205      	str	r2, [sp, #20]
 800c714:	9a06      	ldr	r2, [sp, #24]
 800c716:	441a      	add	r2, r3
 800c718:	9206      	str	r2, [sp, #24]
 800c71a:	f000 fed1 	bl	800d4c0 <__i2b>
 800c71e:	4607      	mov	r7, r0
 800c720:	b165      	cbz	r5, 800c73c <_dtoa_r+0x774>
 800c722:	9b06      	ldr	r3, [sp, #24]
 800c724:	2b00      	cmp	r3, #0
 800c726:	dd09      	ble.n	800c73c <_dtoa_r+0x774>
 800c728:	42ab      	cmp	r3, r5
 800c72a:	9a05      	ldr	r2, [sp, #20]
 800c72c:	bfa8      	it	ge
 800c72e:	462b      	movge	r3, r5
 800c730:	1ad2      	subs	r2, r2, r3
 800c732:	1aed      	subs	r5, r5, r3
 800c734:	9205      	str	r2, [sp, #20]
 800c736:	9a06      	ldr	r2, [sp, #24]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	9306      	str	r3, [sp, #24]
 800c73c:	9b08      	ldr	r3, [sp, #32]
 800c73e:	b1f3      	cbz	r3, 800c77e <_dtoa_r+0x7b6>
 800c740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 80a3 	beq.w	800c88e <_dtoa_r+0x8c6>
 800c748:	2e00      	cmp	r6, #0
 800c74a:	dd10      	ble.n	800c76e <_dtoa_r+0x7a6>
 800c74c:	4639      	mov	r1, r7
 800c74e:	4632      	mov	r2, r6
 800c750:	4620      	mov	r0, r4
 800c752:	f000 ff75 	bl	800d640 <__pow5mult>
 800c756:	4652      	mov	r2, sl
 800c758:	4601      	mov	r1, r0
 800c75a:	4607      	mov	r7, r0
 800c75c:	4620      	mov	r0, r4
 800c75e:	f000 fec5 	bl	800d4ec <__multiply>
 800c762:	4680      	mov	r8, r0
 800c764:	4651      	mov	r1, sl
 800c766:	4620      	mov	r0, r4
 800c768:	46c2      	mov	sl, r8
 800c76a:	f000 fdf1 	bl	800d350 <_Bfree>
 800c76e:	9b08      	ldr	r3, [sp, #32]
 800c770:	1b9a      	subs	r2, r3, r6
 800c772:	d004      	beq.n	800c77e <_dtoa_r+0x7b6>
 800c774:	4651      	mov	r1, sl
 800c776:	4620      	mov	r0, r4
 800c778:	f000 ff62 	bl	800d640 <__pow5mult>
 800c77c:	4682      	mov	sl, r0
 800c77e:	2101      	movs	r1, #1
 800c780:	4620      	mov	r0, r4
 800c782:	f000 fe9d 	bl	800d4c0 <__i2b>
 800c786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c788:	4606      	mov	r6, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f340 8081 	ble.w	800c892 <_dtoa_r+0x8ca>
 800c790:	461a      	mov	r2, r3
 800c792:	4601      	mov	r1, r0
 800c794:	4620      	mov	r0, r4
 800c796:	f000 ff53 	bl	800d640 <__pow5mult>
 800c79a:	9b07      	ldr	r3, [sp, #28]
 800c79c:	4606      	mov	r6, r0
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	dd7a      	ble.n	800c898 <_dtoa_r+0x8d0>
 800c7a2:	f04f 0800 	mov.w	r8, #0
 800c7a6:	6933      	ldr	r3, [r6, #16]
 800c7a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c7ac:	6918      	ldr	r0, [r3, #16]
 800c7ae:	f000 fe39 	bl	800d424 <__hi0bits>
 800c7b2:	f1c0 0020 	rsb	r0, r0, #32
 800c7b6:	9b06      	ldr	r3, [sp, #24]
 800c7b8:	4418      	add	r0, r3
 800c7ba:	f010 001f 	ands.w	r0, r0, #31
 800c7be:	f000 8094 	beq.w	800c8ea <_dtoa_r+0x922>
 800c7c2:	f1c0 0320 	rsb	r3, r0, #32
 800c7c6:	2b04      	cmp	r3, #4
 800c7c8:	f340 8085 	ble.w	800c8d6 <_dtoa_r+0x90e>
 800c7cc:	f1c0 001c 	rsb	r0, r0, #28
 800c7d0:	9b05      	ldr	r3, [sp, #20]
 800c7d2:	4403      	add	r3, r0
 800c7d4:	4405      	add	r5, r0
 800c7d6:	9305      	str	r3, [sp, #20]
 800c7d8:	9b06      	ldr	r3, [sp, #24]
 800c7da:	4403      	add	r3, r0
 800c7dc:	9306      	str	r3, [sp, #24]
 800c7de:	9b05      	ldr	r3, [sp, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	dd05      	ble.n	800c7f0 <_dtoa_r+0x828>
 800c7e4:	4651      	mov	r1, sl
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f000 ff83 	bl	800d6f4 <__lshift>
 800c7ee:	4682      	mov	sl, r0
 800c7f0:	9b06      	ldr	r3, [sp, #24]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	dd05      	ble.n	800c802 <_dtoa_r+0x83a>
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 ff7a 	bl	800d6f4 <__lshift>
 800c800:	4606      	mov	r6, r0
 800c802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c804:	2b00      	cmp	r3, #0
 800c806:	d072      	beq.n	800c8ee <_dtoa_r+0x926>
 800c808:	4631      	mov	r1, r6
 800c80a:	4650      	mov	r0, sl
 800c80c:	f000 ffde 	bl	800d7cc <__mcmp>
 800c810:	2800      	cmp	r0, #0
 800c812:	da6c      	bge.n	800c8ee <_dtoa_r+0x926>
 800c814:	2300      	movs	r3, #0
 800c816:	4651      	mov	r1, sl
 800c818:	220a      	movs	r2, #10
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 fdba 	bl	800d394 <__multadd>
 800c820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c822:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c826:	4682      	mov	sl, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 81af 	beq.w	800cb8c <_dtoa_r+0xbc4>
 800c82e:	2300      	movs	r3, #0
 800c830:	4639      	mov	r1, r7
 800c832:	220a      	movs	r2, #10
 800c834:	4620      	mov	r0, r4
 800c836:	f000 fdad 	bl	800d394 <__multadd>
 800c83a:	9b01      	ldr	r3, [sp, #4]
 800c83c:	4607      	mov	r7, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f300 8096 	bgt.w	800c970 <_dtoa_r+0x9a8>
 800c844:	9b07      	ldr	r3, [sp, #28]
 800c846:	2b02      	cmp	r3, #2
 800c848:	dc59      	bgt.n	800c8fe <_dtoa_r+0x936>
 800c84a:	e091      	b.n	800c970 <_dtoa_r+0x9a8>
 800c84c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c852:	e758      	b.n	800c706 <_dtoa_r+0x73e>
 800c854:	9b04      	ldr	r3, [sp, #16]
 800c856:	1e5e      	subs	r6, r3, #1
 800c858:	9b08      	ldr	r3, [sp, #32]
 800c85a:	42b3      	cmp	r3, r6
 800c85c:	bfb7      	itett	lt
 800c85e:	9b08      	ldrlt	r3, [sp, #32]
 800c860:	1b9e      	subge	r6, r3, r6
 800c862:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c864:	1af3      	sublt	r3, r6, r3
 800c866:	bfbe      	ittt	lt
 800c868:	9608      	strlt	r6, [sp, #32]
 800c86a:	2600      	movlt	r6, #0
 800c86c:	18d2      	addlt	r2, r2, r3
 800c86e:	9b04      	ldr	r3, [sp, #16]
 800c870:	bfb8      	it	lt
 800c872:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c874:	2b00      	cmp	r3, #0
 800c876:	bfb7      	itett	lt
 800c878:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c87c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c880:	1a9d      	sublt	r5, r3, r2
 800c882:	2300      	movlt	r3, #0
 800c884:	e741      	b.n	800c70a <_dtoa_r+0x742>
 800c886:	9e08      	ldr	r6, [sp, #32]
 800c888:	9d05      	ldr	r5, [sp, #20]
 800c88a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c88c:	e748      	b.n	800c720 <_dtoa_r+0x758>
 800c88e:	9a08      	ldr	r2, [sp, #32]
 800c890:	e770      	b.n	800c774 <_dtoa_r+0x7ac>
 800c892:	9b07      	ldr	r3, [sp, #28]
 800c894:	2b01      	cmp	r3, #1
 800c896:	dc19      	bgt.n	800c8cc <_dtoa_r+0x904>
 800c898:	9b02      	ldr	r3, [sp, #8]
 800c89a:	b9bb      	cbnz	r3, 800c8cc <_dtoa_r+0x904>
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8a2:	b99b      	cbnz	r3, 800c8cc <_dtoa_r+0x904>
 800c8a4:	9b03      	ldr	r3, [sp, #12]
 800c8a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8aa:	0d1b      	lsrs	r3, r3, #20
 800c8ac:	051b      	lsls	r3, r3, #20
 800c8ae:	b183      	cbz	r3, 800c8d2 <_dtoa_r+0x90a>
 800c8b0:	9b05      	ldr	r3, [sp, #20]
 800c8b2:	f04f 0801 	mov.w	r8, #1
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	9305      	str	r3, [sp, #20]
 800c8ba:	9b06      	ldr	r3, [sp, #24]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	9306      	str	r3, [sp, #24]
 800c8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f47f af6f 	bne.w	800c7a6 <_dtoa_r+0x7de>
 800c8c8:	2001      	movs	r0, #1
 800c8ca:	e774      	b.n	800c7b6 <_dtoa_r+0x7ee>
 800c8cc:	f04f 0800 	mov.w	r8, #0
 800c8d0:	e7f6      	b.n	800c8c0 <_dtoa_r+0x8f8>
 800c8d2:	4698      	mov	r8, r3
 800c8d4:	e7f4      	b.n	800c8c0 <_dtoa_r+0x8f8>
 800c8d6:	d082      	beq.n	800c7de <_dtoa_r+0x816>
 800c8d8:	331c      	adds	r3, #28
 800c8da:	9a05      	ldr	r2, [sp, #20]
 800c8dc:	441a      	add	r2, r3
 800c8de:	441d      	add	r5, r3
 800c8e0:	9205      	str	r2, [sp, #20]
 800c8e2:	9a06      	ldr	r2, [sp, #24]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	9206      	str	r2, [sp, #24]
 800c8e8:	e779      	b.n	800c7de <_dtoa_r+0x816>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	e7f4      	b.n	800c8d8 <_dtoa_r+0x910>
 800c8ee:	9b04      	ldr	r3, [sp, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dc37      	bgt.n	800c964 <_dtoa_r+0x99c>
 800c8f4:	9b07      	ldr	r3, [sp, #28]
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	dd34      	ble.n	800c964 <_dtoa_r+0x99c>
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	9b01      	ldr	r3, [sp, #4]
 800c900:	b963      	cbnz	r3, 800c91c <_dtoa_r+0x954>
 800c902:	4631      	mov	r1, r6
 800c904:	2205      	movs	r2, #5
 800c906:	4620      	mov	r0, r4
 800c908:	f000 fd44 	bl	800d394 <__multadd>
 800c90c:	4601      	mov	r1, r0
 800c90e:	4606      	mov	r6, r0
 800c910:	4650      	mov	r0, sl
 800c912:	f000 ff5b 	bl	800d7cc <__mcmp>
 800c916:	2800      	cmp	r0, #0
 800c918:	f73f adbb 	bgt.w	800c492 <_dtoa_r+0x4ca>
 800c91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c91e:	9d00      	ldr	r5, [sp, #0]
 800c920:	ea6f 0b03 	mvn.w	fp, r3
 800c924:	f04f 0800 	mov.w	r8, #0
 800c928:	4631      	mov	r1, r6
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 fd10 	bl	800d350 <_Bfree>
 800c930:	2f00      	cmp	r7, #0
 800c932:	f43f aeab 	beq.w	800c68c <_dtoa_r+0x6c4>
 800c936:	f1b8 0f00 	cmp.w	r8, #0
 800c93a:	d005      	beq.n	800c948 <_dtoa_r+0x980>
 800c93c:	45b8      	cmp	r8, r7
 800c93e:	d003      	beq.n	800c948 <_dtoa_r+0x980>
 800c940:	4641      	mov	r1, r8
 800c942:	4620      	mov	r0, r4
 800c944:	f000 fd04 	bl	800d350 <_Bfree>
 800c948:	4639      	mov	r1, r7
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 fd00 	bl	800d350 <_Bfree>
 800c950:	e69c      	b.n	800c68c <_dtoa_r+0x6c4>
 800c952:	2600      	movs	r6, #0
 800c954:	4637      	mov	r7, r6
 800c956:	e7e1      	b.n	800c91c <_dtoa_r+0x954>
 800c958:	46bb      	mov	fp, r7
 800c95a:	4637      	mov	r7, r6
 800c95c:	e599      	b.n	800c492 <_dtoa_r+0x4ca>
 800c95e:	bf00      	nop
 800c960:	40240000 	.word	0x40240000
 800c964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c966:	2b00      	cmp	r3, #0
 800c968:	f000 80c8 	beq.w	800cafc <_dtoa_r+0xb34>
 800c96c:	9b04      	ldr	r3, [sp, #16]
 800c96e:	9301      	str	r3, [sp, #4]
 800c970:	2d00      	cmp	r5, #0
 800c972:	dd05      	ble.n	800c980 <_dtoa_r+0x9b8>
 800c974:	4639      	mov	r1, r7
 800c976:	462a      	mov	r2, r5
 800c978:	4620      	mov	r0, r4
 800c97a:	f000 febb 	bl	800d6f4 <__lshift>
 800c97e:	4607      	mov	r7, r0
 800c980:	f1b8 0f00 	cmp.w	r8, #0
 800c984:	d05b      	beq.n	800ca3e <_dtoa_r+0xa76>
 800c986:	6879      	ldr	r1, [r7, #4]
 800c988:	4620      	mov	r0, r4
 800c98a:	f000 fca1 	bl	800d2d0 <_Balloc>
 800c98e:	4605      	mov	r5, r0
 800c990:	b928      	cbnz	r0, 800c99e <_dtoa_r+0x9d6>
 800c992:	4b82      	ldr	r3, [pc, #520]	; (800cb9c <_dtoa_r+0xbd4>)
 800c994:	4602      	mov	r2, r0
 800c996:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c99a:	f7ff bb2e 	b.w	800bffa <_dtoa_r+0x32>
 800c99e:	693a      	ldr	r2, [r7, #16]
 800c9a0:	f107 010c 	add.w	r1, r7, #12
 800c9a4:	300c      	adds	r0, #12
 800c9a6:	3202      	adds	r2, #2
 800c9a8:	0092      	lsls	r2, r2, #2
 800c9aa:	f7ff fa50 	bl	800be4e <memcpy>
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f000 fe9e 	bl	800d6f4 <__lshift>
 800c9b8:	9b00      	ldr	r3, [sp, #0]
 800c9ba:	46b8      	mov	r8, r7
 800c9bc:	4607      	mov	r7, r0
 800c9be:	3301      	adds	r3, #1
 800c9c0:	9304      	str	r3, [sp, #16]
 800c9c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	9308      	str	r3, [sp, #32]
 800c9ca:	9b02      	ldr	r3, [sp, #8]
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	9306      	str	r3, [sp, #24]
 800c9d2:	9b04      	ldr	r3, [sp, #16]
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	f7ff fa62 	bl	800bea4 <quorem>
 800c9e0:	4641      	mov	r1, r8
 800c9e2:	9002      	str	r0, [sp, #8]
 800c9e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c9e8:	4650      	mov	r0, sl
 800c9ea:	f000 feef 	bl	800d7cc <__mcmp>
 800c9ee:	463a      	mov	r2, r7
 800c9f0:	9005      	str	r0, [sp, #20]
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f000 ff05 	bl	800d804 <__mdiff>
 800c9fa:	68c2      	ldr	r2, [r0, #12]
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	bb02      	cbnz	r2, 800ca42 <_dtoa_r+0xa7a>
 800ca00:	4601      	mov	r1, r0
 800ca02:	4650      	mov	r0, sl
 800ca04:	f000 fee2 	bl	800d7cc <__mcmp>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca10:	f000 fc9e 	bl	800d350 <_Bfree>
 800ca14:	9b07      	ldr	r3, [sp, #28]
 800ca16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca18:	9d04      	ldr	r5, [sp, #16]
 800ca1a:	ea43 0102 	orr.w	r1, r3, r2
 800ca1e:	9b06      	ldr	r3, [sp, #24]
 800ca20:	4319      	orrs	r1, r3
 800ca22:	d110      	bne.n	800ca46 <_dtoa_r+0xa7e>
 800ca24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ca28:	d029      	beq.n	800ca7e <_dtoa_r+0xab6>
 800ca2a:	9b05      	ldr	r3, [sp, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	dd02      	ble.n	800ca36 <_dtoa_r+0xa6e>
 800ca30:	9b02      	ldr	r3, [sp, #8]
 800ca32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	f883 9000 	strb.w	r9, [r3]
 800ca3c:	e774      	b.n	800c928 <_dtoa_r+0x960>
 800ca3e:	4638      	mov	r0, r7
 800ca40:	e7ba      	b.n	800c9b8 <_dtoa_r+0x9f0>
 800ca42:	2201      	movs	r2, #1
 800ca44:	e7e1      	b.n	800ca0a <_dtoa_r+0xa42>
 800ca46:	9b05      	ldr	r3, [sp, #20]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	db04      	blt.n	800ca56 <_dtoa_r+0xa8e>
 800ca4c:	9907      	ldr	r1, [sp, #28]
 800ca4e:	430b      	orrs	r3, r1
 800ca50:	9906      	ldr	r1, [sp, #24]
 800ca52:	430b      	orrs	r3, r1
 800ca54:	d120      	bne.n	800ca98 <_dtoa_r+0xad0>
 800ca56:	2a00      	cmp	r2, #0
 800ca58:	dded      	ble.n	800ca36 <_dtoa_r+0xa6e>
 800ca5a:	4651      	mov	r1, sl
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 fe48 	bl	800d6f4 <__lshift>
 800ca64:	4631      	mov	r1, r6
 800ca66:	4682      	mov	sl, r0
 800ca68:	f000 feb0 	bl	800d7cc <__mcmp>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	dc03      	bgt.n	800ca78 <_dtoa_r+0xab0>
 800ca70:	d1e1      	bne.n	800ca36 <_dtoa_r+0xa6e>
 800ca72:	f019 0f01 	tst.w	r9, #1
 800ca76:	d0de      	beq.n	800ca36 <_dtoa_r+0xa6e>
 800ca78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ca7c:	d1d8      	bne.n	800ca30 <_dtoa_r+0xa68>
 800ca7e:	2339      	movs	r3, #57	; 0x39
 800ca80:	9a01      	ldr	r2, [sp, #4]
 800ca82:	7013      	strb	r3, [r2, #0]
 800ca84:	462b      	mov	r3, r5
 800ca86:	461d      	mov	r5, r3
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca8e:	2a39      	cmp	r2, #57	; 0x39
 800ca90:	d06b      	beq.n	800cb6a <_dtoa_r+0xba2>
 800ca92:	3201      	adds	r2, #1
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	e747      	b.n	800c928 <_dtoa_r+0x960>
 800ca98:	2a00      	cmp	r2, #0
 800ca9a:	dd07      	ble.n	800caac <_dtoa_r+0xae4>
 800ca9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800caa0:	d0ed      	beq.n	800ca7e <_dtoa_r+0xab6>
 800caa2:	f109 0301 	add.w	r3, r9, #1
 800caa6:	9a01      	ldr	r2, [sp, #4]
 800caa8:	7013      	strb	r3, [r2, #0]
 800caaa:	e73d      	b.n	800c928 <_dtoa_r+0x960>
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	9a08      	ldr	r2, [sp, #32]
 800cab0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d042      	beq.n	800cb3e <_dtoa_r+0xb76>
 800cab8:	4651      	mov	r1, sl
 800caba:	2300      	movs	r3, #0
 800cabc:	220a      	movs	r2, #10
 800cabe:	4620      	mov	r0, r4
 800cac0:	f000 fc68 	bl	800d394 <__multadd>
 800cac4:	45b8      	cmp	r8, r7
 800cac6:	4682      	mov	sl, r0
 800cac8:	f04f 0300 	mov.w	r3, #0
 800cacc:	f04f 020a 	mov.w	r2, #10
 800cad0:	4641      	mov	r1, r8
 800cad2:	4620      	mov	r0, r4
 800cad4:	d107      	bne.n	800cae6 <_dtoa_r+0xb1e>
 800cad6:	f000 fc5d 	bl	800d394 <__multadd>
 800cada:	4680      	mov	r8, r0
 800cadc:	4607      	mov	r7, r0
 800cade:	9b04      	ldr	r3, [sp, #16]
 800cae0:	3301      	adds	r3, #1
 800cae2:	9304      	str	r3, [sp, #16]
 800cae4:	e775      	b.n	800c9d2 <_dtoa_r+0xa0a>
 800cae6:	f000 fc55 	bl	800d394 <__multadd>
 800caea:	4639      	mov	r1, r7
 800caec:	4680      	mov	r8, r0
 800caee:	2300      	movs	r3, #0
 800caf0:	220a      	movs	r2, #10
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 fc4e 	bl	800d394 <__multadd>
 800caf8:	4607      	mov	r7, r0
 800cafa:	e7f0      	b.n	800cade <_dtoa_r+0xb16>
 800cafc:	9b04      	ldr	r3, [sp, #16]
 800cafe:	9301      	str	r3, [sp, #4]
 800cb00:	9d00      	ldr	r5, [sp, #0]
 800cb02:	4631      	mov	r1, r6
 800cb04:	4650      	mov	r0, sl
 800cb06:	f7ff f9cd 	bl	800bea4 <quorem>
 800cb0a:	9b00      	ldr	r3, [sp, #0]
 800cb0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb10:	f805 9b01 	strb.w	r9, [r5], #1
 800cb14:	1aea      	subs	r2, r5, r3
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	dd07      	ble.n	800cb2c <_dtoa_r+0xb64>
 800cb1c:	4651      	mov	r1, sl
 800cb1e:	2300      	movs	r3, #0
 800cb20:	220a      	movs	r2, #10
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 fc36 	bl	800d394 <__multadd>
 800cb28:	4682      	mov	sl, r0
 800cb2a:	e7ea      	b.n	800cb02 <_dtoa_r+0xb3a>
 800cb2c:	9b01      	ldr	r3, [sp, #4]
 800cb2e:	f04f 0800 	mov.w	r8, #0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bfcc      	ite	gt
 800cb36:	461d      	movgt	r5, r3
 800cb38:	2501      	movle	r5, #1
 800cb3a:	9b00      	ldr	r3, [sp, #0]
 800cb3c:	441d      	add	r5, r3
 800cb3e:	4651      	mov	r1, sl
 800cb40:	2201      	movs	r2, #1
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 fdd6 	bl	800d6f4 <__lshift>
 800cb48:	4631      	mov	r1, r6
 800cb4a:	4682      	mov	sl, r0
 800cb4c:	f000 fe3e 	bl	800d7cc <__mcmp>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	dc97      	bgt.n	800ca84 <_dtoa_r+0xabc>
 800cb54:	d102      	bne.n	800cb5c <_dtoa_r+0xb94>
 800cb56:	f019 0f01 	tst.w	r9, #1
 800cb5a:	d193      	bne.n	800ca84 <_dtoa_r+0xabc>
 800cb5c:	462b      	mov	r3, r5
 800cb5e:	461d      	mov	r5, r3
 800cb60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb64:	2a30      	cmp	r2, #48	; 0x30
 800cb66:	d0fa      	beq.n	800cb5e <_dtoa_r+0xb96>
 800cb68:	e6de      	b.n	800c928 <_dtoa_r+0x960>
 800cb6a:	9a00      	ldr	r2, [sp, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d18a      	bne.n	800ca86 <_dtoa_r+0xabe>
 800cb70:	f10b 0b01 	add.w	fp, fp, #1
 800cb74:	2331      	movs	r3, #49	; 0x31
 800cb76:	e797      	b.n	800caa8 <_dtoa_r+0xae0>
 800cb78:	4b09      	ldr	r3, [pc, #36]	; (800cba0 <_dtoa_r+0xbd8>)
 800cb7a:	f7ff ba9a 	b.w	800c0b2 <_dtoa_r+0xea>
 800cb7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f47f aa6e 	bne.w	800c062 <_dtoa_r+0x9a>
 800cb86:	4b07      	ldr	r3, [pc, #28]	; (800cba4 <_dtoa_r+0xbdc>)
 800cb88:	f7ff ba93 	b.w	800c0b2 <_dtoa_r+0xea>
 800cb8c:	9b01      	ldr	r3, [sp, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	dcb6      	bgt.n	800cb00 <_dtoa_r+0xb38>
 800cb92:	9b07      	ldr	r3, [sp, #28]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	f73f aeb2 	bgt.w	800c8fe <_dtoa_r+0x936>
 800cb9a:	e7b1      	b.n	800cb00 <_dtoa_r+0xb38>
 800cb9c:	0800fb94 	.word	0x0800fb94
 800cba0:	0800fa60 	.word	0x0800fa60
 800cba4:	0800fb2f 	.word	0x0800fb2f

0800cba8 <_free_r>:
 800cba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbaa:	2900      	cmp	r1, #0
 800cbac:	d043      	beq.n	800cc36 <_free_r+0x8e>
 800cbae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb2:	1f0c      	subs	r4, r1, #4
 800cbb4:	9001      	str	r0, [sp, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	bfb8      	it	lt
 800cbba:	18e4      	addlt	r4, r4, r3
 800cbbc:	f7fe ff40 	bl	800ba40 <__malloc_lock>
 800cbc0:	4a1e      	ldr	r2, [pc, #120]	; (800cc3c <_free_r+0x94>)
 800cbc2:	9801      	ldr	r0, [sp, #4]
 800cbc4:	6813      	ldr	r3, [r2, #0]
 800cbc6:	b933      	cbnz	r3, 800cbd6 <_free_r+0x2e>
 800cbc8:	6063      	str	r3, [r4, #4]
 800cbca:	6014      	str	r4, [r2, #0]
 800cbcc:	b003      	add	sp, #12
 800cbce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbd2:	f7fe bf3b 	b.w	800ba4c <__malloc_unlock>
 800cbd6:	42a3      	cmp	r3, r4
 800cbd8:	d908      	bls.n	800cbec <_free_r+0x44>
 800cbda:	6825      	ldr	r5, [r4, #0]
 800cbdc:	1961      	adds	r1, r4, r5
 800cbde:	428b      	cmp	r3, r1
 800cbe0:	bf01      	itttt	eq
 800cbe2:	6819      	ldreq	r1, [r3, #0]
 800cbe4:	685b      	ldreq	r3, [r3, #4]
 800cbe6:	1949      	addeq	r1, r1, r5
 800cbe8:	6021      	streq	r1, [r4, #0]
 800cbea:	e7ed      	b.n	800cbc8 <_free_r+0x20>
 800cbec:	461a      	mov	r2, r3
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	b10b      	cbz	r3, 800cbf6 <_free_r+0x4e>
 800cbf2:	42a3      	cmp	r3, r4
 800cbf4:	d9fa      	bls.n	800cbec <_free_r+0x44>
 800cbf6:	6811      	ldr	r1, [r2, #0]
 800cbf8:	1855      	adds	r5, r2, r1
 800cbfa:	42a5      	cmp	r5, r4
 800cbfc:	d10b      	bne.n	800cc16 <_free_r+0x6e>
 800cbfe:	6824      	ldr	r4, [r4, #0]
 800cc00:	4421      	add	r1, r4
 800cc02:	1854      	adds	r4, r2, r1
 800cc04:	6011      	str	r1, [r2, #0]
 800cc06:	42a3      	cmp	r3, r4
 800cc08:	d1e0      	bne.n	800cbcc <_free_r+0x24>
 800cc0a:	681c      	ldr	r4, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	440c      	add	r4, r1
 800cc10:	6053      	str	r3, [r2, #4]
 800cc12:	6014      	str	r4, [r2, #0]
 800cc14:	e7da      	b.n	800cbcc <_free_r+0x24>
 800cc16:	d902      	bls.n	800cc1e <_free_r+0x76>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	6003      	str	r3, [r0, #0]
 800cc1c:	e7d6      	b.n	800cbcc <_free_r+0x24>
 800cc1e:	6825      	ldr	r5, [r4, #0]
 800cc20:	1961      	adds	r1, r4, r5
 800cc22:	428b      	cmp	r3, r1
 800cc24:	bf02      	ittt	eq
 800cc26:	6819      	ldreq	r1, [r3, #0]
 800cc28:	685b      	ldreq	r3, [r3, #4]
 800cc2a:	1949      	addeq	r1, r1, r5
 800cc2c:	6063      	str	r3, [r4, #4]
 800cc2e:	bf08      	it	eq
 800cc30:	6021      	streq	r1, [r4, #0]
 800cc32:	6054      	str	r4, [r2, #4]
 800cc34:	e7ca      	b.n	800cbcc <_free_r+0x24>
 800cc36:	b003      	add	sp, #12
 800cc38:	bd30      	pop	{r4, r5, pc}
 800cc3a:	bf00      	nop
 800cc3c:	20000f28 	.word	0x20000f28

0800cc40 <__ssputs_r>:
 800cc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc44:	461f      	mov	r7, r3
 800cc46:	688e      	ldr	r6, [r1, #8]
 800cc48:	4682      	mov	sl, r0
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	42be      	cmp	r6, r7
 800cc4e:	4690      	mov	r8, r2
 800cc50:	680b      	ldr	r3, [r1, #0]
 800cc52:	d82c      	bhi.n	800ccae <__ssputs_r+0x6e>
 800cc54:	898a      	ldrh	r2, [r1, #12]
 800cc56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc5a:	d026      	beq.n	800ccaa <__ssputs_r+0x6a>
 800cc5c:	6965      	ldr	r5, [r4, #20]
 800cc5e:	6909      	ldr	r1, [r1, #16]
 800cc60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc64:	eba3 0901 	sub.w	r9, r3, r1
 800cc68:	1c7b      	adds	r3, r7, #1
 800cc6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc6e:	444b      	add	r3, r9
 800cc70:	106d      	asrs	r5, r5, #1
 800cc72:	429d      	cmp	r5, r3
 800cc74:	bf38      	it	cc
 800cc76:	461d      	movcc	r5, r3
 800cc78:	0553      	lsls	r3, r2, #21
 800cc7a:	d527      	bpl.n	800cccc <__ssputs_r+0x8c>
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	f7fe fc99 	bl	800b5b4 <_malloc_r>
 800cc82:	4606      	mov	r6, r0
 800cc84:	b360      	cbz	r0, 800cce0 <__ssputs_r+0xa0>
 800cc86:	464a      	mov	r2, r9
 800cc88:	6921      	ldr	r1, [r4, #16]
 800cc8a:	f7ff f8e0 	bl	800be4e <memcpy>
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc98:	81a3      	strh	r3, [r4, #12]
 800cc9a:	6126      	str	r6, [r4, #16]
 800cc9c:	444e      	add	r6, r9
 800cc9e:	6165      	str	r5, [r4, #20]
 800cca0:	eba5 0509 	sub.w	r5, r5, r9
 800cca4:	6026      	str	r6, [r4, #0]
 800cca6:	463e      	mov	r6, r7
 800cca8:	60a5      	str	r5, [r4, #8]
 800ccaa:	42be      	cmp	r6, r7
 800ccac:	d900      	bls.n	800ccb0 <__ssputs_r+0x70>
 800ccae:	463e      	mov	r6, r7
 800ccb0:	4632      	mov	r2, r6
 800ccb2:	4641      	mov	r1, r8
 800ccb4:	6820      	ldr	r0, [r4, #0]
 800ccb6:	f001 f83e 	bl	800dd36 <memmove>
 800ccba:	68a3      	ldr	r3, [r4, #8]
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	1b9b      	subs	r3, r3, r6
 800ccc0:	60a3      	str	r3, [r4, #8]
 800ccc2:	6823      	ldr	r3, [r4, #0]
 800ccc4:	4433      	add	r3, r6
 800ccc6:	6023      	str	r3, [r4, #0]
 800ccc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cccc:	462a      	mov	r2, r5
 800ccce:	f000 fed9 	bl	800da84 <_realloc_r>
 800ccd2:	4606      	mov	r6, r0
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d1e0      	bne.n	800cc9a <__ssputs_r+0x5a>
 800ccd8:	6921      	ldr	r1, [r4, #16]
 800ccda:	4650      	mov	r0, sl
 800ccdc:	f7ff ff64 	bl	800cba8 <_free_r>
 800cce0:	230c      	movs	r3, #12
 800cce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cce6:	f8ca 3000 	str.w	r3, [sl]
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	e7e9      	b.n	800ccc8 <__ssputs_r+0x88>

0800ccf4 <_svfiprintf_r>:
 800ccf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf8:	4698      	mov	r8, r3
 800ccfa:	898b      	ldrh	r3, [r1, #12]
 800ccfc:	b09d      	sub	sp, #116	; 0x74
 800ccfe:	4607      	mov	r7, r0
 800cd00:	061b      	lsls	r3, r3, #24
 800cd02:	460d      	mov	r5, r1
 800cd04:	4614      	mov	r4, r2
 800cd06:	d50e      	bpl.n	800cd26 <_svfiprintf_r+0x32>
 800cd08:	690b      	ldr	r3, [r1, #16]
 800cd0a:	b963      	cbnz	r3, 800cd26 <_svfiprintf_r+0x32>
 800cd0c:	2140      	movs	r1, #64	; 0x40
 800cd0e:	f7fe fc51 	bl	800b5b4 <_malloc_r>
 800cd12:	6028      	str	r0, [r5, #0]
 800cd14:	6128      	str	r0, [r5, #16]
 800cd16:	b920      	cbnz	r0, 800cd22 <_svfiprintf_r+0x2e>
 800cd18:	230c      	movs	r3, #12
 800cd1a:	603b      	str	r3, [r7, #0]
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd20:	e0d0      	b.n	800cec4 <_svfiprintf_r+0x1d0>
 800cd22:	2340      	movs	r3, #64	; 0x40
 800cd24:	616b      	str	r3, [r5, #20]
 800cd26:	2300      	movs	r3, #0
 800cd28:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd2c:	f04f 0901 	mov.w	r9, #1
 800cd30:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cedc <_svfiprintf_r+0x1e8>
 800cd34:	9309      	str	r3, [sp, #36]	; 0x24
 800cd36:	2320      	movs	r3, #32
 800cd38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd3c:	2330      	movs	r3, #48	; 0x30
 800cd3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd42:	4623      	mov	r3, r4
 800cd44:	469a      	mov	sl, r3
 800cd46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd4a:	b10a      	cbz	r2, 800cd50 <_svfiprintf_r+0x5c>
 800cd4c:	2a25      	cmp	r2, #37	; 0x25
 800cd4e:	d1f9      	bne.n	800cd44 <_svfiprintf_r+0x50>
 800cd50:	ebba 0b04 	subs.w	fp, sl, r4
 800cd54:	d00b      	beq.n	800cd6e <_svfiprintf_r+0x7a>
 800cd56:	465b      	mov	r3, fp
 800cd58:	4622      	mov	r2, r4
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	f7ff ff6f 	bl	800cc40 <__ssputs_r>
 800cd62:	3001      	adds	r0, #1
 800cd64:	f000 80a9 	beq.w	800ceba <_svfiprintf_r+0x1c6>
 800cd68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd6a:	445a      	add	r2, fp
 800cd6c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f000 80a1 	beq.w	800ceba <_svfiprintf_r+0x1c6>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd7e:	f10a 0a01 	add.w	sl, sl, #1
 800cd82:	9304      	str	r3, [sp, #16]
 800cd84:	9307      	str	r3, [sp, #28]
 800cd86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd8a:	931a      	str	r3, [sp, #104]	; 0x68
 800cd8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd90:	4654      	mov	r4, sl
 800cd92:	2205      	movs	r2, #5
 800cd94:	4851      	ldr	r0, [pc, #324]	; (800cedc <_svfiprintf_r+0x1e8>)
 800cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9a:	f7ff f84a 	bl	800be32 <memchr>
 800cd9e:	9a04      	ldr	r2, [sp, #16]
 800cda0:	b9d8      	cbnz	r0, 800cdda <_svfiprintf_r+0xe6>
 800cda2:	06d0      	lsls	r0, r2, #27
 800cda4:	bf44      	itt	mi
 800cda6:	2320      	movmi	r3, #32
 800cda8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdac:	0711      	lsls	r1, r2, #28
 800cdae:	bf44      	itt	mi
 800cdb0:	232b      	movmi	r3, #43	; 0x2b
 800cdb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdba:	2b2a      	cmp	r3, #42	; 0x2a
 800cdbc:	d015      	beq.n	800cdea <_svfiprintf_r+0xf6>
 800cdbe:	9a07      	ldr	r2, [sp, #28]
 800cdc0:	4654      	mov	r4, sl
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	f04f 0c0a 	mov.w	ip, #10
 800cdc8:	4621      	mov	r1, r4
 800cdca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdce:	3b30      	subs	r3, #48	; 0x30
 800cdd0:	2b09      	cmp	r3, #9
 800cdd2:	d94d      	bls.n	800ce70 <_svfiprintf_r+0x17c>
 800cdd4:	b1b0      	cbz	r0, 800ce04 <_svfiprintf_r+0x110>
 800cdd6:	9207      	str	r2, [sp, #28]
 800cdd8:	e014      	b.n	800ce04 <_svfiprintf_r+0x110>
 800cdda:	eba0 0308 	sub.w	r3, r0, r8
 800cdde:	46a2      	mov	sl, r4
 800cde0:	fa09 f303 	lsl.w	r3, r9, r3
 800cde4:	4313      	orrs	r3, r2
 800cde6:	9304      	str	r3, [sp, #16]
 800cde8:	e7d2      	b.n	800cd90 <_svfiprintf_r+0x9c>
 800cdea:	9b03      	ldr	r3, [sp, #12]
 800cdec:	1d19      	adds	r1, r3, #4
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	9103      	str	r1, [sp, #12]
 800cdf4:	bfbb      	ittet	lt
 800cdf6:	425b      	neglt	r3, r3
 800cdf8:	f042 0202 	orrlt.w	r2, r2, #2
 800cdfc:	9307      	strge	r3, [sp, #28]
 800cdfe:	9307      	strlt	r3, [sp, #28]
 800ce00:	bfb8      	it	lt
 800ce02:	9204      	strlt	r2, [sp, #16]
 800ce04:	7823      	ldrb	r3, [r4, #0]
 800ce06:	2b2e      	cmp	r3, #46	; 0x2e
 800ce08:	d10c      	bne.n	800ce24 <_svfiprintf_r+0x130>
 800ce0a:	7863      	ldrb	r3, [r4, #1]
 800ce0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce0e:	d134      	bne.n	800ce7a <_svfiprintf_r+0x186>
 800ce10:	9b03      	ldr	r3, [sp, #12]
 800ce12:	3402      	adds	r4, #2
 800ce14:	1d1a      	adds	r2, r3, #4
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	9203      	str	r2, [sp, #12]
 800ce1c:	bfb8      	it	lt
 800ce1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce22:	9305      	str	r3, [sp, #20]
 800ce24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ceec <_svfiprintf_r+0x1f8>
 800ce28:	2203      	movs	r2, #3
 800ce2a:	7821      	ldrb	r1, [r4, #0]
 800ce2c:	4650      	mov	r0, sl
 800ce2e:	f7ff f800 	bl	800be32 <memchr>
 800ce32:	b138      	cbz	r0, 800ce44 <_svfiprintf_r+0x150>
 800ce34:	eba0 000a 	sub.w	r0, r0, sl
 800ce38:	2240      	movs	r2, #64	; 0x40
 800ce3a:	9b04      	ldr	r3, [sp, #16]
 800ce3c:	3401      	adds	r4, #1
 800ce3e:	4082      	lsls	r2, r0
 800ce40:	4313      	orrs	r3, r2
 800ce42:	9304      	str	r3, [sp, #16]
 800ce44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce48:	2206      	movs	r2, #6
 800ce4a:	4825      	ldr	r0, [pc, #148]	; (800cee0 <_svfiprintf_r+0x1ec>)
 800ce4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce50:	f7fe ffef 	bl	800be32 <memchr>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d038      	beq.n	800ceca <_svfiprintf_r+0x1d6>
 800ce58:	4b22      	ldr	r3, [pc, #136]	; (800cee4 <_svfiprintf_r+0x1f0>)
 800ce5a:	bb1b      	cbnz	r3, 800cea4 <_svfiprintf_r+0x1b0>
 800ce5c:	9b03      	ldr	r3, [sp, #12]
 800ce5e:	3307      	adds	r3, #7
 800ce60:	f023 0307 	bic.w	r3, r3, #7
 800ce64:	3308      	adds	r3, #8
 800ce66:	9303      	str	r3, [sp, #12]
 800ce68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6a:	4433      	add	r3, r6
 800ce6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce6e:	e768      	b.n	800cd42 <_svfiprintf_r+0x4e>
 800ce70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce74:	460c      	mov	r4, r1
 800ce76:	2001      	movs	r0, #1
 800ce78:	e7a6      	b.n	800cdc8 <_svfiprintf_r+0xd4>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	3401      	adds	r4, #1
 800ce7e:	f04f 0c0a 	mov.w	ip, #10
 800ce82:	4619      	mov	r1, r3
 800ce84:	9305      	str	r3, [sp, #20]
 800ce86:	4620      	mov	r0, r4
 800ce88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce8c:	3a30      	subs	r2, #48	; 0x30
 800ce8e:	2a09      	cmp	r2, #9
 800ce90:	d903      	bls.n	800ce9a <_svfiprintf_r+0x1a6>
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0c6      	beq.n	800ce24 <_svfiprintf_r+0x130>
 800ce96:	9105      	str	r1, [sp, #20]
 800ce98:	e7c4      	b.n	800ce24 <_svfiprintf_r+0x130>
 800ce9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce9e:	4604      	mov	r4, r0
 800cea0:	2301      	movs	r3, #1
 800cea2:	e7f0      	b.n	800ce86 <_svfiprintf_r+0x192>
 800cea4:	ab03      	add	r3, sp, #12
 800cea6:	462a      	mov	r2, r5
 800cea8:	a904      	add	r1, sp, #16
 800ceaa:	4638      	mov	r0, r7
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <_svfiprintf_r+0x1f4>)
 800ceb0:	f7fe f922 	bl	800b0f8 <_printf_float>
 800ceb4:	1c42      	adds	r2, r0, #1
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	d1d6      	bne.n	800ce68 <_svfiprintf_r+0x174>
 800ceba:	89ab      	ldrh	r3, [r5, #12]
 800cebc:	065b      	lsls	r3, r3, #25
 800cebe:	f53f af2d 	bmi.w	800cd1c <_svfiprintf_r+0x28>
 800cec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cec4:	b01d      	add	sp, #116	; 0x74
 800cec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceca:	ab03      	add	r3, sp, #12
 800cecc:	462a      	mov	r2, r5
 800cece:	a904      	add	r1, sp, #16
 800ced0:	4638      	mov	r0, r7
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	4b04      	ldr	r3, [pc, #16]	; (800cee8 <_svfiprintf_r+0x1f4>)
 800ced6:	f7fe fc5f 	bl	800b798 <_printf_i>
 800ceda:	e7eb      	b.n	800ceb4 <_svfiprintf_r+0x1c0>
 800cedc:	0800fba5 	.word	0x0800fba5
 800cee0:	0800fbaf 	.word	0x0800fbaf
 800cee4:	0800b0f9 	.word	0x0800b0f9
 800cee8:	0800cc41 	.word	0x0800cc41
 800ceec:	0800fbab 	.word	0x0800fbab

0800cef0 <__sfputc_r>:
 800cef0:	6893      	ldr	r3, [r2, #8]
 800cef2:	3b01      	subs	r3, #1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	6093      	str	r3, [r2, #8]
 800cef8:	b410      	push	{r4}
 800cefa:	da08      	bge.n	800cf0e <__sfputc_r+0x1e>
 800cefc:	6994      	ldr	r4, [r2, #24]
 800cefe:	42a3      	cmp	r3, r4
 800cf00:	db01      	blt.n	800cf06 <__sfputc_r+0x16>
 800cf02:	290a      	cmp	r1, #10
 800cf04:	d103      	bne.n	800cf0e <__sfputc_r+0x1e>
 800cf06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf0a:	f000 bdea 	b.w	800dae2 <__swbuf_r>
 800cf0e:	6813      	ldr	r3, [r2, #0]
 800cf10:	1c58      	adds	r0, r3, #1
 800cf12:	6010      	str	r0, [r2, #0]
 800cf14:	4608      	mov	r0, r1
 800cf16:	7019      	strb	r1, [r3, #0]
 800cf18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf1c:	4770      	bx	lr

0800cf1e <__sfputs_r>:
 800cf1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf20:	4606      	mov	r6, r0
 800cf22:	460f      	mov	r7, r1
 800cf24:	4614      	mov	r4, r2
 800cf26:	18d5      	adds	r5, r2, r3
 800cf28:	42ac      	cmp	r4, r5
 800cf2a:	d101      	bne.n	800cf30 <__sfputs_r+0x12>
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	e007      	b.n	800cf40 <__sfputs_r+0x22>
 800cf30:	463a      	mov	r2, r7
 800cf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf36:	4630      	mov	r0, r6
 800cf38:	f7ff ffda 	bl	800cef0 <__sfputc_r>
 800cf3c:	1c43      	adds	r3, r0, #1
 800cf3e:	d1f3      	bne.n	800cf28 <__sfputs_r+0xa>
 800cf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf44 <_vfiprintf_r>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	460d      	mov	r5, r1
 800cf4a:	b09d      	sub	sp, #116	; 0x74
 800cf4c:	4614      	mov	r4, r2
 800cf4e:	4698      	mov	r8, r3
 800cf50:	4606      	mov	r6, r0
 800cf52:	b118      	cbz	r0, 800cf5c <_vfiprintf_r+0x18>
 800cf54:	6a03      	ldr	r3, [r0, #32]
 800cf56:	b90b      	cbnz	r3, 800cf5c <_vfiprintf_r+0x18>
 800cf58:	f7fe fe76 	bl	800bc48 <__sinit>
 800cf5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf5e:	07d9      	lsls	r1, r3, #31
 800cf60:	d405      	bmi.n	800cf6e <_vfiprintf_r+0x2a>
 800cf62:	89ab      	ldrh	r3, [r5, #12]
 800cf64:	059a      	lsls	r2, r3, #22
 800cf66:	d402      	bmi.n	800cf6e <_vfiprintf_r+0x2a>
 800cf68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf6a:	f7fe ff60 	bl	800be2e <__retarget_lock_acquire_recursive>
 800cf6e:	89ab      	ldrh	r3, [r5, #12]
 800cf70:	071b      	lsls	r3, r3, #28
 800cf72:	d501      	bpl.n	800cf78 <_vfiprintf_r+0x34>
 800cf74:	692b      	ldr	r3, [r5, #16]
 800cf76:	b99b      	cbnz	r3, 800cfa0 <_vfiprintf_r+0x5c>
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f000 fdee 	bl	800db5c <__swsetup_r>
 800cf80:	b170      	cbz	r0, 800cfa0 <_vfiprintf_r+0x5c>
 800cf82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf84:	07dc      	lsls	r4, r3, #31
 800cf86:	d504      	bpl.n	800cf92 <_vfiprintf_r+0x4e>
 800cf88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf8c:	b01d      	add	sp, #116	; 0x74
 800cf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	0598      	lsls	r0, r3, #22
 800cf96:	d4f7      	bmi.n	800cf88 <_vfiprintf_r+0x44>
 800cf98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf9a:	f7fe ff49 	bl	800be30 <__retarget_lock_release_recursive>
 800cf9e:	e7f3      	b.n	800cf88 <_vfiprintf_r+0x44>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfa6:	f04f 0901 	mov.w	r9, #1
 800cfaa:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800d164 <_vfiprintf_r+0x220>
 800cfae:	9309      	str	r3, [sp, #36]	; 0x24
 800cfb0:	2320      	movs	r3, #32
 800cfb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfb6:	2330      	movs	r3, #48	; 0x30
 800cfb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfbc:	4623      	mov	r3, r4
 800cfbe:	469a      	mov	sl, r3
 800cfc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfc4:	b10a      	cbz	r2, 800cfca <_vfiprintf_r+0x86>
 800cfc6:	2a25      	cmp	r2, #37	; 0x25
 800cfc8:	d1f9      	bne.n	800cfbe <_vfiprintf_r+0x7a>
 800cfca:	ebba 0b04 	subs.w	fp, sl, r4
 800cfce:	d00b      	beq.n	800cfe8 <_vfiprintf_r+0xa4>
 800cfd0:	465b      	mov	r3, fp
 800cfd2:	4622      	mov	r2, r4
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	4630      	mov	r0, r6
 800cfd8:	f7ff ffa1 	bl	800cf1e <__sfputs_r>
 800cfdc:	3001      	adds	r0, #1
 800cfde:	f000 80a9 	beq.w	800d134 <_vfiprintf_r+0x1f0>
 800cfe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfe4:	445a      	add	r2, fp
 800cfe6:	9209      	str	r2, [sp, #36]	; 0x24
 800cfe8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 80a1 	beq.w	800d134 <_vfiprintf_r+0x1f0>
 800cff2:	2300      	movs	r3, #0
 800cff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cff8:	f10a 0a01 	add.w	sl, sl, #1
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	9307      	str	r3, [sp, #28]
 800d000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d004:	931a      	str	r3, [sp, #104]	; 0x68
 800d006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d00a:	4654      	mov	r4, sl
 800d00c:	2205      	movs	r2, #5
 800d00e:	4855      	ldr	r0, [pc, #340]	; (800d164 <_vfiprintf_r+0x220>)
 800d010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d014:	f7fe ff0d 	bl	800be32 <memchr>
 800d018:	9a04      	ldr	r2, [sp, #16]
 800d01a:	b9d8      	cbnz	r0, 800d054 <_vfiprintf_r+0x110>
 800d01c:	06d1      	lsls	r1, r2, #27
 800d01e:	bf44      	itt	mi
 800d020:	2320      	movmi	r3, #32
 800d022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d026:	0713      	lsls	r3, r2, #28
 800d028:	bf44      	itt	mi
 800d02a:	232b      	movmi	r3, #43	; 0x2b
 800d02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d030:	f89a 3000 	ldrb.w	r3, [sl]
 800d034:	2b2a      	cmp	r3, #42	; 0x2a
 800d036:	d015      	beq.n	800d064 <_vfiprintf_r+0x120>
 800d038:	9a07      	ldr	r2, [sp, #28]
 800d03a:	4654      	mov	r4, sl
 800d03c:	2000      	movs	r0, #0
 800d03e:	f04f 0c0a 	mov.w	ip, #10
 800d042:	4621      	mov	r1, r4
 800d044:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d048:	3b30      	subs	r3, #48	; 0x30
 800d04a:	2b09      	cmp	r3, #9
 800d04c:	d94d      	bls.n	800d0ea <_vfiprintf_r+0x1a6>
 800d04e:	b1b0      	cbz	r0, 800d07e <_vfiprintf_r+0x13a>
 800d050:	9207      	str	r2, [sp, #28]
 800d052:	e014      	b.n	800d07e <_vfiprintf_r+0x13a>
 800d054:	eba0 0308 	sub.w	r3, r0, r8
 800d058:	46a2      	mov	sl, r4
 800d05a:	fa09 f303 	lsl.w	r3, r9, r3
 800d05e:	4313      	orrs	r3, r2
 800d060:	9304      	str	r3, [sp, #16]
 800d062:	e7d2      	b.n	800d00a <_vfiprintf_r+0xc6>
 800d064:	9b03      	ldr	r3, [sp, #12]
 800d066:	1d19      	adds	r1, r3, #4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	9103      	str	r1, [sp, #12]
 800d06e:	bfbb      	ittet	lt
 800d070:	425b      	neglt	r3, r3
 800d072:	f042 0202 	orrlt.w	r2, r2, #2
 800d076:	9307      	strge	r3, [sp, #28]
 800d078:	9307      	strlt	r3, [sp, #28]
 800d07a:	bfb8      	it	lt
 800d07c:	9204      	strlt	r2, [sp, #16]
 800d07e:	7823      	ldrb	r3, [r4, #0]
 800d080:	2b2e      	cmp	r3, #46	; 0x2e
 800d082:	d10c      	bne.n	800d09e <_vfiprintf_r+0x15a>
 800d084:	7863      	ldrb	r3, [r4, #1]
 800d086:	2b2a      	cmp	r3, #42	; 0x2a
 800d088:	d134      	bne.n	800d0f4 <_vfiprintf_r+0x1b0>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	3402      	adds	r4, #2
 800d08e:	1d1a      	adds	r2, r3, #4
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	9203      	str	r2, [sp, #12]
 800d096:	bfb8      	it	lt
 800d098:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d09c:	9305      	str	r3, [sp, #20]
 800d09e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d174 <_vfiprintf_r+0x230>
 800d0a2:	2203      	movs	r2, #3
 800d0a4:	7821      	ldrb	r1, [r4, #0]
 800d0a6:	4650      	mov	r0, sl
 800d0a8:	f7fe fec3 	bl	800be32 <memchr>
 800d0ac:	b138      	cbz	r0, 800d0be <_vfiprintf_r+0x17a>
 800d0ae:	eba0 000a 	sub.w	r0, r0, sl
 800d0b2:	2240      	movs	r2, #64	; 0x40
 800d0b4:	9b04      	ldr	r3, [sp, #16]
 800d0b6:	3401      	adds	r4, #1
 800d0b8:	4082      	lsls	r2, r0
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	9304      	str	r3, [sp, #16]
 800d0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c2:	2206      	movs	r2, #6
 800d0c4:	4828      	ldr	r0, [pc, #160]	; (800d168 <_vfiprintf_r+0x224>)
 800d0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0ca:	f7fe feb2 	bl	800be32 <memchr>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d03f      	beq.n	800d152 <_vfiprintf_r+0x20e>
 800d0d2:	4b26      	ldr	r3, [pc, #152]	; (800d16c <_vfiprintf_r+0x228>)
 800d0d4:	bb1b      	cbnz	r3, 800d11e <_vfiprintf_r+0x1da>
 800d0d6:	9b03      	ldr	r3, [sp, #12]
 800d0d8:	3307      	adds	r3, #7
 800d0da:	f023 0307 	bic.w	r3, r3, #7
 800d0de:	3308      	adds	r3, #8
 800d0e0:	9303      	str	r3, [sp, #12]
 800d0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e4:	443b      	add	r3, r7
 800d0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e8:	e768      	b.n	800cfbc <_vfiprintf_r+0x78>
 800d0ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	2001      	movs	r0, #1
 800d0f2:	e7a6      	b.n	800d042 <_vfiprintf_r+0xfe>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	3401      	adds	r4, #1
 800d0f8:	f04f 0c0a 	mov.w	ip, #10
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	9305      	str	r3, [sp, #20]
 800d100:	4620      	mov	r0, r4
 800d102:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d106:	3a30      	subs	r2, #48	; 0x30
 800d108:	2a09      	cmp	r2, #9
 800d10a:	d903      	bls.n	800d114 <_vfiprintf_r+0x1d0>
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d0c6      	beq.n	800d09e <_vfiprintf_r+0x15a>
 800d110:	9105      	str	r1, [sp, #20]
 800d112:	e7c4      	b.n	800d09e <_vfiprintf_r+0x15a>
 800d114:	fb0c 2101 	mla	r1, ip, r1, r2
 800d118:	4604      	mov	r4, r0
 800d11a:	2301      	movs	r3, #1
 800d11c:	e7f0      	b.n	800d100 <_vfiprintf_r+0x1bc>
 800d11e:	ab03      	add	r3, sp, #12
 800d120:	462a      	mov	r2, r5
 800d122:	a904      	add	r1, sp, #16
 800d124:	4630      	mov	r0, r6
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4b11      	ldr	r3, [pc, #68]	; (800d170 <_vfiprintf_r+0x22c>)
 800d12a:	f7fd ffe5 	bl	800b0f8 <_printf_float>
 800d12e:	4607      	mov	r7, r0
 800d130:	1c78      	adds	r0, r7, #1
 800d132:	d1d6      	bne.n	800d0e2 <_vfiprintf_r+0x19e>
 800d134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d136:	07d9      	lsls	r1, r3, #31
 800d138:	d405      	bmi.n	800d146 <_vfiprintf_r+0x202>
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	059a      	lsls	r2, r3, #22
 800d13e:	d402      	bmi.n	800d146 <_vfiprintf_r+0x202>
 800d140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d142:	f7fe fe75 	bl	800be30 <__retarget_lock_release_recursive>
 800d146:	89ab      	ldrh	r3, [r5, #12]
 800d148:	065b      	lsls	r3, r3, #25
 800d14a:	f53f af1d 	bmi.w	800cf88 <_vfiprintf_r+0x44>
 800d14e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d150:	e71c      	b.n	800cf8c <_vfiprintf_r+0x48>
 800d152:	ab03      	add	r3, sp, #12
 800d154:	462a      	mov	r2, r5
 800d156:	a904      	add	r1, sp, #16
 800d158:	4630      	mov	r0, r6
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	4b04      	ldr	r3, [pc, #16]	; (800d170 <_vfiprintf_r+0x22c>)
 800d15e:	f7fe fb1b 	bl	800b798 <_printf_i>
 800d162:	e7e4      	b.n	800d12e <_vfiprintf_r+0x1ea>
 800d164:	0800fba5 	.word	0x0800fba5
 800d168:	0800fbaf 	.word	0x0800fbaf
 800d16c:	0800b0f9 	.word	0x0800b0f9
 800d170:	0800cf1f 	.word	0x0800cf1f
 800d174:	0800fbab 	.word	0x0800fbab

0800d178 <__sflush_r>:
 800d178:	898a      	ldrh	r2, [r1, #12]
 800d17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17e:	4605      	mov	r5, r0
 800d180:	0710      	lsls	r0, r2, #28
 800d182:	460c      	mov	r4, r1
 800d184:	d458      	bmi.n	800d238 <__sflush_r+0xc0>
 800d186:	684b      	ldr	r3, [r1, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dc05      	bgt.n	800d198 <__sflush_r+0x20>
 800d18c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dc02      	bgt.n	800d198 <__sflush_r+0x20>
 800d192:	2000      	movs	r0, #0
 800d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d19a:	2e00      	cmp	r6, #0
 800d19c:	d0f9      	beq.n	800d192 <__sflush_r+0x1a>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1a4:	682f      	ldr	r7, [r5, #0]
 800d1a6:	6a21      	ldr	r1, [r4, #32]
 800d1a8:	602b      	str	r3, [r5, #0]
 800d1aa:	d032      	beq.n	800d212 <__sflush_r+0x9a>
 800d1ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1ae:	89a3      	ldrh	r3, [r4, #12]
 800d1b0:	075a      	lsls	r2, r3, #29
 800d1b2:	d505      	bpl.n	800d1c0 <__sflush_r+0x48>
 800d1b4:	6863      	ldr	r3, [r4, #4]
 800d1b6:	1ac0      	subs	r0, r0, r3
 800d1b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1ba:	b10b      	cbz	r3, 800d1c0 <__sflush_r+0x48>
 800d1bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1be:	1ac0      	subs	r0, r0, r3
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	6a21      	ldr	r1, [r4, #32]
 800d1ca:	47b0      	blx	r6
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	89a3      	ldrh	r3, [r4, #12]
 800d1d0:	d106      	bne.n	800d1e0 <__sflush_r+0x68>
 800d1d2:	6829      	ldr	r1, [r5, #0]
 800d1d4:	291d      	cmp	r1, #29
 800d1d6:	d82b      	bhi.n	800d230 <__sflush_r+0xb8>
 800d1d8:	4a28      	ldr	r2, [pc, #160]	; (800d27c <__sflush_r+0x104>)
 800d1da:	410a      	asrs	r2, r1
 800d1dc:	07d6      	lsls	r6, r2, #31
 800d1de:	d427      	bmi.n	800d230 <__sflush_r+0xb8>
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	04d9      	lsls	r1, r3, #19
 800d1e4:	6062      	str	r2, [r4, #4]
 800d1e6:	6922      	ldr	r2, [r4, #16]
 800d1e8:	6022      	str	r2, [r4, #0]
 800d1ea:	d504      	bpl.n	800d1f6 <__sflush_r+0x7e>
 800d1ec:	1c42      	adds	r2, r0, #1
 800d1ee:	d101      	bne.n	800d1f4 <__sflush_r+0x7c>
 800d1f0:	682b      	ldr	r3, [r5, #0]
 800d1f2:	b903      	cbnz	r3, 800d1f6 <__sflush_r+0x7e>
 800d1f4:	6560      	str	r0, [r4, #84]	; 0x54
 800d1f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1f8:	602f      	str	r7, [r5, #0]
 800d1fa:	2900      	cmp	r1, #0
 800d1fc:	d0c9      	beq.n	800d192 <__sflush_r+0x1a>
 800d1fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d202:	4299      	cmp	r1, r3
 800d204:	d002      	beq.n	800d20c <__sflush_r+0x94>
 800d206:	4628      	mov	r0, r5
 800d208:	f7ff fcce 	bl	800cba8 <_free_r>
 800d20c:	2000      	movs	r0, #0
 800d20e:	6360      	str	r0, [r4, #52]	; 0x34
 800d210:	e7c0      	b.n	800d194 <__sflush_r+0x1c>
 800d212:	2301      	movs	r3, #1
 800d214:	4628      	mov	r0, r5
 800d216:	47b0      	blx	r6
 800d218:	1c41      	adds	r1, r0, #1
 800d21a:	d1c8      	bne.n	800d1ae <__sflush_r+0x36>
 800d21c:	682b      	ldr	r3, [r5, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0c5      	beq.n	800d1ae <__sflush_r+0x36>
 800d222:	2b1d      	cmp	r3, #29
 800d224:	d001      	beq.n	800d22a <__sflush_r+0xb2>
 800d226:	2b16      	cmp	r3, #22
 800d228:	d101      	bne.n	800d22e <__sflush_r+0xb6>
 800d22a:	602f      	str	r7, [r5, #0]
 800d22c:	e7b1      	b.n	800d192 <__sflush_r+0x1a>
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d234:	81a3      	strh	r3, [r4, #12]
 800d236:	e7ad      	b.n	800d194 <__sflush_r+0x1c>
 800d238:	690f      	ldr	r7, [r1, #16]
 800d23a:	2f00      	cmp	r7, #0
 800d23c:	d0a9      	beq.n	800d192 <__sflush_r+0x1a>
 800d23e:	0793      	lsls	r3, r2, #30
 800d240:	680e      	ldr	r6, [r1, #0]
 800d242:	600f      	str	r7, [r1, #0]
 800d244:	bf0c      	ite	eq
 800d246:	694b      	ldreq	r3, [r1, #20]
 800d248:	2300      	movne	r3, #0
 800d24a:	eba6 0807 	sub.w	r8, r6, r7
 800d24e:	608b      	str	r3, [r1, #8]
 800d250:	f1b8 0f00 	cmp.w	r8, #0
 800d254:	dd9d      	ble.n	800d192 <__sflush_r+0x1a>
 800d256:	4643      	mov	r3, r8
 800d258:	463a      	mov	r2, r7
 800d25a:	6a21      	ldr	r1, [r4, #32]
 800d25c:	4628      	mov	r0, r5
 800d25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d260:	47b0      	blx	r6
 800d262:	2800      	cmp	r0, #0
 800d264:	dc06      	bgt.n	800d274 <__sflush_r+0xfc>
 800d266:	89a3      	ldrh	r3, [r4, #12]
 800d268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d270:	81a3      	strh	r3, [r4, #12]
 800d272:	e78f      	b.n	800d194 <__sflush_r+0x1c>
 800d274:	4407      	add	r7, r0
 800d276:	eba8 0800 	sub.w	r8, r8, r0
 800d27a:	e7e9      	b.n	800d250 <__sflush_r+0xd8>
 800d27c:	dfbffffe 	.word	0xdfbffffe

0800d280 <_fflush_r>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	690b      	ldr	r3, [r1, #16]
 800d284:	4605      	mov	r5, r0
 800d286:	460c      	mov	r4, r1
 800d288:	b913      	cbnz	r3, 800d290 <_fflush_r+0x10>
 800d28a:	2500      	movs	r5, #0
 800d28c:	4628      	mov	r0, r5
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	b118      	cbz	r0, 800d29a <_fflush_r+0x1a>
 800d292:	6a03      	ldr	r3, [r0, #32]
 800d294:	b90b      	cbnz	r3, 800d29a <_fflush_r+0x1a>
 800d296:	f7fe fcd7 	bl	800bc48 <__sinit>
 800d29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d0f3      	beq.n	800d28a <_fflush_r+0xa>
 800d2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2a4:	07d0      	lsls	r0, r2, #31
 800d2a6:	d404      	bmi.n	800d2b2 <_fflush_r+0x32>
 800d2a8:	0599      	lsls	r1, r3, #22
 800d2aa:	d402      	bmi.n	800d2b2 <_fflush_r+0x32>
 800d2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ae:	f7fe fdbe 	bl	800be2e <__retarget_lock_acquire_recursive>
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	f7ff ff5f 	bl	800d178 <__sflush_r>
 800d2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2bc:	4605      	mov	r5, r0
 800d2be:	07da      	lsls	r2, r3, #31
 800d2c0:	d4e4      	bmi.n	800d28c <_fflush_r+0xc>
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	059b      	lsls	r3, r3, #22
 800d2c6:	d4e1      	bmi.n	800d28c <_fflush_r+0xc>
 800d2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ca:	f7fe fdb1 	bl	800be30 <__retarget_lock_release_recursive>
 800d2ce:	e7dd      	b.n	800d28c <_fflush_r+0xc>

0800d2d0 <_Balloc>:
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	69c6      	ldr	r6, [r0, #28]
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	460d      	mov	r5, r1
 800d2d8:	b976      	cbnz	r6, 800d2f8 <_Balloc+0x28>
 800d2da:	2010      	movs	r0, #16
 800d2dc:	f7fe f942 	bl	800b564 <malloc>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	61e0      	str	r0, [r4, #28]
 800d2e4:	b920      	cbnz	r0, 800d2f0 <_Balloc+0x20>
 800d2e6:	4b18      	ldr	r3, [pc, #96]	; (800d348 <_Balloc+0x78>)
 800d2e8:	216b      	movs	r1, #107	; 0x6b
 800d2ea:	4818      	ldr	r0, [pc, #96]	; (800d34c <_Balloc+0x7c>)
 800d2ec:	f7fe fdbc 	bl	800be68 <__assert_func>
 800d2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2f4:	6006      	str	r6, [r0, #0]
 800d2f6:	60c6      	str	r6, [r0, #12]
 800d2f8:	69e6      	ldr	r6, [r4, #28]
 800d2fa:	68f3      	ldr	r3, [r6, #12]
 800d2fc:	b183      	cbz	r3, 800d320 <_Balloc+0x50>
 800d2fe:	69e3      	ldr	r3, [r4, #28]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d306:	b9b8      	cbnz	r0, 800d338 <_Balloc+0x68>
 800d308:	2101      	movs	r1, #1
 800d30a:	4620      	mov	r0, r4
 800d30c:	fa01 f605 	lsl.w	r6, r1, r5
 800d310:	1d72      	adds	r2, r6, #5
 800d312:	0092      	lsls	r2, r2, #2
 800d314:	f000 fd99 	bl	800de4a <_calloc_r>
 800d318:	b160      	cbz	r0, 800d334 <_Balloc+0x64>
 800d31a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d31e:	e00e      	b.n	800d33e <_Balloc+0x6e>
 800d320:	2221      	movs	r2, #33	; 0x21
 800d322:	2104      	movs	r1, #4
 800d324:	4620      	mov	r0, r4
 800d326:	f000 fd90 	bl	800de4a <_calloc_r>
 800d32a:	69e3      	ldr	r3, [r4, #28]
 800d32c:	60f0      	str	r0, [r6, #12]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1e4      	bne.n	800d2fe <_Balloc+0x2e>
 800d334:	2000      	movs	r0, #0
 800d336:	bd70      	pop	{r4, r5, r6, pc}
 800d338:	6802      	ldr	r2, [r0, #0]
 800d33a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d33e:	2300      	movs	r3, #0
 800d340:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d344:	e7f7      	b.n	800d336 <_Balloc+0x66>
 800d346:	bf00      	nop
 800d348:	0800fa84 	.word	0x0800fa84
 800d34c:	0800fbb6 	.word	0x0800fbb6

0800d350 <_Bfree>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	69c6      	ldr	r6, [r0, #28]
 800d354:	4605      	mov	r5, r0
 800d356:	460c      	mov	r4, r1
 800d358:	b976      	cbnz	r6, 800d378 <_Bfree+0x28>
 800d35a:	2010      	movs	r0, #16
 800d35c:	f7fe f902 	bl	800b564 <malloc>
 800d360:	4602      	mov	r2, r0
 800d362:	61e8      	str	r0, [r5, #28]
 800d364:	b920      	cbnz	r0, 800d370 <_Bfree+0x20>
 800d366:	4b09      	ldr	r3, [pc, #36]	; (800d38c <_Bfree+0x3c>)
 800d368:	218f      	movs	r1, #143	; 0x8f
 800d36a:	4809      	ldr	r0, [pc, #36]	; (800d390 <_Bfree+0x40>)
 800d36c:	f7fe fd7c 	bl	800be68 <__assert_func>
 800d370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d374:	6006      	str	r6, [r0, #0]
 800d376:	60c6      	str	r6, [r0, #12]
 800d378:	b13c      	cbz	r4, 800d38a <_Bfree+0x3a>
 800d37a:	69eb      	ldr	r3, [r5, #28]
 800d37c:	6862      	ldr	r2, [r4, #4]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d384:	6021      	str	r1, [r4, #0]
 800d386:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	0800fa84 	.word	0x0800fa84
 800d390:	0800fbb6 	.word	0x0800fbb6

0800d394 <__multadd>:
 800d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d398:	f101 0c14 	add.w	ip, r1, #20
 800d39c:	4607      	mov	r7, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	461e      	mov	r6, r3
 800d3a2:	690d      	ldr	r5, [r1, #16]
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d3aa:	3001      	adds	r0, #1
 800d3ac:	b299      	uxth	r1, r3
 800d3ae:	4285      	cmp	r5, r0
 800d3b0:	fb02 6101 	mla	r1, r2, r1, r6
 800d3b4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3b8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d3bc:	b289      	uxth	r1, r1
 800d3be:	fb02 3306 	mla	r3, r2, r6, r3
 800d3c2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3ca:	f84c 1b04 	str.w	r1, [ip], #4
 800d3ce:	dcea      	bgt.n	800d3a6 <__multadd+0x12>
 800d3d0:	b30e      	cbz	r6, 800d416 <__multadd+0x82>
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	42ab      	cmp	r3, r5
 800d3d6:	dc19      	bgt.n	800d40c <__multadd+0x78>
 800d3d8:	6861      	ldr	r1, [r4, #4]
 800d3da:	4638      	mov	r0, r7
 800d3dc:	3101      	adds	r1, #1
 800d3de:	f7ff ff77 	bl	800d2d0 <_Balloc>
 800d3e2:	4680      	mov	r8, r0
 800d3e4:	b928      	cbnz	r0, 800d3f2 <__multadd+0x5e>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	4b0c      	ldr	r3, [pc, #48]	; (800d41c <__multadd+0x88>)
 800d3ea:	21ba      	movs	r1, #186	; 0xba
 800d3ec:	480c      	ldr	r0, [pc, #48]	; (800d420 <__multadd+0x8c>)
 800d3ee:	f7fe fd3b 	bl	800be68 <__assert_func>
 800d3f2:	6922      	ldr	r2, [r4, #16]
 800d3f4:	f104 010c 	add.w	r1, r4, #12
 800d3f8:	300c      	adds	r0, #12
 800d3fa:	3202      	adds	r2, #2
 800d3fc:	0092      	lsls	r2, r2, #2
 800d3fe:	f7fe fd26 	bl	800be4e <memcpy>
 800d402:	4621      	mov	r1, r4
 800d404:	4644      	mov	r4, r8
 800d406:	4638      	mov	r0, r7
 800d408:	f7ff ffa2 	bl	800d350 <_Bfree>
 800d40c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d410:	3501      	adds	r5, #1
 800d412:	615e      	str	r6, [r3, #20]
 800d414:	6125      	str	r5, [r4, #16]
 800d416:	4620      	mov	r0, r4
 800d418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d41c:	0800fb94 	.word	0x0800fb94
 800d420:	0800fbb6 	.word	0x0800fbb6

0800d424 <__hi0bits>:
 800d424:	0c03      	lsrs	r3, r0, #16
 800d426:	041b      	lsls	r3, r3, #16
 800d428:	b9d3      	cbnz	r3, 800d460 <__hi0bits+0x3c>
 800d42a:	0400      	lsls	r0, r0, #16
 800d42c:	2310      	movs	r3, #16
 800d42e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d432:	bf04      	itt	eq
 800d434:	0200      	lsleq	r0, r0, #8
 800d436:	3308      	addeq	r3, #8
 800d438:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d43c:	bf04      	itt	eq
 800d43e:	0100      	lsleq	r0, r0, #4
 800d440:	3304      	addeq	r3, #4
 800d442:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d446:	bf04      	itt	eq
 800d448:	0080      	lsleq	r0, r0, #2
 800d44a:	3302      	addeq	r3, #2
 800d44c:	2800      	cmp	r0, #0
 800d44e:	db05      	blt.n	800d45c <__hi0bits+0x38>
 800d450:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d454:	f103 0301 	add.w	r3, r3, #1
 800d458:	bf08      	it	eq
 800d45a:	2320      	moveq	r3, #32
 800d45c:	4618      	mov	r0, r3
 800d45e:	4770      	bx	lr
 800d460:	2300      	movs	r3, #0
 800d462:	e7e4      	b.n	800d42e <__hi0bits+0xa>

0800d464 <__lo0bits>:
 800d464:	6803      	ldr	r3, [r0, #0]
 800d466:	f013 0207 	ands.w	r2, r3, #7
 800d46a:	d00c      	beq.n	800d486 <__lo0bits+0x22>
 800d46c:	07d9      	lsls	r1, r3, #31
 800d46e:	d422      	bmi.n	800d4b6 <__lo0bits+0x52>
 800d470:	079a      	lsls	r2, r3, #30
 800d472:	bf47      	ittee	mi
 800d474:	085b      	lsrmi	r3, r3, #1
 800d476:	2201      	movmi	r2, #1
 800d478:	089b      	lsrpl	r3, r3, #2
 800d47a:	2202      	movpl	r2, #2
 800d47c:	bf4c      	ite	mi
 800d47e:	6003      	strmi	r3, [r0, #0]
 800d480:	6003      	strpl	r3, [r0, #0]
 800d482:	4610      	mov	r0, r2
 800d484:	4770      	bx	lr
 800d486:	b299      	uxth	r1, r3
 800d488:	b909      	cbnz	r1, 800d48e <__lo0bits+0x2a>
 800d48a:	0c1b      	lsrs	r3, r3, #16
 800d48c:	2210      	movs	r2, #16
 800d48e:	b2d9      	uxtb	r1, r3
 800d490:	b909      	cbnz	r1, 800d496 <__lo0bits+0x32>
 800d492:	3208      	adds	r2, #8
 800d494:	0a1b      	lsrs	r3, r3, #8
 800d496:	0719      	lsls	r1, r3, #28
 800d498:	bf04      	itt	eq
 800d49a:	091b      	lsreq	r3, r3, #4
 800d49c:	3204      	addeq	r2, #4
 800d49e:	0799      	lsls	r1, r3, #30
 800d4a0:	bf04      	itt	eq
 800d4a2:	089b      	lsreq	r3, r3, #2
 800d4a4:	3202      	addeq	r2, #2
 800d4a6:	07d9      	lsls	r1, r3, #31
 800d4a8:	d403      	bmi.n	800d4b2 <__lo0bits+0x4e>
 800d4aa:	085b      	lsrs	r3, r3, #1
 800d4ac:	f102 0201 	add.w	r2, r2, #1
 800d4b0:	d003      	beq.n	800d4ba <__lo0bits+0x56>
 800d4b2:	6003      	str	r3, [r0, #0]
 800d4b4:	e7e5      	b.n	800d482 <__lo0bits+0x1e>
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	e7e3      	b.n	800d482 <__lo0bits+0x1e>
 800d4ba:	2220      	movs	r2, #32
 800d4bc:	e7e1      	b.n	800d482 <__lo0bits+0x1e>
	...

0800d4c0 <__i2b>:
 800d4c0:	b510      	push	{r4, lr}
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	f7ff ff03 	bl	800d2d0 <_Balloc>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	b928      	cbnz	r0, 800d4da <__i2b+0x1a>
 800d4ce:	4b05      	ldr	r3, [pc, #20]	; (800d4e4 <__i2b+0x24>)
 800d4d0:	f240 1145 	movw	r1, #325	; 0x145
 800d4d4:	4804      	ldr	r0, [pc, #16]	; (800d4e8 <__i2b+0x28>)
 800d4d6:	f7fe fcc7 	bl	800be68 <__assert_func>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	6144      	str	r4, [r0, #20]
 800d4de:	6103      	str	r3, [r0, #16]
 800d4e0:	bd10      	pop	{r4, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0800fb94 	.word	0x0800fb94
 800d4e8:	0800fbb6 	.word	0x0800fbb6

0800d4ec <__multiply>:
 800d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	4691      	mov	r9, r2
 800d4f2:	690a      	ldr	r2, [r1, #16]
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	bfbe      	ittt	lt
 800d500:	460b      	movlt	r3, r1
 800d502:	464c      	movlt	r4, r9
 800d504:	4699      	movlt	r9, r3
 800d506:	6927      	ldr	r7, [r4, #16]
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d50e:	6861      	ldr	r1, [r4, #4]
 800d510:	eb07 060a 	add.w	r6, r7, sl
 800d514:	42b3      	cmp	r3, r6
 800d516:	bfb8      	it	lt
 800d518:	3101      	addlt	r1, #1
 800d51a:	f7ff fed9 	bl	800d2d0 <_Balloc>
 800d51e:	b930      	cbnz	r0, 800d52e <__multiply+0x42>
 800d520:	4602      	mov	r2, r0
 800d522:	4b45      	ldr	r3, [pc, #276]	; (800d638 <__multiply+0x14c>)
 800d524:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d528:	4844      	ldr	r0, [pc, #272]	; (800d63c <__multiply+0x150>)
 800d52a:	f7fe fc9d 	bl	800be68 <__assert_func>
 800d52e:	f100 0514 	add.w	r5, r0, #20
 800d532:	2200      	movs	r2, #0
 800d534:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d538:	462b      	mov	r3, r5
 800d53a:	4543      	cmp	r3, r8
 800d53c:	d321      	bcc.n	800d582 <__multiply+0x96>
 800d53e:	f104 0314 	add.w	r3, r4, #20
 800d542:	f104 0115 	add.w	r1, r4, #21
 800d546:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d54a:	f109 0314 	add.w	r3, r9, #20
 800d54e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d552:	9202      	str	r2, [sp, #8]
 800d554:	1b3a      	subs	r2, r7, r4
 800d556:	3a15      	subs	r2, #21
 800d558:	f022 0203 	bic.w	r2, r2, #3
 800d55c:	3204      	adds	r2, #4
 800d55e:	428f      	cmp	r7, r1
 800d560:	bf38      	it	cc
 800d562:	2204      	movcc	r2, #4
 800d564:	9201      	str	r2, [sp, #4]
 800d566:	9a02      	ldr	r2, [sp, #8]
 800d568:	9303      	str	r3, [sp, #12]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d80c      	bhi.n	800d588 <__multiply+0x9c>
 800d56e:	2e00      	cmp	r6, #0
 800d570:	dd03      	ble.n	800d57a <__multiply+0x8e>
 800d572:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d576:	2b00      	cmp	r3, #0
 800d578:	d05b      	beq.n	800d632 <__multiply+0x146>
 800d57a:	6106      	str	r6, [r0, #16]
 800d57c:	b005      	add	sp, #20
 800d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d582:	f843 2b04 	str.w	r2, [r3], #4
 800d586:	e7d8      	b.n	800d53a <__multiply+0x4e>
 800d588:	f8b3 a000 	ldrh.w	sl, [r3]
 800d58c:	f1ba 0f00 	cmp.w	sl, #0
 800d590:	d024      	beq.n	800d5dc <__multiply+0xf0>
 800d592:	f104 0e14 	add.w	lr, r4, #20
 800d596:	46a9      	mov	r9, r5
 800d598:	f04f 0c00 	mov.w	ip, #0
 800d59c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d5a0:	f8d9 1000 	ldr.w	r1, [r9]
 800d5a4:	fa1f fb82 	uxth.w	fp, r2
 800d5a8:	4577      	cmp	r7, lr
 800d5aa:	b289      	uxth	r1, r1
 800d5ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d5b4:	f8d9 2000 	ldr.w	r2, [r9]
 800d5b8:	4461      	add	r1, ip
 800d5ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5be:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5c6:	b289      	uxth	r1, r1
 800d5c8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5d0:	f849 1b04 	str.w	r1, [r9], #4
 800d5d4:	d8e2      	bhi.n	800d59c <__multiply+0xb0>
 800d5d6:	9a01      	ldr	r2, [sp, #4]
 800d5d8:	f845 c002 	str.w	ip, [r5, r2]
 800d5dc:	9a03      	ldr	r2, [sp, #12]
 800d5de:	3304      	adds	r3, #4
 800d5e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5e4:	f1b9 0f00 	cmp.w	r9, #0
 800d5e8:	d021      	beq.n	800d62e <__multiply+0x142>
 800d5ea:	6829      	ldr	r1, [r5, #0]
 800d5ec:	f104 0c14 	add.w	ip, r4, #20
 800d5f0:	46ae      	mov	lr, r5
 800d5f2:	f04f 0a00 	mov.w	sl, #0
 800d5f6:	f8bc b000 	ldrh.w	fp, [ip]
 800d5fa:	b289      	uxth	r1, r1
 800d5fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d600:	fb09 220b 	mla	r2, r9, fp, r2
 800d604:	4452      	add	r2, sl
 800d606:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d60a:	f84e 1b04 	str.w	r1, [lr], #4
 800d60e:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d612:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d616:	f8be 1000 	ldrh.w	r1, [lr]
 800d61a:	4567      	cmp	r7, ip
 800d61c:	fb09 110a 	mla	r1, r9, sl, r1
 800d620:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d628:	d8e5      	bhi.n	800d5f6 <__multiply+0x10a>
 800d62a:	9a01      	ldr	r2, [sp, #4]
 800d62c:	50a9      	str	r1, [r5, r2]
 800d62e:	3504      	adds	r5, #4
 800d630:	e799      	b.n	800d566 <__multiply+0x7a>
 800d632:	3e01      	subs	r6, #1
 800d634:	e79b      	b.n	800d56e <__multiply+0x82>
 800d636:	bf00      	nop
 800d638:	0800fb94 	.word	0x0800fb94
 800d63c:	0800fbb6 	.word	0x0800fbb6

0800d640 <__pow5mult>:
 800d640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d644:	4615      	mov	r5, r2
 800d646:	f012 0203 	ands.w	r2, r2, #3
 800d64a:	4606      	mov	r6, r0
 800d64c:	460f      	mov	r7, r1
 800d64e:	d007      	beq.n	800d660 <__pow5mult+0x20>
 800d650:	3a01      	subs	r2, #1
 800d652:	4c25      	ldr	r4, [pc, #148]	; (800d6e8 <__pow5mult+0xa8>)
 800d654:	2300      	movs	r3, #0
 800d656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d65a:	f7ff fe9b 	bl	800d394 <__multadd>
 800d65e:	4607      	mov	r7, r0
 800d660:	10ad      	asrs	r5, r5, #2
 800d662:	d03d      	beq.n	800d6e0 <__pow5mult+0xa0>
 800d664:	69f4      	ldr	r4, [r6, #28]
 800d666:	b97c      	cbnz	r4, 800d688 <__pow5mult+0x48>
 800d668:	2010      	movs	r0, #16
 800d66a:	f7fd ff7b 	bl	800b564 <malloc>
 800d66e:	4602      	mov	r2, r0
 800d670:	61f0      	str	r0, [r6, #28]
 800d672:	b928      	cbnz	r0, 800d680 <__pow5mult+0x40>
 800d674:	4b1d      	ldr	r3, [pc, #116]	; (800d6ec <__pow5mult+0xac>)
 800d676:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d67a:	481d      	ldr	r0, [pc, #116]	; (800d6f0 <__pow5mult+0xb0>)
 800d67c:	f7fe fbf4 	bl	800be68 <__assert_func>
 800d680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d684:	6004      	str	r4, [r0, #0]
 800d686:	60c4      	str	r4, [r0, #12]
 800d688:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d68c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d690:	b94c      	cbnz	r4, 800d6a6 <__pow5mult+0x66>
 800d692:	f240 2171 	movw	r1, #625	; 0x271
 800d696:	4630      	mov	r0, r6
 800d698:	f7ff ff12 	bl	800d4c0 <__i2b>
 800d69c:	2300      	movs	r3, #0
 800d69e:	4604      	mov	r4, r0
 800d6a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6a4:	6003      	str	r3, [r0, #0]
 800d6a6:	f04f 0900 	mov.w	r9, #0
 800d6aa:	07eb      	lsls	r3, r5, #31
 800d6ac:	d50a      	bpl.n	800d6c4 <__pow5mult+0x84>
 800d6ae:	4639      	mov	r1, r7
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f7ff ff1a 	bl	800d4ec <__multiply>
 800d6b8:	4680      	mov	r8, r0
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	4630      	mov	r0, r6
 800d6be:	4647      	mov	r7, r8
 800d6c0:	f7ff fe46 	bl	800d350 <_Bfree>
 800d6c4:	106d      	asrs	r5, r5, #1
 800d6c6:	d00b      	beq.n	800d6e0 <__pow5mult+0xa0>
 800d6c8:	6820      	ldr	r0, [r4, #0]
 800d6ca:	b938      	cbnz	r0, 800d6dc <__pow5mult+0x9c>
 800d6cc:	4622      	mov	r2, r4
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f7ff ff0b 	bl	800d4ec <__multiply>
 800d6d6:	6020      	str	r0, [r4, #0]
 800d6d8:	f8c0 9000 	str.w	r9, [r0]
 800d6dc:	4604      	mov	r4, r0
 800d6de:	e7e4      	b.n	800d6aa <__pow5mult+0x6a>
 800d6e0:	4638      	mov	r0, r7
 800d6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6e6:	bf00      	nop
 800d6e8:	0800fd00 	.word	0x0800fd00
 800d6ec:	0800fa84 	.word	0x0800fa84
 800d6f0:	0800fbb6 	.word	0x0800fbb6

0800d6f4 <__lshift>:
 800d6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	4691      	mov	r9, r2
 800d6fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d702:	6923      	ldr	r3, [r4, #16]
 800d704:	6849      	ldr	r1, [r1, #4]
 800d706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d70a:	68a3      	ldr	r3, [r4, #8]
 800d70c:	f108 0601 	add.w	r6, r8, #1
 800d710:	42b3      	cmp	r3, r6
 800d712:	db0b      	blt.n	800d72c <__lshift+0x38>
 800d714:	4638      	mov	r0, r7
 800d716:	f7ff fddb 	bl	800d2d0 <_Balloc>
 800d71a:	4605      	mov	r5, r0
 800d71c:	b948      	cbnz	r0, 800d732 <__lshift+0x3e>
 800d71e:	4602      	mov	r2, r0
 800d720:	4b28      	ldr	r3, [pc, #160]	; (800d7c4 <__lshift+0xd0>)
 800d722:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d726:	4828      	ldr	r0, [pc, #160]	; (800d7c8 <__lshift+0xd4>)
 800d728:	f7fe fb9e 	bl	800be68 <__assert_func>
 800d72c:	3101      	adds	r1, #1
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	e7ee      	b.n	800d710 <__lshift+0x1c>
 800d732:	2300      	movs	r3, #0
 800d734:	f100 0114 	add.w	r1, r0, #20
 800d738:	f100 0210 	add.w	r2, r0, #16
 800d73c:	4618      	mov	r0, r3
 800d73e:	4553      	cmp	r3, sl
 800d740:	db33      	blt.n	800d7aa <__lshift+0xb6>
 800d742:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d746:	f104 0314 	add.w	r3, r4, #20
 800d74a:	6920      	ldr	r0, [r4, #16]
 800d74c:	f019 091f 	ands.w	r9, r9, #31
 800d750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d758:	d02b      	beq.n	800d7b2 <__lshift+0xbe>
 800d75a:	f1c9 0e20 	rsb	lr, r9, #32
 800d75e:	468a      	mov	sl, r1
 800d760:	2200      	movs	r2, #0
 800d762:	6818      	ldr	r0, [r3, #0]
 800d764:	fa00 f009 	lsl.w	r0, r0, r9
 800d768:	4310      	orrs	r0, r2
 800d76a:	f84a 0b04 	str.w	r0, [sl], #4
 800d76e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d772:	459c      	cmp	ip, r3
 800d774:	fa22 f20e 	lsr.w	r2, r2, lr
 800d778:	d8f3      	bhi.n	800d762 <__lshift+0x6e>
 800d77a:	ebac 0304 	sub.w	r3, ip, r4
 800d77e:	f104 0015 	add.w	r0, r4, #21
 800d782:	3b15      	subs	r3, #21
 800d784:	f023 0303 	bic.w	r3, r3, #3
 800d788:	3304      	adds	r3, #4
 800d78a:	4584      	cmp	ip, r0
 800d78c:	bf38      	it	cc
 800d78e:	2304      	movcc	r3, #4
 800d790:	50ca      	str	r2, [r1, r3]
 800d792:	b10a      	cbz	r2, 800d798 <__lshift+0xa4>
 800d794:	f108 0602 	add.w	r6, r8, #2
 800d798:	3e01      	subs	r6, #1
 800d79a:	4638      	mov	r0, r7
 800d79c:	4621      	mov	r1, r4
 800d79e:	612e      	str	r6, [r5, #16]
 800d7a0:	f7ff fdd6 	bl	800d350 <_Bfree>
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7b0:	e7c5      	b.n	800d73e <__lshift+0x4a>
 800d7b2:	3904      	subs	r1, #4
 800d7b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b8:	459c      	cmp	ip, r3
 800d7ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7be:	d8f9      	bhi.n	800d7b4 <__lshift+0xc0>
 800d7c0:	e7ea      	b.n	800d798 <__lshift+0xa4>
 800d7c2:	bf00      	nop
 800d7c4:	0800fb94 	.word	0x0800fb94
 800d7c8:	0800fbb6 	.word	0x0800fbb6

0800d7cc <__mcmp>:
 800d7cc:	6902      	ldr	r2, [r0, #16]
 800d7ce:	b530      	push	{r4, r5, lr}
 800d7d0:	690c      	ldr	r4, [r1, #16]
 800d7d2:	1b12      	subs	r2, r2, r4
 800d7d4:	d10e      	bne.n	800d7f4 <__mcmp+0x28>
 800d7d6:	f100 0314 	add.w	r3, r0, #20
 800d7da:	3114      	adds	r1, #20
 800d7dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d7ec:	42a5      	cmp	r5, r4
 800d7ee:	d003      	beq.n	800d7f8 <__mcmp+0x2c>
 800d7f0:	d305      	bcc.n	800d7fe <__mcmp+0x32>
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	4610      	mov	r0, r2
 800d7f6:	bd30      	pop	{r4, r5, pc}
 800d7f8:	4283      	cmp	r3, r0
 800d7fa:	d3f3      	bcc.n	800d7e4 <__mcmp+0x18>
 800d7fc:	e7fa      	b.n	800d7f4 <__mcmp+0x28>
 800d7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d802:	e7f7      	b.n	800d7f4 <__mcmp+0x28>

0800d804 <__mdiff>:
 800d804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	460c      	mov	r4, r1
 800d80a:	4606      	mov	r6, r0
 800d80c:	4611      	mov	r1, r2
 800d80e:	4692      	mov	sl, r2
 800d810:	4620      	mov	r0, r4
 800d812:	f7ff ffdb 	bl	800d7cc <__mcmp>
 800d816:	1e05      	subs	r5, r0, #0
 800d818:	d110      	bne.n	800d83c <__mdiff+0x38>
 800d81a:	4629      	mov	r1, r5
 800d81c:	4630      	mov	r0, r6
 800d81e:	f7ff fd57 	bl	800d2d0 <_Balloc>
 800d822:	b930      	cbnz	r0, 800d832 <__mdiff+0x2e>
 800d824:	4b3d      	ldr	r3, [pc, #244]	; (800d91c <__mdiff+0x118>)
 800d826:	4602      	mov	r2, r0
 800d828:	f240 2137 	movw	r1, #567	; 0x237
 800d82c:	483c      	ldr	r0, [pc, #240]	; (800d920 <__mdiff+0x11c>)
 800d82e:	f7fe fb1b 	bl	800be68 <__assert_func>
 800d832:	2301      	movs	r3, #1
 800d834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d83c:	bfa4      	itt	ge
 800d83e:	4653      	movge	r3, sl
 800d840:	46a2      	movge	sl, r4
 800d842:	4630      	mov	r0, r6
 800d844:	bfa8      	it	ge
 800d846:	2500      	movge	r5, #0
 800d848:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d84c:	bfac      	ite	ge
 800d84e:	461c      	movge	r4, r3
 800d850:	2501      	movlt	r5, #1
 800d852:	f7ff fd3d 	bl	800d2d0 <_Balloc>
 800d856:	b920      	cbnz	r0, 800d862 <__mdiff+0x5e>
 800d858:	4b30      	ldr	r3, [pc, #192]	; (800d91c <__mdiff+0x118>)
 800d85a:	4602      	mov	r2, r0
 800d85c:	f240 2145 	movw	r1, #581	; 0x245
 800d860:	e7e4      	b.n	800d82c <__mdiff+0x28>
 800d862:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d866:	f104 0914 	add.w	r9, r4, #20
 800d86a:	6926      	ldr	r6, [r4, #16]
 800d86c:	f100 0814 	add.w	r8, r0, #20
 800d870:	60c5      	str	r5, [r0, #12]
 800d872:	f10a 0514 	add.w	r5, sl, #20
 800d876:	f10a 0210 	add.w	r2, sl, #16
 800d87a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d87e:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d882:	46c2      	mov	sl, r8
 800d884:	f04f 0c00 	mov.w	ip, #0
 800d888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d88c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d890:	fa1f f18b 	uxth.w	r1, fp
 800d894:	454e      	cmp	r6, r9
 800d896:	4461      	add	r1, ip
 800d898:	fa1f fc83 	uxth.w	ip, r3
 800d89c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d8a0:	eba1 010c 	sub.w	r1, r1, ip
 800d8a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d8ac:	b289      	uxth	r1, r1
 800d8ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d8b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d8b6:	f84a 1b04 	str.w	r1, [sl], #4
 800d8ba:	d8e5      	bhi.n	800d888 <__mdiff+0x84>
 800d8bc:	1b33      	subs	r3, r6, r4
 800d8be:	3415      	adds	r4, #21
 800d8c0:	3b15      	subs	r3, #21
 800d8c2:	f023 0303 	bic.w	r3, r3, #3
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	42a6      	cmp	r6, r4
 800d8ca:	bf38      	it	cc
 800d8cc:	2304      	movcc	r3, #4
 800d8ce:	441d      	add	r5, r3
 800d8d0:	4443      	add	r3, r8
 800d8d2:	462c      	mov	r4, r5
 800d8d4:	461e      	mov	r6, r3
 800d8d6:	4574      	cmp	r4, lr
 800d8d8:	d30e      	bcc.n	800d8f8 <__mdiff+0xf4>
 800d8da:	f10e 0203 	add.w	r2, lr, #3
 800d8de:	1b52      	subs	r2, r2, r5
 800d8e0:	3d03      	subs	r5, #3
 800d8e2:	f022 0203 	bic.w	r2, r2, #3
 800d8e6:	45ae      	cmp	lr, r5
 800d8e8:	bf38      	it	cc
 800d8ea:	2200      	movcc	r2, #0
 800d8ec:	4413      	add	r3, r2
 800d8ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d8f2:	b18a      	cbz	r2, 800d918 <__mdiff+0x114>
 800d8f4:	6107      	str	r7, [r0, #16]
 800d8f6:	e79f      	b.n	800d838 <__mdiff+0x34>
 800d8f8:	f854 8b04 	ldr.w	r8, [r4], #4
 800d8fc:	fa1f f288 	uxth.w	r2, r8
 800d900:	4462      	add	r2, ip
 800d902:	1411      	asrs	r1, r2, #16
 800d904:	b292      	uxth	r2, r2
 800d906:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800d90a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d90e:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800d912:	f846 2b04 	str.w	r2, [r6], #4
 800d916:	e7de      	b.n	800d8d6 <__mdiff+0xd2>
 800d918:	3f01      	subs	r7, #1
 800d91a:	e7e8      	b.n	800d8ee <__mdiff+0xea>
 800d91c:	0800fb94 	.word	0x0800fb94
 800d920:	0800fbb6 	.word	0x0800fbb6

0800d924 <__d2b>:
 800d924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d928:	460f      	mov	r7, r1
 800d92a:	2101      	movs	r1, #1
 800d92c:	4616      	mov	r6, r2
 800d92e:	ec59 8b10 	vmov	r8, r9, d0
 800d932:	f7ff fccd 	bl	800d2d0 <_Balloc>
 800d936:	4604      	mov	r4, r0
 800d938:	b930      	cbnz	r0, 800d948 <__d2b+0x24>
 800d93a:	4602      	mov	r2, r0
 800d93c:	4b24      	ldr	r3, [pc, #144]	; (800d9d0 <__d2b+0xac>)
 800d93e:	f240 310f 	movw	r1, #783	; 0x30f
 800d942:	4824      	ldr	r0, [pc, #144]	; (800d9d4 <__d2b+0xb0>)
 800d944:	f7fe fa90 	bl	800be68 <__assert_func>
 800d948:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d94c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d950:	bb2d      	cbnz	r5, 800d99e <__d2b+0x7a>
 800d952:	9301      	str	r3, [sp, #4]
 800d954:	f1b8 0300 	subs.w	r3, r8, #0
 800d958:	d026      	beq.n	800d9a8 <__d2b+0x84>
 800d95a:	4668      	mov	r0, sp
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	f7ff fd81 	bl	800d464 <__lo0bits>
 800d962:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d966:	b1e8      	cbz	r0, 800d9a4 <__d2b+0x80>
 800d968:	f1c0 0320 	rsb	r3, r0, #32
 800d96c:	fa02 f303 	lsl.w	r3, r2, r3
 800d970:	40c2      	lsrs	r2, r0
 800d972:	430b      	orrs	r3, r1
 800d974:	9201      	str	r2, [sp, #4]
 800d976:	6163      	str	r3, [r4, #20]
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	61a3      	str	r3, [r4, #24]
 800d97e:	bf14      	ite	ne
 800d980:	2202      	movne	r2, #2
 800d982:	2201      	moveq	r2, #1
 800d984:	6122      	str	r2, [r4, #16]
 800d986:	b1bd      	cbz	r5, 800d9b8 <__d2b+0x94>
 800d988:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d98c:	4405      	add	r5, r0
 800d98e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d992:	603d      	str	r5, [r7, #0]
 800d994:	6030      	str	r0, [r6, #0]
 800d996:	4620      	mov	r0, r4
 800d998:	b003      	add	sp, #12
 800d99a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d99e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9a2:	e7d6      	b.n	800d952 <__d2b+0x2e>
 800d9a4:	6161      	str	r1, [r4, #20]
 800d9a6:	e7e7      	b.n	800d978 <__d2b+0x54>
 800d9a8:	a801      	add	r0, sp, #4
 800d9aa:	f7ff fd5b 	bl	800d464 <__lo0bits>
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	3020      	adds	r0, #32
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	6163      	str	r3, [r4, #20]
 800d9b6:	e7e5      	b.n	800d984 <__d2b+0x60>
 800d9b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9c0:	6038      	str	r0, [r7, #0]
 800d9c2:	6918      	ldr	r0, [r3, #16]
 800d9c4:	f7ff fd2e 	bl	800d424 <__hi0bits>
 800d9c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9cc:	e7e2      	b.n	800d994 <__d2b+0x70>
 800d9ce:	bf00      	nop
 800d9d0:	0800fb94 	.word	0x0800fb94
 800d9d4:	0800fbb6 	.word	0x0800fbb6

0800d9d8 <__sread>:
 800d9d8:	b510      	push	{r4, lr}
 800d9da:	460c      	mov	r4, r1
 800d9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e0:	f000 fa08 	bl	800ddf4 <_read_r>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	bfab      	itete	ge
 800d9e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9ea:	89a3      	ldrhlt	r3, [r4, #12]
 800d9ec:	181b      	addge	r3, r3, r0
 800d9ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9f2:	bfac      	ite	ge
 800d9f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9f6:	81a3      	strhlt	r3, [r4, #12]
 800d9f8:	bd10      	pop	{r4, pc}

0800d9fa <__swrite>:
 800d9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fe:	461f      	mov	r7, r3
 800da00:	898b      	ldrh	r3, [r1, #12]
 800da02:	4605      	mov	r5, r0
 800da04:	460c      	mov	r4, r1
 800da06:	05db      	lsls	r3, r3, #23
 800da08:	4616      	mov	r6, r2
 800da0a:	d505      	bpl.n	800da18 <__swrite+0x1e>
 800da0c:	2302      	movs	r3, #2
 800da0e:	2200      	movs	r2, #0
 800da10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da14:	f000 f9dc 	bl	800ddd0 <_lseek_r>
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	4632      	mov	r2, r6
 800da1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da20:	4628      	mov	r0, r5
 800da22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da26:	81a3      	strh	r3, [r4, #12]
 800da28:	463b      	mov	r3, r7
 800da2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da2e:	f000 b9f3 	b.w	800de18 <_write_r>

0800da32 <__sseek>:
 800da32:	b510      	push	{r4, lr}
 800da34:	460c      	mov	r4, r1
 800da36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da3a:	f000 f9c9 	bl	800ddd0 <_lseek_r>
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	89a3      	ldrh	r3, [r4, #12]
 800da42:	bf15      	itete	ne
 800da44:	6560      	strne	r0, [r4, #84]	; 0x54
 800da46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da4e:	81a3      	strheq	r3, [r4, #12]
 800da50:	bf18      	it	ne
 800da52:	81a3      	strhne	r3, [r4, #12]
 800da54:	bd10      	pop	{r4, pc}

0800da56 <__sclose>:
 800da56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da5a:	f000 b987 	b.w	800dd6c <_close_r>
	...

0800da60 <fiprintf>:
 800da60:	b40e      	push	{r1, r2, r3}
 800da62:	b503      	push	{r0, r1, lr}
 800da64:	ab03      	add	r3, sp, #12
 800da66:	4601      	mov	r1, r0
 800da68:	4805      	ldr	r0, [pc, #20]	; (800da80 <fiprintf+0x20>)
 800da6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da6e:	6800      	ldr	r0, [r0, #0]
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	f7ff fa67 	bl	800cf44 <_vfiprintf_r>
 800da76:	b002      	add	sp, #8
 800da78:	f85d eb04 	ldr.w	lr, [sp], #4
 800da7c:	b003      	add	sp, #12
 800da7e:	4770      	bx	lr
 800da80:	20000104 	.word	0x20000104

0800da84 <_realloc_r>:
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	4680      	mov	r8, r0
 800da8a:	4614      	mov	r4, r2
 800da8c:	460e      	mov	r6, r1
 800da8e:	b921      	cbnz	r1, 800da9a <_realloc_r+0x16>
 800da90:	4611      	mov	r1, r2
 800da92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	f7fd bd8d 	b.w	800b5b4 <_malloc_r>
 800da9a:	b92a      	cbnz	r2, 800daa8 <_realloc_r+0x24>
 800da9c:	4625      	mov	r5, r4
 800da9e:	f7ff f883 	bl	800cba8 <_free_r>
 800daa2:	4628      	mov	r0, r5
 800daa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa8:	f000 f9f7 	bl	800de9a <_malloc_usable_size_r>
 800daac:	4284      	cmp	r4, r0
 800daae:	4607      	mov	r7, r0
 800dab0:	d802      	bhi.n	800dab8 <_realloc_r+0x34>
 800dab2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dab6:	d812      	bhi.n	800dade <_realloc_r+0x5a>
 800dab8:	4621      	mov	r1, r4
 800daba:	4640      	mov	r0, r8
 800dabc:	f7fd fd7a 	bl	800b5b4 <_malloc_r>
 800dac0:	4605      	mov	r5, r0
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d0ed      	beq.n	800daa2 <_realloc_r+0x1e>
 800dac6:	42bc      	cmp	r4, r7
 800dac8:	4622      	mov	r2, r4
 800daca:	4631      	mov	r1, r6
 800dacc:	bf28      	it	cs
 800dace:	463a      	movcs	r2, r7
 800dad0:	f7fe f9bd 	bl	800be4e <memcpy>
 800dad4:	4631      	mov	r1, r6
 800dad6:	4640      	mov	r0, r8
 800dad8:	f7ff f866 	bl	800cba8 <_free_r>
 800dadc:	e7e1      	b.n	800daa2 <_realloc_r+0x1e>
 800dade:	4635      	mov	r5, r6
 800dae0:	e7df      	b.n	800daa2 <_realloc_r+0x1e>

0800dae2 <__swbuf_r>:
 800dae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae4:	460e      	mov	r6, r1
 800dae6:	4614      	mov	r4, r2
 800dae8:	4605      	mov	r5, r0
 800daea:	b118      	cbz	r0, 800daf4 <__swbuf_r+0x12>
 800daec:	6a03      	ldr	r3, [r0, #32]
 800daee:	b90b      	cbnz	r3, 800daf4 <__swbuf_r+0x12>
 800daf0:	f7fe f8aa 	bl	800bc48 <__sinit>
 800daf4:	69a3      	ldr	r3, [r4, #24]
 800daf6:	60a3      	str	r3, [r4, #8]
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	071a      	lsls	r2, r3, #28
 800dafc:	d525      	bpl.n	800db4a <__swbuf_r+0x68>
 800dafe:	6923      	ldr	r3, [r4, #16]
 800db00:	b31b      	cbz	r3, 800db4a <__swbuf_r+0x68>
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	b2f6      	uxtb	r6, r6
 800db06:	6922      	ldr	r2, [r4, #16]
 800db08:	4637      	mov	r7, r6
 800db0a:	1a98      	subs	r0, r3, r2
 800db0c:	6963      	ldr	r3, [r4, #20]
 800db0e:	4283      	cmp	r3, r0
 800db10:	dc04      	bgt.n	800db1c <__swbuf_r+0x3a>
 800db12:	4621      	mov	r1, r4
 800db14:	4628      	mov	r0, r5
 800db16:	f7ff fbb3 	bl	800d280 <_fflush_r>
 800db1a:	b9e0      	cbnz	r0, 800db56 <__swbuf_r+0x74>
 800db1c:	68a3      	ldr	r3, [r4, #8]
 800db1e:	3b01      	subs	r3, #1
 800db20:	60a3      	str	r3, [r4, #8]
 800db22:	6823      	ldr	r3, [r4, #0]
 800db24:	1c5a      	adds	r2, r3, #1
 800db26:	6022      	str	r2, [r4, #0]
 800db28:	701e      	strb	r6, [r3, #0]
 800db2a:	1c43      	adds	r3, r0, #1
 800db2c:	6962      	ldr	r2, [r4, #20]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d004      	beq.n	800db3c <__swbuf_r+0x5a>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	07db      	lsls	r3, r3, #31
 800db36:	d506      	bpl.n	800db46 <__swbuf_r+0x64>
 800db38:	2e0a      	cmp	r6, #10
 800db3a:	d104      	bne.n	800db46 <__swbuf_r+0x64>
 800db3c:	4621      	mov	r1, r4
 800db3e:	4628      	mov	r0, r5
 800db40:	f7ff fb9e 	bl	800d280 <_fflush_r>
 800db44:	b938      	cbnz	r0, 800db56 <__swbuf_r+0x74>
 800db46:	4638      	mov	r0, r7
 800db48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db4a:	4621      	mov	r1, r4
 800db4c:	4628      	mov	r0, r5
 800db4e:	f000 f805 	bl	800db5c <__swsetup_r>
 800db52:	2800      	cmp	r0, #0
 800db54:	d0d5      	beq.n	800db02 <__swbuf_r+0x20>
 800db56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800db5a:	e7f4      	b.n	800db46 <__swbuf_r+0x64>

0800db5c <__swsetup_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4b2a      	ldr	r3, [pc, #168]	; (800dc08 <__swsetup_r+0xac>)
 800db60:	4605      	mov	r5, r0
 800db62:	460c      	mov	r4, r1
 800db64:	6818      	ldr	r0, [r3, #0]
 800db66:	b118      	cbz	r0, 800db70 <__swsetup_r+0x14>
 800db68:	6a03      	ldr	r3, [r0, #32]
 800db6a:	b90b      	cbnz	r3, 800db70 <__swsetup_r+0x14>
 800db6c:	f7fe f86c 	bl	800bc48 <__sinit>
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db76:	0718      	lsls	r0, r3, #28
 800db78:	d422      	bmi.n	800dbc0 <__swsetup_r+0x64>
 800db7a:	06d9      	lsls	r1, r3, #27
 800db7c:	d407      	bmi.n	800db8e <__swsetup_r+0x32>
 800db7e:	2309      	movs	r3, #9
 800db80:	602b      	str	r3, [r5, #0]
 800db82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db8a:	81a3      	strh	r3, [r4, #12]
 800db8c:	e034      	b.n	800dbf8 <__swsetup_r+0x9c>
 800db8e:	0758      	lsls	r0, r3, #29
 800db90:	d512      	bpl.n	800dbb8 <__swsetup_r+0x5c>
 800db92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db94:	b141      	cbz	r1, 800dba8 <__swsetup_r+0x4c>
 800db96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db9a:	4299      	cmp	r1, r3
 800db9c:	d002      	beq.n	800dba4 <__swsetup_r+0x48>
 800db9e:	4628      	mov	r0, r5
 800dba0:	f7ff f802 	bl	800cba8 <_free_r>
 800dba4:	2300      	movs	r3, #0
 800dba6:	6363      	str	r3, [r4, #52]	; 0x34
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbae:	81a3      	strh	r3, [r4, #12]
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	6063      	str	r3, [r4, #4]
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	f043 0308 	orr.w	r3, r3, #8
 800dbbe:	81a3      	strh	r3, [r4, #12]
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	b94b      	cbnz	r3, 800dbd8 <__swsetup_r+0x7c>
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbce:	d003      	beq.n	800dbd8 <__swsetup_r+0x7c>
 800dbd0:	4621      	mov	r1, r4
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f000 f83f 	bl	800dc56 <__smakebuf_r>
 800dbd8:	89a0      	ldrh	r0, [r4, #12]
 800dbda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbde:	f010 0301 	ands.w	r3, r0, #1
 800dbe2:	d00a      	beq.n	800dbfa <__swsetup_r+0x9e>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60a3      	str	r3, [r4, #8]
 800dbe8:	6963      	ldr	r3, [r4, #20]
 800dbea:	425b      	negs	r3, r3
 800dbec:	61a3      	str	r3, [r4, #24]
 800dbee:	6923      	ldr	r3, [r4, #16]
 800dbf0:	b943      	cbnz	r3, 800dc04 <__swsetup_r+0xa8>
 800dbf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbf6:	d1c4      	bne.n	800db82 <__swsetup_r+0x26>
 800dbf8:	bd38      	pop	{r3, r4, r5, pc}
 800dbfa:	0781      	lsls	r1, r0, #30
 800dbfc:	bf58      	it	pl
 800dbfe:	6963      	ldrpl	r3, [r4, #20]
 800dc00:	60a3      	str	r3, [r4, #8]
 800dc02:	e7f4      	b.n	800dbee <__swsetup_r+0x92>
 800dc04:	2000      	movs	r0, #0
 800dc06:	e7f7      	b.n	800dbf8 <__swsetup_r+0x9c>
 800dc08:	20000104 	.word	0x20000104

0800dc0c <__swhatbuf_r>:
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	460c      	mov	r4, r1
 800dc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc14:	b096      	sub	sp, #88	; 0x58
 800dc16:	4615      	mov	r5, r2
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	461e      	mov	r6, r3
 800dc1c:	da0c      	bge.n	800dc38 <__swhatbuf_r+0x2c>
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	2100      	movs	r1, #0
 800dc22:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc26:	bf0c      	ite	eq
 800dc28:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc2c:	2340      	movne	r3, #64	; 0x40
 800dc2e:	2000      	movs	r0, #0
 800dc30:	6031      	str	r1, [r6, #0]
 800dc32:	602b      	str	r3, [r5, #0]
 800dc34:	b016      	add	sp, #88	; 0x58
 800dc36:	bd70      	pop	{r4, r5, r6, pc}
 800dc38:	466a      	mov	r2, sp
 800dc3a:	f000 f8a7 	bl	800dd8c <_fstat_r>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	dbed      	blt.n	800dc1e <__swhatbuf_r+0x12>
 800dc42:	9901      	ldr	r1, [sp, #4]
 800dc44:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc48:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc4c:	4259      	negs	r1, r3
 800dc4e:	4159      	adcs	r1, r3
 800dc50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc54:	e7eb      	b.n	800dc2e <__swhatbuf_r+0x22>

0800dc56 <__smakebuf_r>:
 800dc56:	898b      	ldrh	r3, [r1, #12]
 800dc58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc5a:	079d      	lsls	r5, r3, #30
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	460c      	mov	r4, r1
 800dc60:	d507      	bpl.n	800dc72 <__smakebuf_r+0x1c>
 800dc62:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc66:	6023      	str	r3, [r4, #0]
 800dc68:	6123      	str	r3, [r4, #16]
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	6163      	str	r3, [r4, #20]
 800dc6e:	b002      	add	sp, #8
 800dc70:	bd70      	pop	{r4, r5, r6, pc}
 800dc72:	ab01      	add	r3, sp, #4
 800dc74:	466a      	mov	r2, sp
 800dc76:	f7ff ffc9 	bl	800dc0c <__swhatbuf_r>
 800dc7a:	9900      	ldr	r1, [sp, #0]
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f7fd fc98 	bl	800b5b4 <_malloc_r>
 800dc84:	b948      	cbnz	r0, 800dc9a <__smakebuf_r+0x44>
 800dc86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc8a:	059a      	lsls	r2, r3, #22
 800dc8c:	d4ef      	bmi.n	800dc6e <__smakebuf_r+0x18>
 800dc8e:	f023 0303 	bic.w	r3, r3, #3
 800dc92:	f043 0302 	orr.w	r3, r3, #2
 800dc96:	81a3      	strh	r3, [r4, #12]
 800dc98:	e7e3      	b.n	800dc62 <__smakebuf_r+0xc>
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	6020      	str	r0, [r4, #0]
 800dc9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca2:	6120      	str	r0, [r4, #16]
 800dca4:	81a3      	strh	r3, [r4, #12]
 800dca6:	9b00      	ldr	r3, [sp, #0]
 800dca8:	6163      	str	r3, [r4, #20]
 800dcaa:	9b01      	ldr	r3, [sp, #4]
 800dcac:	b15b      	cbz	r3, 800dcc6 <__smakebuf_r+0x70>
 800dcae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f000 f87c 	bl	800ddb0 <_isatty_r>
 800dcb8:	b128      	cbz	r0, 800dcc6 <__smakebuf_r+0x70>
 800dcba:	89a3      	ldrh	r3, [r4, #12]
 800dcbc:	f023 0303 	bic.w	r3, r3, #3
 800dcc0:	f043 0301 	orr.w	r3, r3, #1
 800dcc4:	81a3      	strh	r3, [r4, #12]
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	431d      	orrs	r5, r3
 800dcca:	81a5      	strh	r5, [r4, #12]
 800dccc:	e7cf      	b.n	800dc6e <__smakebuf_r+0x18>

0800dcce <_putc_r>:
 800dcce:	b570      	push	{r4, r5, r6, lr}
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	4614      	mov	r4, r2
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	b118      	cbz	r0, 800dce0 <_putc_r+0x12>
 800dcd8:	6a03      	ldr	r3, [r0, #32]
 800dcda:	b90b      	cbnz	r3, 800dce0 <_putc_r+0x12>
 800dcdc:	f7fd ffb4 	bl	800bc48 <__sinit>
 800dce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dce2:	07d8      	lsls	r0, r3, #31
 800dce4:	d405      	bmi.n	800dcf2 <_putc_r+0x24>
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	0599      	lsls	r1, r3, #22
 800dcea:	d402      	bmi.n	800dcf2 <_putc_r+0x24>
 800dcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcee:	f7fe f89e 	bl	800be2e <__retarget_lock_acquire_recursive>
 800dcf2:	68a3      	ldr	r3, [r4, #8]
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	60a3      	str	r3, [r4, #8]
 800dcfa:	da05      	bge.n	800dd08 <_putc_r+0x3a>
 800dcfc:	69a2      	ldr	r2, [r4, #24]
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	db12      	blt.n	800dd28 <_putc_r+0x5a>
 800dd02:	b2eb      	uxtb	r3, r5
 800dd04:	2b0a      	cmp	r3, #10
 800dd06:	d00f      	beq.n	800dd28 <_putc_r+0x5a>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	1c5a      	adds	r2, r3, #1
 800dd0c:	6022      	str	r2, [r4, #0]
 800dd0e:	701d      	strb	r5, [r3, #0]
 800dd10:	b2ed      	uxtb	r5, r5
 800dd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd14:	07da      	lsls	r2, r3, #31
 800dd16:	d405      	bmi.n	800dd24 <_putc_r+0x56>
 800dd18:	89a3      	ldrh	r3, [r4, #12]
 800dd1a:	059b      	lsls	r3, r3, #22
 800dd1c:	d402      	bmi.n	800dd24 <_putc_r+0x56>
 800dd1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd20:	f7fe f886 	bl	800be30 <__retarget_lock_release_recursive>
 800dd24:	4628      	mov	r0, r5
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	4629      	mov	r1, r5
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	f7ff fed8 	bl	800dae2 <__swbuf_r>
 800dd32:	4605      	mov	r5, r0
 800dd34:	e7ed      	b.n	800dd12 <_putc_r+0x44>

0800dd36 <memmove>:
 800dd36:	4288      	cmp	r0, r1
 800dd38:	b510      	push	{r4, lr}
 800dd3a:	eb01 0402 	add.w	r4, r1, r2
 800dd3e:	d902      	bls.n	800dd46 <memmove+0x10>
 800dd40:	4284      	cmp	r4, r0
 800dd42:	4623      	mov	r3, r4
 800dd44:	d807      	bhi.n	800dd56 <memmove+0x20>
 800dd46:	1e43      	subs	r3, r0, #1
 800dd48:	42a1      	cmp	r1, r4
 800dd4a:	d008      	beq.n	800dd5e <memmove+0x28>
 800dd4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd50:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd54:	e7f8      	b.n	800dd48 <memmove+0x12>
 800dd56:	4402      	add	r2, r0
 800dd58:	4601      	mov	r1, r0
 800dd5a:	428a      	cmp	r2, r1
 800dd5c:	d100      	bne.n	800dd60 <memmove+0x2a>
 800dd5e:	bd10      	pop	{r4, pc}
 800dd60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd68:	e7f7      	b.n	800dd5a <memmove+0x24>
	...

0800dd6c <_close_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	2300      	movs	r3, #0
 800dd70:	4d05      	ldr	r5, [pc, #20]	; (800dd88 <_close_r+0x1c>)
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	602b      	str	r3, [r5, #0]
 800dd78:	f000 f9c0 	bl	800e0fc <_close>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_close_r+0x1a>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_close_r+0x1a>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	20001070 	.word	0x20001070

0800dd8c <_fstat_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	2300      	movs	r3, #0
 800dd90:	4d06      	ldr	r5, [pc, #24]	; (800ddac <_fstat_r+0x20>)
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	4611      	mov	r1, r2
 800dd98:	602b      	str	r3, [r5, #0]
 800dd9a:	f000 f9f8 	bl	800e18e <_fstat>
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	d102      	bne.n	800dda8 <_fstat_r+0x1c>
 800dda2:	682b      	ldr	r3, [r5, #0]
 800dda4:	b103      	cbz	r3, 800dda8 <_fstat_r+0x1c>
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	20001070 	.word	0x20001070

0800ddb0 <_isatty_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	4d05      	ldr	r5, [pc, #20]	; (800ddcc <_isatty_r+0x1c>)
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f000 fb5a 	bl	800e474 <_isatty>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_isatty_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_isatty_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	20001070 	.word	0x20001070

0800ddd0 <_lseek_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4d06      	ldr	r5, [pc, #24]	; (800ddf0 <_lseek_r+0x20>)
 800ddd6:	4608      	mov	r0, r1
 800ddd8:	4611      	mov	r1, r2
 800ddda:	2200      	movs	r2, #0
 800dddc:	602a      	str	r2, [r5, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	f000 f949 	bl	800e076 <_lseek>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_lseek_r+0x1e>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_lseek_r+0x1e>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20001070 	.word	0x20001070

0800ddf4 <_read_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4d06      	ldr	r5, [pc, #24]	; (800de14 <_read_r+0x20>)
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f000 f8df 	bl	800dfc6 <_read>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_read_r+0x1e>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_read_r+0x1e>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	20001070 	.word	0x20001070

0800de18 <_write_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4604      	mov	r4, r0
 800de1c:	4d06      	ldr	r5, [pc, #24]	; (800de38 <_write_r+0x20>)
 800de1e:	4608      	mov	r0, r1
 800de20:	4611      	mov	r1, r2
 800de22:	2200      	movs	r2, #0
 800de24:	602a      	str	r2, [r5, #0]
 800de26:	461a      	mov	r2, r3
 800de28:	f000 f937 	bl	800e09a <_write>
 800de2c:	1c43      	adds	r3, r0, #1
 800de2e:	d102      	bne.n	800de36 <_write_r+0x1e>
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	b103      	cbz	r3, 800de36 <_write_r+0x1e>
 800de34:	6023      	str	r3, [r4, #0]
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	20001070 	.word	0x20001070

0800de3c <abort>:
 800de3c:	2006      	movs	r0, #6
 800de3e:	b508      	push	{r3, lr}
 800de40:	f000 f868 	bl	800df14 <raise>
 800de44:	2001      	movs	r0, #1
 800de46:	f000 fb31 	bl	800e4ac <_exit>

0800de4a <_calloc_r>:
 800de4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de4c:	fba1 2402 	umull	r2, r4, r1, r2
 800de50:	b94c      	cbnz	r4, 800de66 <_calloc_r+0x1c>
 800de52:	4611      	mov	r1, r2
 800de54:	9201      	str	r2, [sp, #4]
 800de56:	f7fd fbad 	bl	800b5b4 <_malloc_r>
 800de5a:	9a01      	ldr	r2, [sp, #4]
 800de5c:	4605      	mov	r5, r0
 800de5e:	b930      	cbnz	r0, 800de6e <_calloc_r+0x24>
 800de60:	4628      	mov	r0, r5
 800de62:	b003      	add	sp, #12
 800de64:	bd30      	pop	{r4, r5, pc}
 800de66:	220c      	movs	r2, #12
 800de68:	2500      	movs	r5, #0
 800de6a:	6002      	str	r2, [r0, #0]
 800de6c:	e7f8      	b.n	800de60 <_calloc_r+0x16>
 800de6e:	4621      	mov	r1, r4
 800de70:	f7fd ff96 	bl	800bda0 <memset>
 800de74:	e7f4      	b.n	800de60 <_calloc_r+0x16>

0800de76 <__ascii_mbtowc>:
 800de76:	b082      	sub	sp, #8
 800de78:	b901      	cbnz	r1, 800de7c <__ascii_mbtowc+0x6>
 800de7a:	a901      	add	r1, sp, #4
 800de7c:	b142      	cbz	r2, 800de90 <__ascii_mbtowc+0x1a>
 800de7e:	b14b      	cbz	r3, 800de94 <__ascii_mbtowc+0x1e>
 800de80:	7813      	ldrb	r3, [r2, #0]
 800de82:	600b      	str	r3, [r1, #0]
 800de84:	7812      	ldrb	r2, [r2, #0]
 800de86:	1e10      	subs	r0, r2, #0
 800de88:	bf18      	it	ne
 800de8a:	2001      	movne	r0, #1
 800de8c:	b002      	add	sp, #8
 800de8e:	4770      	bx	lr
 800de90:	4610      	mov	r0, r2
 800de92:	e7fb      	b.n	800de8c <__ascii_mbtowc+0x16>
 800de94:	f06f 0001 	mvn.w	r0, #1
 800de98:	e7f8      	b.n	800de8c <__ascii_mbtowc+0x16>

0800de9a <_malloc_usable_size_r>:
 800de9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de9e:	1f18      	subs	r0, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bfbc      	itt	lt
 800dea4:	580b      	ldrlt	r3, [r1, r0]
 800dea6:	18c0      	addlt	r0, r0, r3
 800dea8:	4770      	bx	lr

0800deaa <__ascii_wctomb>:
 800deaa:	b149      	cbz	r1, 800dec0 <__ascii_wctomb+0x16>
 800deac:	2aff      	cmp	r2, #255	; 0xff
 800deae:	bf8d      	iteet	hi
 800deb0:	238a      	movhi	r3, #138	; 0x8a
 800deb2:	2001      	movls	r0, #1
 800deb4:	700a      	strbls	r2, [r1, #0]
 800deb6:	6003      	strhi	r3, [r0, #0]
 800deb8:	bf88      	it	hi
 800deba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800debe:	4770      	bx	lr
 800dec0:	4608      	mov	r0, r1
 800dec2:	4770      	bx	lr

0800dec4 <_raise_r>:
 800dec4:	291f      	cmp	r1, #31
 800dec6:	b538      	push	{r3, r4, r5, lr}
 800dec8:	4604      	mov	r4, r0
 800deca:	460d      	mov	r5, r1
 800decc:	d904      	bls.n	800ded8 <_raise_r+0x14>
 800dece:	2316      	movs	r3, #22
 800ded0:	6003      	str	r3, [r0, #0]
 800ded2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ded6:	bd38      	pop	{r3, r4, r5, pc}
 800ded8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800deda:	b112      	cbz	r2, 800dee2 <_raise_r+0x1e>
 800dedc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dee0:	b94b      	cbnz	r3, 800def6 <_raise_r+0x32>
 800dee2:	4620      	mov	r0, r4
 800dee4:	f000 f830 	bl	800df48 <_getpid_r>
 800dee8:	462a      	mov	r2, r5
 800deea:	4601      	mov	r1, r0
 800deec:	4620      	mov	r0, r4
 800deee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def2:	f000 b817 	b.w	800df24 <_kill_r>
 800def6:	2b01      	cmp	r3, #1
 800def8:	d00a      	beq.n	800df10 <_raise_r+0x4c>
 800defa:	1c59      	adds	r1, r3, #1
 800defc:	d103      	bne.n	800df06 <_raise_r+0x42>
 800defe:	2316      	movs	r3, #22
 800df00:	6003      	str	r3, [r0, #0]
 800df02:	2001      	movs	r0, #1
 800df04:	e7e7      	b.n	800ded6 <_raise_r+0x12>
 800df06:	2400      	movs	r4, #0
 800df08:	4628      	mov	r0, r5
 800df0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df0e:	4798      	blx	r3
 800df10:	2000      	movs	r0, #0
 800df12:	e7e0      	b.n	800ded6 <_raise_r+0x12>

0800df14 <raise>:
 800df14:	4b02      	ldr	r3, [pc, #8]	; (800df20 <raise+0xc>)
 800df16:	4601      	mov	r1, r0
 800df18:	6818      	ldr	r0, [r3, #0]
 800df1a:	f7ff bfd3 	b.w	800dec4 <_raise_r>
 800df1e:	bf00      	nop
 800df20:	20000104 	.word	0x20000104

0800df24 <_kill_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	2300      	movs	r3, #0
 800df28:	4d06      	ldr	r5, [pc, #24]	; (800df44 <_kill_r+0x20>)
 800df2a:	4604      	mov	r4, r0
 800df2c:	4608      	mov	r0, r1
 800df2e:	4611      	mov	r1, r2
 800df30:	602b      	str	r3, [r5, #0]
 800df32:	f000 fad9 	bl	800e4e8 <_kill>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	d102      	bne.n	800df40 <_kill_r+0x1c>
 800df3a:	682b      	ldr	r3, [r5, #0]
 800df3c:	b103      	cbz	r3, 800df40 <_kill_r+0x1c>
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	bd38      	pop	{r3, r4, r5, pc}
 800df42:	bf00      	nop
 800df44:	20001070 	.word	0x20001070

0800df48 <_getpid_r>:
 800df48:	f000 b8fe 	b.w	800e148 <_getpid>

0800df4c <findslot>:
 800df4c:	4b0a      	ldr	r3, [pc, #40]	; (800df78 <findslot+0x2c>)
 800df4e:	b510      	push	{r4, lr}
 800df50:	4604      	mov	r4, r0
 800df52:	6818      	ldr	r0, [r3, #0]
 800df54:	b118      	cbz	r0, 800df5e <findslot+0x12>
 800df56:	6a03      	ldr	r3, [r0, #32]
 800df58:	b90b      	cbnz	r3, 800df5e <findslot+0x12>
 800df5a:	f7fd fe75 	bl	800bc48 <__sinit>
 800df5e:	2c13      	cmp	r4, #19
 800df60:	d807      	bhi.n	800df72 <findslot+0x26>
 800df62:	4806      	ldr	r0, [pc, #24]	; (800df7c <findslot+0x30>)
 800df64:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800df68:	3201      	adds	r2, #1
 800df6a:	d002      	beq.n	800df72 <findslot+0x26>
 800df6c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800df70:	bd10      	pop	{r4, pc}
 800df72:	2000      	movs	r0, #0
 800df74:	e7fc      	b.n	800df70 <findslot+0x24>
 800df76:	bf00      	nop
 800df78:	20000104 	.word	0x20000104
 800df7c:	20001080 	.word	0x20001080

0800df80 <error>:
 800df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df82:	4604      	mov	r4, r0
 800df84:	2613      	movs	r6, #19
 800df86:	f7fd ff27 	bl	800bdd8 <__errno>
 800df8a:	2700      	movs	r7, #0
 800df8c:	4605      	mov	r5, r0
 800df8e:	4630      	mov	r0, r6
 800df90:	4639      	mov	r1, r7
 800df92:	beab      	bkpt	0x00ab
 800df94:	4606      	mov	r6, r0
 800df96:	4620      	mov	r0, r4
 800df98:	602e      	str	r6, [r5, #0]
 800df9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df9c <checkerror>:
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	d101      	bne.n	800dfa4 <checkerror+0x8>
 800dfa0:	f7ff bfee 	b.w	800df80 <error>
 800dfa4:	4770      	bx	lr

0800dfa6 <_swiread>:
 800dfa6:	b530      	push	{r4, r5, lr}
 800dfa8:	b085      	sub	sp, #20
 800dfaa:	2406      	movs	r4, #6
 800dfac:	ad01      	add	r5, sp, #4
 800dfae:	9203      	str	r2, [sp, #12]
 800dfb0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	beab      	bkpt	0x00ab
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7ff ffed 	bl	800df9c <checkerror>
 800dfc2:	b005      	add	sp, #20
 800dfc4:	bd30      	pop	{r4, r5, pc}

0800dfc6 <_read>:
 800dfc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfc8:	4615      	mov	r5, r2
 800dfca:	9101      	str	r1, [sp, #4]
 800dfcc:	f7ff ffbe 	bl	800df4c <findslot>
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	9901      	ldr	r1, [sp, #4]
 800dfd4:	b938      	cbnz	r0, 800dfe6 <_read+0x20>
 800dfd6:	f7fd feff 	bl	800bdd8 <__errno>
 800dfda:	2309      	movs	r3, #9
 800dfdc:	6003      	str	r3, [r0, #0]
 800dfde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfe2:	b003      	add	sp, #12
 800dfe4:	bd30      	pop	{r4, r5, pc}
 800dfe6:	462a      	mov	r2, r5
 800dfe8:	6800      	ldr	r0, [r0, #0]
 800dfea:	f7ff ffdc 	bl	800dfa6 <_swiread>
 800dfee:	1c43      	adds	r3, r0, #1
 800dff0:	d0f7      	beq.n	800dfe2 <_read+0x1c>
 800dff2:	1a2a      	subs	r2, r5, r0
 800dff4:	6863      	ldr	r3, [r4, #4]
 800dff6:	4413      	add	r3, r2
 800dff8:	4610      	mov	r0, r2
 800dffa:	6063      	str	r3, [r4, #4]
 800dffc:	e7f1      	b.n	800dfe2 <_read+0x1c>

0800dffe <_swilseek>:
 800dffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e000:	460c      	mov	r4, r1
 800e002:	4616      	mov	r6, r2
 800e004:	f7ff ffa2 	bl	800df4c <findslot>
 800e008:	4605      	mov	r5, r0
 800e00a:	b940      	cbnz	r0, 800e01e <_swilseek+0x20>
 800e00c:	f7fd fee4 	bl	800bdd8 <__errno>
 800e010:	2309      	movs	r3, #9
 800e012:	6003      	str	r3, [r0, #0]
 800e014:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e018:	4620      	mov	r0, r4
 800e01a:	b003      	add	sp, #12
 800e01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e01e:	2e02      	cmp	r6, #2
 800e020:	d903      	bls.n	800e02a <_swilseek+0x2c>
 800e022:	f7fd fed9 	bl	800bdd8 <__errno>
 800e026:	2316      	movs	r3, #22
 800e028:	e7f3      	b.n	800e012 <_swilseek+0x14>
 800e02a:	2e01      	cmp	r6, #1
 800e02c:	d112      	bne.n	800e054 <_swilseek+0x56>
 800e02e:	6843      	ldr	r3, [r0, #4]
 800e030:	18e4      	adds	r4, r4, r3
 800e032:	d4f6      	bmi.n	800e022 <_swilseek+0x24>
 800e034:	682b      	ldr	r3, [r5, #0]
 800e036:	260a      	movs	r6, #10
 800e038:	466f      	mov	r7, sp
 800e03a:	e9cd 3400 	strd	r3, r4, [sp]
 800e03e:	4630      	mov	r0, r6
 800e040:	4639      	mov	r1, r7
 800e042:	beab      	bkpt	0x00ab
 800e044:	4606      	mov	r6, r0
 800e046:	4630      	mov	r0, r6
 800e048:	f7ff ffa8 	bl	800df9c <checkerror>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	dbe1      	blt.n	800e014 <_swilseek+0x16>
 800e050:	606c      	str	r4, [r5, #4]
 800e052:	e7e1      	b.n	800e018 <_swilseek+0x1a>
 800e054:	2e02      	cmp	r6, #2
 800e056:	6803      	ldr	r3, [r0, #0]
 800e058:	d1ec      	bne.n	800e034 <_swilseek+0x36>
 800e05a:	260c      	movs	r6, #12
 800e05c:	466f      	mov	r7, sp
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	4630      	mov	r0, r6
 800e062:	4639      	mov	r1, r7
 800e064:	beab      	bkpt	0x00ab
 800e066:	4606      	mov	r6, r0
 800e068:	4630      	mov	r0, r6
 800e06a:	f7ff ff97 	bl	800df9c <checkerror>
 800e06e:	1c43      	adds	r3, r0, #1
 800e070:	d0d0      	beq.n	800e014 <_swilseek+0x16>
 800e072:	4404      	add	r4, r0
 800e074:	e7de      	b.n	800e034 <_swilseek+0x36>

0800e076 <_lseek>:
 800e076:	f7ff bfc2 	b.w	800dffe <_swilseek>

0800e07a <_swiwrite>:
 800e07a:	b530      	push	{r4, r5, lr}
 800e07c:	b085      	sub	sp, #20
 800e07e:	2405      	movs	r4, #5
 800e080:	ad01      	add	r5, sp, #4
 800e082:	9203      	str	r2, [sp, #12]
 800e084:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e088:	4620      	mov	r0, r4
 800e08a:	4629      	mov	r1, r5
 800e08c:	beab      	bkpt	0x00ab
 800e08e:	4604      	mov	r4, r0
 800e090:	4620      	mov	r0, r4
 800e092:	f7ff ff83 	bl	800df9c <checkerror>
 800e096:	b005      	add	sp, #20
 800e098:	bd30      	pop	{r4, r5, pc}

0800e09a <_write>:
 800e09a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e09c:	4615      	mov	r5, r2
 800e09e:	9101      	str	r1, [sp, #4]
 800e0a0:	f7ff ff54 	bl	800df4c <findslot>
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	9901      	ldr	r1, [sp, #4]
 800e0a8:	b930      	cbnz	r0, 800e0b8 <_write+0x1e>
 800e0aa:	f7fd fe95 	bl	800bdd8 <__errno>
 800e0ae:	2309      	movs	r3, #9
 800e0b0:	6003      	str	r3, [r0, #0]
 800e0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0b6:	e012      	b.n	800e0de <_write+0x44>
 800e0b8:	462a      	mov	r2, r5
 800e0ba:	6800      	ldr	r0, [r0, #0]
 800e0bc:	f7ff ffdd 	bl	800e07a <_swiwrite>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	dbf6      	blt.n	800e0b2 <_write+0x18>
 800e0c4:	6862      	ldr	r2, [r4, #4]
 800e0c6:	1a2b      	subs	r3, r5, r0
 800e0c8:	42a8      	cmp	r0, r5
 800e0ca:	441a      	add	r2, r3
 800e0cc:	6062      	str	r2, [r4, #4]
 800e0ce:	d105      	bne.n	800e0dc <_write+0x42>
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	b003      	add	sp, #12
 800e0d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0d8:	f7ff bf52 	b.w	800df80 <error>
 800e0dc:	4618      	mov	r0, r3
 800e0de:	b003      	add	sp, #12
 800e0e0:	bd30      	pop	{r4, r5, pc}

0800e0e2 <_swiclose>:
 800e0e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0e4:	2402      	movs	r4, #2
 800e0e6:	ad01      	add	r5, sp, #4
 800e0e8:	9001      	str	r0, [sp, #4]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	beab      	bkpt	0x00ab
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f7ff ff52 	bl	800df9c <checkerror>
 800e0f8:	b003      	add	sp, #12
 800e0fa:	bd30      	pop	{r4, r5, pc}

0800e0fc <_close>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4605      	mov	r5, r0
 800e100:	f7ff ff24 	bl	800df4c <findslot>
 800e104:	4604      	mov	r4, r0
 800e106:	b930      	cbnz	r0, 800e116 <_close+0x1a>
 800e108:	f7fd fe66 	bl	800bdd8 <__errno>
 800e10c:	2309      	movs	r3, #9
 800e10e:	6003      	str	r3, [r0, #0]
 800e110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e114:	bd38      	pop	{r3, r4, r5, pc}
 800e116:	3d01      	subs	r5, #1
 800e118:	2d01      	cmp	r5, #1
 800e11a:	d809      	bhi.n	800e130 <_close+0x34>
 800e11c:	4b09      	ldr	r3, [pc, #36]	; (800e144 <_close+0x48>)
 800e11e:	689a      	ldr	r2, [r3, #8]
 800e120:	691b      	ldr	r3, [r3, #16]
 800e122:	429a      	cmp	r2, r3
 800e124:	d104      	bne.n	800e130 <_close+0x34>
 800e126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e12a:	6003      	str	r3, [r0, #0]
 800e12c:	2000      	movs	r0, #0
 800e12e:	e7f1      	b.n	800e114 <_close+0x18>
 800e130:	6820      	ldr	r0, [r4, #0]
 800e132:	f7ff ffd6 	bl	800e0e2 <_swiclose>
 800e136:	2800      	cmp	r0, #0
 800e138:	d1ec      	bne.n	800e114 <_close+0x18>
 800e13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e13e:	6023      	str	r3, [r4, #0]
 800e140:	e7e8      	b.n	800e114 <_close+0x18>
 800e142:	bf00      	nop
 800e144:	20001080 	.word	0x20001080

0800e148 <_getpid>:
 800e148:	2001      	movs	r0, #1
 800e14a:	4770      	bx	lr

0800e14c <_swistat>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	460c      	mov	r4, r1
 800e150:	f7ff fefc 	bl	800df4c <findslot>
 800e154:	4605      	mov	r5, r0
 800e156:	b930      	cbnz	r0, 800e166 <_swistat+0x1a>
 800e158:	f7fd fe3e 	bl	800bdd8 <__errno>
 800e15c:	2309      	movs	r3, #9
 800e15e:	6003      	str	r3, [r0, #0]
 800e160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e164:	bd70      	pop	{r4, r5, r6, pc}
 800e166:	6863      	ldr	r3, [r4, #4]
 800e168:	260c      	movs	r6, #12
 800e16a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e16e:	6063      	str	r3, [r4, #4]
 800e170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e174:	64a3      	str	r3, [r4, #72]	; 0x48
 800e176:	4630      	mov	r0, r6
 800e178:	4629      	mov	r1, r5
 800e17a:	beab      	bkpt	0x00ab
 800e17c:	4605      	mov	r5, r0
 800e17e:	4628      	mov	r0, r5
 800e180:	f7ff ff0c 	bl	800df9c <checkerror>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	bf1c      	itt	ne
 800e188:	6120      	strne	r0, [r4, #16]
 800e18a:	2000      	movne	r0, #0
 800e18c:	e7ea      	b.n	800e164 <_swistat+0x18>

0800e18e <_fstat>:
 800e18e:	460b      	mov	r3, r1
 800e190:	2258      	movs	r2, #88	; 0x58
 800e192:	2100      	movs	r1, #0
 800e194:	b510      	push	{r4, lr}
 800e196:	4604      	mov	r4, r0
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fd fe01 	bl	800bda0 <memset>
 800e19e:	4601      	mov	r1, r0
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1a6:	f7ff bfd1 	b.w	800e14c <_swistat>

0800e1aa <_stat>:
 800e1aa:	b538      	push	{r3, r4, r5, lr}
 800e1ac:	460d      	mov	r5, r1
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	2258      	movs	r2, #88	; 0x58
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f7fd fdf3 	bl	800bda0 <memset>
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	2100      	movs	r1, #0
 800e1be:	f000 f811 	bl	800e1e4 <_swiopen>
 800e1c2:	1c43      	adds	r3, r0, #1
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	d00b      	beq.n	800e1e0 <_stat+0x36>
 800e1c8:	686b      	ldr	r3, [r5, #4]
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e1d0:	606b      	str	r3, [r5, #4]
 800e1d2:	f7ff ffbb 	bl	800e14c <_swistat>
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	4620      	mov	r0, r4
 800e1da:	462c      	mov	r4, r5
 800e1dc:	f7ff ff8e 	bl	800e0fc <_close>
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}

0800e1e4 <_swiopen>:
 800e1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1e8:	4607      	mov	r7, r0
 800e1ea:	b097      	sub	sp, #92	; 0x5c
 800e1ec:	460e      	mov	r6, r1
 800e1ee:	2500      	movs	r5, #0
 800e1f0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800e294 <_swiopen+0xb0>
 800e1f4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800e1f8:	1c61      	adds	r1, r4, #1
 800e1fa:	d036      	beq.n	800e26a <_swiopen+0x86>
 800e1fc:	3501      	adds	r5, #1
 800e1fe:	2d14      	cmp	r5, #20
 800e200:	d1f8      	bne.n	800e1f4 <_swiopen+0x10>
 800e202:	f7fd fde9 	bl	800bdd8 <__errno>
 800e206:	2318      	movs	r3, #24
 800e208:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e20c:	6003      	str	r3, [r0, #0]
 800e20e:	e03c      	b.n	800e28a <_swiopen+0xa6>
 800e210:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800e214:	f240 6301 	movw	r3, #1537	; 0x601
 800e218:	07b2      	lsls	r2, r6, #30
 800e21a:	4638      	mov	r0, r7
 800e21c:	9700      	str	r7, [sp, #0]
 800e21e:	bf48      	it	mi
 800e220:	f044 0402 	orrmi.w	r4, r4, #2
 800e224:	421e      	tst	r6, r3
 800e226:	bf18      	it	ne
 800e228:	f044 0404 	orrne.w	r4, r4, #4
 800e22c:	0733      	lsls	r3, r6, #28
 800e22e:	bf44      	itt	mi
 800e230:	f024 0404 	bicmi.w	r4, r4, #4
 800e234:	f044 0408 	orrmi.w	r4, r4, #8
 800e238:	f7f2 f81e 	bl	8000278 <strlen>
 800e23c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800e240:	2401      	movs	r4, #1
 800e242:	4620      	mov	r0, r4
 800e244:	4649      	mov	r1, r9
 800e246:	beab      	bkpt	0x00ab
 800e248:	4604      	mov	r4, r0
 800e24a:	2c00      	cmp	r4, #0
 800e24c:	db08      	blt.n	800e260 <_swiopen+0x7c>
 800e24e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800e252:	2300      	movs	r3, #0
 800e254:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800e258:	462c      	mov	r4, r5
 800e25a:	f8c8 3004 	str.w	r3, [r8, #4]
 800e25e:	e014      	b.n	800e28a <_swiopen+0xa6>
 800e260:	4620      	mov	r0, r4
 800e262:	f7ff fe8d 	bl	800df80 <error>
 800e266:	4604      	mov	r4, r0
 800e268:	e00f      	b.n	800e28a <_swiopen+0xa6>
 800e26a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800e26e:	46e9      	mov	r9, sp
 800e270:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800e274:	d1cc      	bne.n	800e210 <_swiopen+0x2c>
 800e276:	4649      	mov	r1, r9
 800e278:	4638      	mov	r0, r7
 800e27a:	f7ff ff96 	bl	800e1aa <_stat>
 800e27e:	3001      	adds	r0, #1
 800e280:	d0c6      	beq.n	800e210 <_swiopen+0x2c>
 800e282:	f7fd fda9 	bl	800bdd8 <__errno>
 800e286:	2311      	movs	r3, #17
 800e288:	6003      	str	r3, [r0, #0]
 800e28a:	4620      	mov	r0, r4
 800e28c:	b017      	add	sp, #92	; 0x5c
 800e28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e292:	bf00      	nop
 800e294:	20001080 	.word	0x20001080

0800e298 <_get_semihosting_exts>:
 800e298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e29c:	4606      	mov	r6, r0
 800e29e:	4615      	mov	r5, r2
 800e2a0:	460f      	mov	r7, r1
 800e2a2:	482a      	ldr	r0, [pc, #168]	; (800e34c <_get_semihosting_exts+0xb4>)
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	f7ff ff9d 	bl	800e1e4 <_swiopen>
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	462a      	mov	r2, r5
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7fd fd75 	bl	800bda0 <memset>
 800e2b6:	1c63      	adds	r3, r4, #1
 800e2b8:	d016      	beq.n	800e2e8 <_get_semihosting_exts+0x50>
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f04f 080c 	mov.w	r8, #12
 800e2c0:	f7ff fe44 	bl	800df4c <findslot>
 800e2c4:	4681      	mov	r9, r0
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	beab      	bkpt	0x00ab
 800e2cc:	4680      	mov	r8, r0
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	f7ff fe64 	bl	800df9c <checkerror>
 800e2d4:	2803      	cmp	r0, #3
 800e2d6:	dd02      	ble.n	800e2de <_get_semihosting_exts+0x46>
 800e2d8:	1ec3      	subs	r3, r0, #3
 800e2da:	42ab      	cmp	r3, r5
 800e2dc:	dc08      	bgt.n	800e2f0 <_get_semihosting_exts+0x58>
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e2e4:	f7ff ff0a 	bl	800e0fc <_close>
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	b003      	add	sp, #12
 800e2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2f0:	2204      	movs	r2, #4
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	eb0d 0102 	add.w	r1, sp, r2
 800e2f8:	f7ff fe65 	bl	800dfc6 <_read>
 800e2fc:	2803      	cmp	r0, #3
 800e2fe:	ddee      	ble.n	800e2de <_get_semihosting_exts+0x46>
 800e300:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e304:	2b53      	cmp	r3, #83	; 0x53
 800e306:	d1ea      	bne.n	800e2de <_get_semihosting_exts+0x46>
 800e308:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e30c:	2b48      	cmp	r3, #72	; 0x48
 800e30e:	d1e6      	bne.n	800e2de <_get_semihosting_exts+0x46>
 800e310:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e314:	2b46      	cmp	r3, #70	; 0x46
 800e316:	d1e2      	bne.n	800e2de <_get_semihosting_exts+0x46>
 800e318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e31c:	2b42      	cmp	r3, #66	; 0x42
 800e31e:	d1de      	bne.n	800e2de <_get_semihosting_exts+0x46>
 800e320:	2201      	movs	r2, #1
 800e322:	4639      	mov	r1, r7
 800e324:	4620      	mov	r0, r4
 800e326:	f7ff fe6a 	bl	800dffe <_swilseek>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	dbd7      	blt.n	800e2de <_get_semihosting_exts+0x46>
 800e32e:	462a      	mov	r2, r5
 800e330:	4631      	mov	r1, r6
 800e332:	4620      	mov	r0, r4
 800e334:	f7ff fe47 	bl	800dfc6 <_read>
 800e338:	4605      	mov	r5, r0
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7ff fede 	bl	800e0fc <_close>
 800e340:	4628      	mov	r0, r5
 800e342:	f7ff fe2b 	bl	800df9c <checkerror>
 800e346:	4604      	mov	r4, r0
 800e348:	e7ce      	b.n	800e2e8 <_get_semihosting_exts+0x50>
 800e34a:	bf00      	nop
 800e34c:	0800fe17 	.word	0x0800fe17

0800e350 <initialise_semihosting_exts>:
 800e350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e352:	2100      	movs	r1, #0
 800e354:	2201      	movs	r2, #1
 800e356:	4d09      	ldr	r5, [pc, #36]	; (800e37c <initialise_semihosting_exts+0x2c>)
 800e358:	a801      	add	r0, sp, #4
 800e35a:	4c09      	ldr	r4, [pc, #36]	; (800e380 <initialise_semihosting_exts+0x30>)
 800e35c:	6029      	str	r1, [r5, #0]
 800e35e:	6022      	str	r2, [r4, #0]
 800e360:	f7ff ff9a 	bl	800e298 <_get_semihosting_exts>
 800e364:	2800      	cmp	r0, #0
 800e366:	dd07      	ble.n	800e378 <initialise_semihosting_exts+0x28>
 800e368:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e36c:	f003 0201 	and.w	r2, r3, #1
 800e370:	f003 0302 	and.w	r3, r3, #2
 800e374:	602a      	str	r2, [r5, #0]
 800e376:	6023      	str	r3, [r4, #0]
 800e378:	b003      	add	sp, #12
 800e37a:	bd30      	pop	{r4, r5, pc}
 800e37c:	20000274 	.word	0x20000274
 800e380:	20000278 	.word	0x20000278

0800e384 <_has_ext_exit_extended>:
 800e384:	b510      	push	{r4, lr}
 800e386:	4c04      	ldr	r4, [pc, #16]	; (800e398 <_has_ext_exit_extended+0x14>)
 800e388:	6823      	ldr	r3, [r4, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	da01      	bge.n	800e392 <_has_ext_exit_extended+0xe>
 800e38e:	f7ff ffdf 	bl	800e350 <initialise_semihosting_exts>
 800e392:	6820      	ldr	r0, [r4, #0]
 800e394:	bd10      	pop	{r4, pc}
 800e396:	bf00      	nop
 800e398:	20000274 	.word	0x20000274

0800e39c <_has_ext_stdout_stderr>:
 800e39c:	b510      	push	{r4, lr}
 800e39e:	4c04      	ldr	r4, [pc, #16]	; (800e3b0 <_has_ext_stdout_stderr+0x14>)
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da01      	bge.n	800e3aa <_has_ext_stdout_stderr+0xe>
 800e3a6:	f7ff ffd3 	bl	800e350 <initialise_semihosting_exts>
 800e3aa:	6820      	ldr	r0, [r4, #0]
 800e3ac:	bd10      	pop	{r4, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20000278 	.word	0x20000278

0800e3b4 <initialise_monitor_handles>:
 800e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800e46c <initialise_monitor_handles+0xb8>
 800e3c0:	2400      	movs	r4, #0
 800e3c2:	af01      	add	r7, sp, #4
 800e3c4:	2501      	movs	r5, #1
 800e3c6:	f8cd 9004 	str.w	r9, [sp, #4]
 800e3ca:	9303      	str	r3, [sp, #12]
 800e3cc:	9402      	str	r4, [sp, #8]
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	beab      	bkpt	0x00ab
 800e3d4:	4605      	mov	r5, r0
 800e3d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800e470 <initialise_monitor_handles+0xbc>
 800e3da:	4623      	mov	r3, r4
 800e3dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3e0:	4c1f      	ldr	r4, [pc, #124]	; (800e460 <initialise_monitor_handles+0xac>)
 800e3e2:	f8c8 5000 	str.w	r5, [r8]
 800e3e6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	2b14      	cmp	r3, #20
 800e3ee:	d1fa      	bne.n	800e3e6 <initialise_monitor_handles+0x32>
 800e3f0:	4d1c      	ldr	r5, [pc, #112]	; (800e464 <initialise_monitor_handles+0xb0>)
 800e3f2:	f7ff ffd3 	bl	800e39c <_has_ext_stdout_stderr>
 800e3f6:	b1d0      	cbz	r0, 800e42e <initialise_monitor_handles+0x7a>
 800e3f8:	f04f 0a03 	mov.w	sl, #3
 800e3fc:	2304      	movs	r3, #4
 800e3fe:	f8cd 9004 	str.w	r9, [sp, #4]
 800e402:	2601      	movs	r6, #1
 800e404:	f8cd a00c 	str.w	sl, [sp, #12]
 800e408:	9302      	str	r3, [sp, #8]
 800e40a:	4630      	mov	r0, r6
 800e40c:	4639      	mov	r1, r7
 800e40e:	beab      	bkpt	0x00ab
 800e410:	4683      	mov	fp, r0
 800e412:	4b15      	ldr	r3, [pc, #84]	; (800e468 <initialise_monitor_handles+0xb4>)
 800e414:	f8cd 9004 	str.w	r9, [sp, #4]
 800e418:	f8c3 b000 	str.w	fp, [r3]
 800e41c:	2308      	movs	r3, #8
 800e41e:	f8cd a00c 	str.w	sl, [sp, #12]
 800e422:	9302      	str	r3, [sp, #8]
 800e424:	4630      	mov	r0, r6
 800e426:	4639      	mov	r1, r7
 800e428:	beab      	bkpt	0x00ab
 800e42a:	4606      	mov	r6, r0
 800e42c:	602e      	str	r6, [r5, #0]
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	2600      	movs	r6, #0
 800e432:	3301      	adds	r3, #1
 800e434:	6066      	str	r6, [r4, #4]
 800e436:	bf02      	ittt	eq
 800e438:	4b0b      	ldreq	r3, [pc, #44]	; (800e468 <initialise_monitor_handles+0xb4>)
 800e43a:	681b      	ldreq	r3, [r3, #0]
 800e43c:	602b      	streq	r3, [r5, #0]
 800e43e:	f8d8 3000 	ldr.w	r3, [r8]
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	f7ff ffaa 	bl	800e39c <_has_ext_stdout_stderr>
 800e448:	b130      	cbz	r0, 800e458 <initialise_monitor_handles+0xa4>
 800e44a:	4b07      	ldr	r3, [pc, #28]	; (800e468 <initialise_monitor_handles+0xb4>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800e452:	682b      	ldr	r3, [r5, #0]
 800e454:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800e458:	b005      	add	sp, #20
 800e45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45e:	bf00      	nop
 800e460:	20001080 	.word	0x20001080
 800e464:	20001074 	.word	0x20001074
 800e468:	2000107c 	.word	0x2000107c
 800e46c:	0800fe2d 	.word	0x0800fe2d
 800e470:	20001078 	.word	0x20001078

0800e474 <_isatty>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	f7ff fd69 	bl	800df4c <findslot>
 800e47a:	2509      	movs	r5, #9
 800e47c:	4604      	mov	r4, r0
 800e47e:	b920      	cbnz	r0, 800e48a <_isatty+0x16>
 800e480:	f7fd fcaa 	bl	800bdd8 <__errno>
 800e484:	6005      	str	r5, [r0, #0]
 800e486:	4620      	mov	r0, r4
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	4628      	mov	r0, r5
 800e48c:	4621      	mov	r1, r4
 800e48e:	beab      	bkpt	0x00ab
 800e490:	4604      	mov	r4, r0
 800e492:	2c01      	cmp	r4, #1
 800e494:	d0f7      	beq.n	800e486 <_isatty+0x12>
 800e496:	f7fd fc9f 	bl	800bdd8 <__errno>
 800e49a:	2400      	movs	r4, #0
 800e49c:	4605      	mov	r5, r0
 800e49e:	2613      	movs	r6, #19
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	beab      	bkpt	0x00ab
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	602e      	str	r6, [r5, #0]
 800e4aa:	e7ec      	b.n	800e486 <_isatty+0x12>

0800e4ac <_exit>:
 800e4ac:	4601      	mov	r1, r0
 800e4ae:	4a03      	ldr	r2, [pc, #12]	; (800e4bc <_exit+0x10>)
 800e4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4b4:	b508      	push	{r3, lr}
 800e4b6:	f000 f803 	bl	800e4c0 <_kill_shared>
 800e4ba:	bf00      	nop
 800e4bc:	00020026 	.word	0x00020026

0800e4c0 <_kill_shared>:
 800e4c0:	b507      	push	{r0, r1, r2, lr}
 800e4c2:	e9cd 2100 	strd	r2, r1, [sp]
 800e4c6:	f7ff ff5d 	bl	800e384 <_has_ext_exit_extended>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	bf14      	ite	ne
 800e4ce:	2420      	movne	r4, #32
 800e4d0:	2418      	moveq	r4, #24
 800e4d2:	f7ff ff57 	bl	800e384 <_has_ext_exit_extended>
 800e4d6:	b120      	cbz	r0, 800e4e2 <_kill_shared+0x22>
 800e4d8:	466d      	mov	r5, sp
 800e4da:	4620      	mov	r0, r4
 800e4dc:	4629      	mov	r1, r5
 800e4de:	beab      	bkpt	0x00ab
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	9d00      	ldr	r5, [sp, #0]
 800e4e4:	e7f9      	b.n	800e4da <_kill_shared+0x1a>
	...

0800e4e8 <_kill>:
 800e4e8:	2906      	cmp	r1, #6
 800e4ea:	b508      	push	{r3, lr}
 800e4ec:	bf0c      	ite	eq
 800e4ee:	4a02      	ldreq	r2, [pc, #8]	; (800e4f8 <_kill+0x10>)
 800e4f0:	4a02      	ldrne	r2, [pc, #8]	; (800e4fc <_kill+0x14>)
 800e4f2:	f7ff ffe5 	bl	800e4c0 <_kill_shared>
 800e4f6:	bf00      	nop
 800e4f8:	00020023 	.word	0x00020023
 800e4fc:	00020026 	.word	0x00020026

0800e500 <pow>:
 800e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e502:	ec55 4b11 	vmov	r4, r5, d1
 800e506:	ed2d 8b02 	vpush	{d8}
 800e50a:	eeb0 8a40 	vmov.f32	s16, s0
 800e50e:	eef0 8a60 	vmov.f32	s17, s1
 800e512:	f000 f97d 	bl	800e810 <__ieee754_pow>
 800e516:	4622      	mov	r2, r4
 800e518:	462b      	mov	r3, r5
 800e51a:	4620      	mov	r0, r4
 800e51c:	4629      	mov	r1, r5
 800e51e:	ec57 6b10 	vmov	r6, r7, d0
 800e522:	f7f2 fb07 	bl	8000b34 <__aeabi_dcmpun>
 800e526:	2800      	cmp	r0, #0
 800e528:	d13b      	bne.n	800e5a2 <pow+0xa2>
 800e52a:	2200      	movs	r2, #0
 800e52c:	2300      	movs	r3, #0
 800e52e:	ec51 0b18 	vmov	r0, r1, d8
 800e532:	f7f2 facd 	bl	8000ad0 <__aeabi_dcmpeq>
 800e536:	b1b8      	cbz	r0, 800e568 <pow+0x68>
 800e538:	2200      	movs	r2, #0
 800e53a:	2300      	movs	r3, #0
 800e53c:	4620      	mov	r0, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	f7f2 fac6 	bl	8000ad0 <__aeabi_dcmpeq>
 800e544:	2800      	cmp	r0, #0
 800e546:	d146      	bne.n	800e5d6 <pow+0xd6>
 800e548:	ec45 4b10 	vmov	d0, r4, r5
 800e54c:	f000 f874 	bl	800e638 <finite>
 800e550:	b338      	cbz	r0, 800e5a2 <pow+0xa2>
 800e552:	2200      	movs	r2, #0
 800e554:	2300      	movs	r3, #0
 800e556:	4620      	mov	r0, r4
 800e558:	4629      	mov	r1, r5
 800e55a:	f7f2 fac3 	bl	8000ae4 <__aeabi_dcmplt>
 800e55e:	b300      	cbz	r0, 800e5a2 <pow+0xa2>
 800e560:	f7fd fc3a 	bl	800bdd8 <__errno>
 800e564:	2322      	movs	r3, #34	; 0x22
 800e566:	e01b      	b.n	800e5a0 <pow+0xa0>
 800e568:	ec47 6b10 	vmov	d0, r6, r7
 800e56c:	f000 f864 	bl	800e638 <finite>
 800e570:	b9e0      	cbnz	r0, 800e5ac <pow+0xac>
 800e572:	eeb0 0a48 	vmov.f32	s0, s16
 800e576:	eef0 0a68 	vmov.f32	s1, s17
 800e57a:	f000 f85d 	bl	800e638 <finite>
 800e57e:	b1a8      	cbz	r0, 800e5ac <pow+0xac>
 800e580:	ec45 4b10 	vmov	d0, r4, r5
 800e584:	f000 f858 	bl	800e638 <finite>
 800e588:	b180      	cbz	r0, 800e5ac <pow+0xac>
 800e58a:	4632      	mov	r2, r6
 800e58c:	463b      	mov	r3, r7
 800e58e:	4630      	mov	r0, r6
 800e590:	4639      	mov	r1, r7
 800e592:	f7f2 facf 	bl	8000b34 <__aeabi_dcmpun>
 800e596:	2800      	cmp	r0, #0
 800e598:	d0e2      	beq.n	800e560 <pow+0x60>
 800e59a:	f7fd fc1d 	bl	800bdd8 <__errno>
 800e59e:	2321      	movs	r3, #33	; 0x21
 800e5a0:	6003      	str	r3, [r0, #0]
 800e5a2:	ecbd 8b02 	vpop	{d8}
 800e5a6:	ec47 6b10 	vmov	d0, r6, r7
 800e5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	4639      	mov	r1, r7
 800e5b4:	f7f2 fa8c 	bl	8000ad0 <__aeabi_dcmpeq>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d0f2      	beq.n	800e5a2 <pow+0xa2>
 800e5bc:	eeb0 0a48 	vmov.f32	s0, s16
 800e5c0:	eef0 0a68 	vmov.f32	s1, s17
 800e5c4:	f000 f838 	bl	800e638 <finite>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d0ea      	beq.n	800e5a2 <pow+0xa2>
 800e5cc:	ec45 4b10 	vmov	d0, r4, r5
 800e5d0:	f000 f832 	bl	800e638 <finite>
 800e5d4:	e7c3      	b.n	800e55e <pow+0x5e>
 800e5d6:	2600      	movs	r6, #0
 800e5d8:	4f00      	ldr	r7, [pc, #0]	; (800e5dc <pow+0xdc>)
 800e5da:	e7e2      	b.n	800e5a2 <pow+0xa2>
 800e5dc:	3ff00000 	.word	0x3ff00000

0800e5e0 <sqrt>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	ec55 4b10 	vmov	r4, r5, d0
 800e5e6:	ed2d 8b02 	vpush	{d8}
 800e5ea:	f000 f831 	bl	800e650 <__ieee754_sqrt>
 800e5ee:	4622      	mov	r2, r4
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	eeb0 8a40 	vmov.f32	s16, s0
 800e5fa:	eef0 8a60 	vmov.f32	s17, s1
 800e5fe:	f7f2 fa99 	bl	8000b34 <__aeabi_dcmpun>
 800e602:	b990      	cbnz	r0, 800e62a <sqrt+0x4a>
 800e604:	2200      	movs	r2, #0
 800e606:	2300      	movs	r3, #0
 800e608:	4620      	mov	r0, r4
 800e60a:	4629      	mov	r1, r5
 800e60c:	f7f2 fa6a 	bl	8000ae4 <__aeabi_dcmplt>
 800e610:	b158      	cbz	r0, 800e62a <sqrt+0x4a>
 800e612:	f7fd fbe1 	bl	800bdd8 <__errno>
 800e616:	2321      	movs	r3, #33	; 0x21
 800e618:	2200      	movs	r2, #0
 800e61a:	6003      	str	r3, [r0, #0]
 800e61c:	2300      	movs	r3, #0
 800e61e:	4610      	mov	r0, r2
 800e620:	4619      	mov	r1, r3
 800e622:	f7f2 f917 	bl	8000854 <__aeabi_ddiv>
 800e626:	ec41 0b18 	vmov	d8, r0, r1
 800e62a:	eeb0 0a48 	vmov.f32	s0, s16
 800e62e:	eef0 0a68 	vmov.f32	s1, s17
 800e632:	ecbd 8b02 	vpop	{d8}
 800e636:	bd38      	pop	{r3, r4, r5, pc}

0800e638 <finite>:
 800e638:	b082      	sub	sp, #8
 800e63a:	ed8d 0b00 	vstr	d0, [sp]
 800e63e:	9801      	ldr	r0, [sp, #4]
 800e640:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e644:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e648:	0fc0      	lsrs	r0, r0, #31
 800e64a:	b002      	add	sp, #8
 800e64c:	4770      	bx	lr
	...

0800e650 <__ieee754_sqrt>:
 800e650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	4e6b      	ldr	r6, [pc, #428]	; (800e804 <__ieee754_sqrt+0x1b4>)
 800e656:	ee10 0a10 	vmov	r0, s0
 800e65a:	ee10 2a10 	vmov	r2, s0
 800e65e:	ec55 4b10 	vmov	r4, r5, d0
 800e662:	43ae      	bics	r6, r5
 800e664:	4629      	mov	r1, r5
 800e666:	462b      	mov	r3, r5
 800e668:	d10d      	bne.n	800e686 <__ieee754_sqrt+0x36>
 800e66a:	f7f1 ffc9 	bl	8000600 <__aeabi_dmul>
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	4620      	mov	r0, r4
 800e674:	4629      	mov	r1, r5
 800e676:	f7f1 fe0d 	bl	8000294 <__adddf3>
 800e67a:	4604      	mov	r4, r0
 800e67c:	460d      	mov	r5, r1
 800e67e:	ec45 4b10 	vmov	d0, r4, r5
 800e682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e686:	2d00      	cmp	r5, #0
 800e688:	dc0b      	bgt.n	800e6a2 <__ieee754_sqrt+0x52>
 800e68a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e68e:	4326      	orrs	r6, r4
 800e690:	d0f5      	beq.n	800e67e <__ieee754_sqrt+0x2e>
 800e692:	b135      	cbz	r5, 800e6a2 <__ieee754_sqrt+0x52>
 800e694:	f7f1 fdfc 	bl	8000290 <__aeabi_dsub>
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	f7f2 f8da 	bl	8000854 <__aeabi_ddiv>
 800e6a0:	e7eb      	b.n	800e67a <__ieee754_sqrt+0x2a>
 800e6a2:	1509      	asrs	r1, r1, #20
 800e6a4:	f000 8091 	beq.w	800e7ca <__ieee754_sqrt+0x17a>
 800e6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6ac:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e6b0:	07c9      	lsls	r1, r1, #31
 800e6b2:	f04f 0500 	mov.w	r5, #0
 800e6b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6ba:	ea4f 0666 	mov.w	r6, r6, asr #1
 800e6be:	f04f 0e16 	mov.w	lr, #22
 800e6c2:	46ac      	mov	ip, r5
 800e6c4:	bf58      	it	pl
 800e6c6:	005b      	lslpl	r3, r3, #1
 800e6c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e6cc:	bf5c      	itt	pl
 800e6ce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e6d2:	0052      	lslpl	r2, r2, #1
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e6da:	0052      	lsls	r2, r2, #1
 800e6dc:	eb0c 0001 	add.w	r0, ip, r1
 800e6e0:	4298      	cmp	r0, r3
 800e6e2:	bfde      	ittt	le
 800e6e4:	1a1b      	suble	r3, r3, r0
 800e6e6:	eb00 0c01 	addle.w	ip, r0, r1
 800e6ea:	186d      	addle	r5, r5, r1
 800e6ec:	f1be 0e01 	subs.w	lr, lr, #1
 800e6f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e6f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e6f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e6fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e700:	d1ec      	bne.n	800e6dc <__ieee754_sqrt+0x8c>
 800e702:	4674      	mov	r4, lr
 800e704:	2720      	movs	r7, #32
 800e706:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e70a:	4563      	cmp	r3, ip
 800e70c:	eb01 000e 	add.w	r0, r1, lr
 800e710:	dc02      	bgt.n	800e718 <__ieee754_sqrt+0xc8>
 800e712:	d114      	bne.n	800e73e <__ieee754_sqrt+0xee>
 800e714:	4290      	cmp	r0, r2
 800e716:	d812      	bhi.n	800e73e <__ieee754_sqrt+0xee>
 800e718:	2800      	cmp	r0, #0
 800e71a:	eb00 0e01 	add.w	lr, r0, r1
 800e71e:	da59      	bge.n	800e7d4 <__ieee754_sqrt+0x184>
 800e720:	f1be 0f00 	cmp.w	lr, #0
 800e724:	db56      	blt.n	800e7d4 <__ieee754_sqrt+0x184>
 800e726:	f10c 0801 	add.w	r8, ip, #1
 800e72a:	eba3 030c 	sub.w	r3, r3, ip
 800e72e:	4290      	cmp	r0, r2
 800e730:	440c      	add	r4, r1
 800e732:	eba2 0200 	sub.w	r2, r2, r0
 800e736:	bf88      	it	hi
 800e738:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800e73c:	46c4      	mov	ip, r8
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	3f01      	subs	r7, #1
 800e742:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e746:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e74a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e74e:	d1dc      	bne.n	800e70a <__ieee754_sqrt+0xba>
 800e750:	4313      	orrs	r3, r2
 800e752:	d01b      	beq.n	800e78c <__ieee754_sqrt+0x13c>
 800e754:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800e808 <__ieee754_sqrt+0x1b8>
 800e758:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800e80c <__ieee754_sqrt+0x1bc>
 800e75c:	e9da 0100 	ldrd	r0, r1, [sl]
 800e760:	e9db 2300 	ldrd	r2, r3, [fp]
 800e764:	e9da 8900 	ldrd	r8, r9, [sl]
 800e768:	f7f1 fd92 	bl	8000290 <__aeabi_dsub>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4640      	mov	r0, r8
 800e772:	4649      	mov	r1, r9
 800e774:	f7f2 f9c0 	bl	8000af8 <__aeabi_dcmple>
 800e778:	b140      	cbz	r0, 800e78c <__ieee754_sqrt+0x13c>
 800e77a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800e77e:	e9da 0100 	ldrd	r0, r1, [sl]
 800e782:	e9db 2300 	ldrd	r2, r3, [fp]
 800e786:	d127      	bne.n	800e7d8 <__ieee754_sqrt+0x188>
 800e788:	3501      	adds	r5, #1
 800e78a:	463c      	mov	r4, r7
 800e78c:	106a      	asrs	r2, r5, #1
 800e78e:	07e9      	lsls	r1, r5, #31
 800e790:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800e794:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e798:	bf48      	it	mi
 800e79a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e79e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e7a2:	461c      	mov	r4, r3
 800e7a4:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e7a8:	e769      	b.n	800e67e <__ieee754_sqrt+0x2e>
 800e7aa:	0ad3      	lsrs	r3, r2, #11
 800e7ac:	3815      	subs	r0, #21
 800e7ae:	0552      	lsls	r2, r2, #21
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0fa      	beq.n	800e7aa <__ieee754_sqrt+0x15a>
 800e7b4:	02dc      	lsls	r4, r3, #11
 800e7b6:	d50a      	bpl.n	800e7ce <__ieee754_sqrt+0x17e>
 800e7b8:	f1c1 0420 	rsb	r4, r1, #32
 800e7bc:	1e4d      	subs	r5, r1, #1
 800e7be:	fa22 f404 	lsr.w	r4, r2, r4
 800e7c2:	408a      	lsls	r2, r1
 800e7c4:	1b41      	subs	r1, r0, r5
 800e7c6:	4323      	orrs	r3, r4
 800e7c8:	e76e      	b.n	800e6a8 <__ieee754_sqrt+0x58>
 800e7ca:	4608      	mov	r0, r1
 800e7cc:	e7f0      	b.n	800e7b0 <__ieee754_sqrt+0x160>
 800e7ce:	005b      	lsls	r3, r3, #1
 800e7d0:	3101      	adds	r1, #1
 800e7d2:	e7ef      	b.n	800e7b4 <__ieee754_sqrt+0x164>
 800e7d4:	46e0      	mov	r8, ip
 800e7d6:	e7a8      	b.n	800e72a <__ieee754_sqrt+0xda>
 800e7d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7dc:	f7f1 fd5a 	bl	8000294 <__adddf3>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	f7f2 f97c 	bl	8000ae4 <__aeabi_dcmplt>
 800e7ec:	b128      	cbz	r0, 800e7fa <__ieee754_sqrt+0x1aa>
 800e7ee:	1ca0      	adds	r0, r4, #2
 800e7f0:	f104 0402 	add.w	r4, r4, #2
 800e7f4:	bf08      	it	eq
 800e7f6:	3501      	addeq	r5, #1
 800e7f8:	e7c8      	b.n	800e78c <__ieee754_sqrt+0x13c>
 800e7fa:	3401      	adds	r4, #1
 800e7fc:	f024 0401 	bic.w	r4, r4, #1
 800e800:	e7c4      	b.n	800e78c <__ieee754_sqrt+0x13c>
 800e802:	bf00      	nop
 800e804:	7ff00000 	.word	0x7ff00000
 800e808:	20000280 	.word	0x20000280
 800e80c:	20000288 	.word	0x20000288

0800e810 <__ieee754_pow>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	ed2d 8b06 	vpush	{d8-d10}
 800e818:	b089      	sub	sp, #36	; 0x24
 800e81a:	ed8d 1b00 	vstr	d1, [sp]
 800e81e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e822:	ec57 6b10 	vmov	r6, r7, d0
 800e826:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e82a:	ea58 0102 	orrs.w	r1, r8, r2
 800e82e:	d115      	bne.n	800e85c <__ieee754_pow+0x4c>
 800e830:	19b3      	adds	r3, r6, r6
 800e832:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e836:	4152      	adcs	r2, r2
 800e838:	4299      	cmp	r1, r3
 800e83a:	4b89      	ldr	r3, [pc, #548]	; (800ea60 <__ieee754_pow+0x250>)
 800e83c:	4193      	sbcs	r3, r2
 800e83e:	f080 84d2 	bcs.w	800f1e6 <__ieee754_pow+0x9d6>
 800e842:	4630      	mov	r0, r6
 800e844:	4639      	mov	r1, r7
 800e846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e84a:	f7f1 fd23 	bl	8000294 <__adddf3>
 800e84e:	ec41 0b10 	vmov	d0, r0, r1
 800e852:	b009      	add	sp, #36	; 0x24
 800e854:	ecbd 8b06 	vpop	{d8-d10}
 800e858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e860:	4b80      	ldr	r3, [pc, #512]	; (800ea64 <__ieee754_pow+0x254>)
 800e862:	463d      	mov	r5, r7
 800e864:	ee10 aa10 	vmov	sl, s0
 800e868:	429c      	cmp	r4, r3
 800e86a:	dc06      	bgt.n	800e87a <__ieee754_pow+0x6a>
 800e86c:	d101      	bne.n	800e872 <__ieee754_pow+0x62>
 800e86e:	2e00      	cmp	r6, #0
 800e870:	d1e7      	bne.n	800e842 <__ieee754_pow+0x32>
 800e872:	4598      	cmp	r8, r3
 800e874:	dc01      	bgt.n	800e87a <__ieee754_pow+0x6a>
 800e876:	d10f      	bne.n	800e898 <__ieee754_pow+0x88>
 800e878:	b172      	cbz	r2, 800e898 <__ieee754_pow+0x88>
 800e87a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e87e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e882:	ea55 050a 	orrs.w	r5, r5, sl
 800e886:	d1dc      	bne.n	800e842 <__ieee754_pow+0x32>
 800e888:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e88c:	18db      	adds	r3, r3, r3
 800e88e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e892:	4152      	adcs	r2, r2
 800e894:	429d      	cmp	r5, r3
 800e896:	e7d0      	b.n	800e83a <__ieee754_pow+0x2a>
 800e898:	2d00      	cmp	r5, #0
 800e89a:	da3b      	bge.n	800e914 <__ieee754_pow+0x104>
 800e89c:	4b72      	ldr	r3, [pc, #456]	; (800ea68 <__ieee754_pow+0x258>)
 800e89e:	4598      	cmp	r8, r3
 800e8a0:	dc51      	bgt.n	800e946 <__ieee754_pow+0x136>
 800e8a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e8a6:	4598      	cmp	r8, r3
 800e8a8:	f340 84ac 	ble.w	800f204 <__ieee754_pow+0x9f4>
 800e8ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e8b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e8b4:	2b14      	cmp	r3, #20
 800e8b6:	dd0f      	ble.n	800e8d8 <__ieee754_pow+0xc8>
 800e8b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e8bc:	fa22 f103 	lsr.w	r1, r2, r3
 800e8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	f040 849d 	bne.w	800f204 <__ieee754_pow+0x9f4>
 800e8ca:	f001 0101 	and.w	r1, r1, #1
 800e8ce:	f1c1 0302 	rsb	r3, r1, #2
 800e8d2:	9304      	str	r3, [sp, #16]
 800e8d4:	b182      	cbz	r2, 800e8f8 <__ieee754_pow+0xe8>
 800e8d6:	e05f      	b.n	800e998 <__ieee754_pow+0x188>
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	d15b      	bne.n	800e994 <__ieee754_pow+0x184>
 800e8dc:	f1c3 0314 	rsb	r3, r3, #20
 800e8e0:	fa48 f103 	asr.w	r1, r8, r3
 800e8e4:	fa01 f303 	lsl.w	r3, r1, r3
 800e8e8:	4543      	cmp	r3, r8
 800e8ea:	f040 8488 	bne.w	800f1fe <__ieee754_pow+0x9ee>
 800e8ee:	f001 0101 	and.w	r1, r1, #1
 800e8f2:	f1c1 0302 	rsb	r3, r1, #2
 800e8f6:	9304      	str	r3, [sp, #16]
 800e8f8:	4b5c      	ldr	r3, [pc, #368]	; (800ea6c <__ieee754_pow+0x25c>)
 800e8fa:	4598      	cmp	r8, r3
 800e8fc:	d132      	bne.n	800e964 <__ieee754_pow+0x154>
 800e8fe:	f1b9 0f00 	cmp.w	r9, #0
 800e902:	f280 8478 	bge.w	800f1f6 <__ieee754_pow+0x9e6>
 800e906:	4632      	mov	r2, r6
 800e908:	463b      	mov	r3, r7
 800e90a:	2000      	movs	r0, #0
 800e90c:	4957      	ldr	r1, [pc, #348]	; (800ea6c <__ieee754_pow+0x25c>)
 800e90e:	f7f1 ffa1 	bl	8000854 <__aeabi_ddiv>
 800e912:	e79c      	b.n	800e84e <__ieee754_pow+0x3e>
 800e914:	2300      	movs	r3, #0
 800e916:	9304      	str	r3, [sp, #16]
 800e918:	2a00      	cmp	r2, #0
 800e91a:	d13d      	bne.n	800e998 <__ieee754_pow+0x188>
 800e91c:	4b51      	ldr	r3, [pc, #324]	; (800ea64 <__ieee754_pow+0x254>)
 800e91e:	4598      	cmp	r8, r3
 800e920:	d1ea      	bne.n	800e8f8 <__ieee754_pow+0xe8>
 800e922:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e926:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e92a:	ea53 030a 	orrs.w	r3, r3, sl
 800e92e:	f000 845a 	beq.w	800f1e6 <__ieee754_pow+0x9d6>
 800e932:	4b4f      	ldr	r3, [pc, #316]	; (800ea70 <__ieee754_pow+0x260>)
 800e934:	429c      	cmp	r4, r3
 800e936:	dd08      	ble.n	800e94a <__ieee754_pow+0x13a>
 800e938:	f1b9 0f00 	cmp.w	r9, #0
 800e93c:	f2c0 8457 	blt.w	800f1ee <__ieee754_pow+0x9de>
 800e940:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e944:	e783      	b.n	800e84e <__ieee754_pow+0x3e>
 800e946:	2302      	movs	r3, #2
 800e948:	e7e5      	b.n	800e916 <__ieee754_pow+0x106>
 800e94a:	f1b9 0f00 	cmp.w	r9, #0
 800e94e:	f04f 0000 	mov.w	r0, #0
 800e952:	f04f 0100 	mov.w	r1, #0
 800e956:	f6bf af7a 	bge.w	800e84e <__ieee754_pow+0x3e>
 800e95a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e95e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e962:	e774      	b.n	800e84e <__ieee754_pow+0x3e>
 800e964:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e968:	d106      	bne.n	800e978 <__ieee754_pow+0x168>
 800e96a:	4632      	mov	r2, r6
 800e96c:	463b      	mov	r3, r7
 800e96e:	4630      	mov	r0, r6
 800e970:	4639      	mov	r1, r7
 800e972:	f7f1 fe45 	bl	8000600 <__aeabi_dmul>
 800e976:	e76a      	b.n	800e84e <__ieee754_pow+0x3e>
 800e978:	4b3e      	ldr	r3, [pc, #248]	; (800ea74 <__ieee754_pow+0x264>)
 800e97a:	4599      	cmp	r9, r3
 800e97c:	d10c      	bne.n	800e998 <__ieee754_pow+0x188>
 800e97e:	2d00      	cmp	r5, #0
 800e980:	db0a      	blt.n	800e998 <__ieee754_pow+0x188>
 800e982:	ec47 6b10 	vmov	d0, r6, r7
 800e986:	b009      	add	sp, #36	; 0x24
 800e988:	ecbd 8b06 	vpop	{d8-d10}
 800e98c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e990:	f7ff be5e 	b.w	800e650 <__ieee754_sqrt>
 800e994:	2300      	movs	r3, #0
 800e996:	9304      	str	r3, [sp, #16]
 800e998:	ec47 6b10 	vmov	d0, r6, r7
 800e99c:	f000 fc96 	bl	800f2cc <fabs>
 800e9a0:	ec51 0b10 	vmov	r0, r1, d0
 800e9a4:	f1ba 0f00 	cmp.w	sl, #0
 800e9a8:	d129      	bne.n	800e9fe <__ieee754_pow+0x1ee>
 800e9aa:	b124      	cbz	r4, 800e9b6 <__ieee754_pow+0x1a6>
 800e9ac:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e9b0:	4b2e      	ldr	r3, [pc, #184]	; (800ea6c <__ieee754_pow+0x25c>)
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d123      	bne.n	800e9fe <__ieee754_pow+0x1ee>
 800e9b6:	f1b9 0f00 	cmp.w	r9, #0
 800e9ba:	da05      	bge.n	800e9c8 <__ieee754_pow+0x1b8>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	492a      	ldr	r1, [pc, #168]	; (800ea6c <__ieee754_pow+0x25c>)
 800e9c4:	f7f1 ff46 	bl	8000854 <__aeabi_ddiv>
 800e9c8:	2d00      	cmp	r5, #0
 800e9ca:	f6bf af40 	bge.w	800e84e <__ieee754_pow+0x3e>
 800e9ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e9d2:	9b04      	ldr	r3, [sp, #16]
 800e9d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e9d8:	431c      	orrs	r4, r3
 800e9da:	d108      	bne.n	800e9ee <__ieee754_pow+0x1de>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4610      	mov	r0, r2
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	f7f1 fc54 	bl	8000290 <__aeabi_dsub>
 800e9e8:	4602      	mov	r2, r0
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	e78f      	b.n	800e90e <__ieee754_pow+0xfe>
 800e9ee:	9b04      	ldr	r3, [sp, #16]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	f47f af2c 	bne.w	800e84e <__ieee754_pow+0x3e>
 800e9f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	e727      	b.n	800e84e <__ieee754_pow+0x3e>
 800e9fe:	0feb      	lsrs	r3, r5, #31
 800ea00:	3b01      	subs	r3, #1
 800ea02:	9306      	str	r3, [sp, #24]
 800ea04:	9a06      	ldr	r2, [sp, #24]
 800ea06:	9b04      	ldr	r3, [sp, #16]
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	d102      	bne.n	800ea12 <__ieee754_pow+0x202>
 800ea0c:	4632      	mov	r2, r6
 800ea0e:	463b      	mov	r3, r7
 800ea10:	e7e6      	b.n	800e9e0 <__ieee754_pow+0x1d0>
 800ea12:	4b19      	ldr	r3, [pc, #100]	; (800ea78 <__ieee754_pow+0x268>)
 800ea14:	4598      	cmp	r8, r3
 800ea16:	f340 80fb 	ble.w	800ec10 <__ieee754_pow+0x400>
 800ea1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ea1e:	4598      	cmp	r8, r3
 800ea20:	4b13      	ldr	r3, [pc, #76]	; (800ea70 <__ieee754_pow+0x260>)
 800ea22:	dd0c      	ble.n	800ea3e <__ieee754_pow+0x22e>
 800ea24:	429c      	cmp	r4, r3
 800ea26:	dc0f      	bgt.n	800ea48 <__ieee754_pow+0x238>
 800ea28:	f1b9 0f00 	cmp.w	r9, #0
 800ea2c:	da0f      	bge.n	800ea4e <__ieee754_pow+0x23e>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	b009      	add	sp, #36	; 0x24
 800ea32:	ecbd 8b06 	vpop	{d8-d10}
 800ea36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3a:	f000 bc3e 	b.w	800f2ba <__math_oflow>
 800ea3e:	429c      	cmp	r4, r3
 800ea40:	dbf2      	blt.n	800ea28 <__ieee754_pow+0x218>
 800ea42:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <__ieee754_pow+0x25c>)
 800ea44:	429c      	cmp	r4, r3
 800ea46:	dd19      	ble.n	800ea7c <__ieee754_pow+0x26c>
 800ea48:	f1b9 0f00 	cmp.w	r9, #0
 800ea4c:	dcef      	bgt.n	800ea2e <__ieee754_pow+0x21e>
 800ea4e:	2000      	movs	r0, #0
 800ea50:	b009      	add	sp, #36	; 0x24
 800ea52:	ecbd 8b06 	vpop	{d8-d10}
 800ea56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5a:	f000 bc25 	b.w	800f2a8 <__math_uflow>
 800ea5e:	bf00      	nop
 800ea60:	fff00000 	.word	0xfff00000
 800ea64:	7ff00000 	.word	0x7ff00000
 800ea68:	433fffff 	.word	0x433fffff
 800ea6c:	3ff00000 	.word	0x3ff00000
 800ea70:	3fefffff 	.word	0x3fefffff
 800ea74:	3fe00000 	.word	0x3fe00000
 800ea78:	41e00000 	.word	0x41e00000
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	4b60      	ldr	r3, [pc, #384]	; (800ec00 <__ieee754_pow+0x3f0>)
 800ea80:	f7f1 fc06 	bl	8000290 <__aeabi_dsub>
 800ea84:	4604      	mov	r4, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	a353      	add	r3, pc, #332	; (adr r3, 800ebd8 <__ieee754_pow+0x3c8>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	f7f1 fdb7 	bl	8000600 <__aeabi_dmul>
 800ea92:	4606      	mov	r6, r0
 800ea94:	460f      	mov	r7, r1
 800ea96:	4620      	mov	r0, r4
 800ea98:	4629      	mov	r1, r5
 800ea9a:	a351      	add	r3, pc, #324	; (adr r3, 800ebe0 <__ieee754_pow+0x3d0>)
 800ea9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa0:	f7f1 fdae 	bl	8000600 <__aeabi_dmul>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	4682      	mov	sl, r0
 800eaa8:	468b      	mov	fp, r1
 800eaaa:	4b56      	ldr	r3, [pc, #344]	; (800ec04 <__ieee754_pow+0x3f4>)
 800eaac:	4620      	mov	r0, r4
 800eaae:	4629      	mov	r1, r5
 800eab0:	f7f1 fda6 	bl	8000600 <__aeabi_dmul>
 800eab4:	4602      	mov	r2, r0
 800eab6:	460b      	mov	r3, r1
 800eab8:	a14b      	add	r1, pc, #300	; (adr r1, 800ebe8 <__ieee754_pow+0x3d8>)
 800eaba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eabe:	f7f1 fbe7 	bl	8000290 <__aeabi_dsub>
 800eac2:	4622      	mov	r2, r4
 800eac4:	462b      	mov	r3, r5
 800eac6:	f7f1 fd9b 	bl	8000600 <__aeabi_dmul>
 800eaca:	4602      	mov	r2, r0
 800eacc:	460b      	mov	r3, r1
 800eace:	2000      	movs	r0, #0
 800ead0:	494d      	ldr	r1, [pc, #308]	; (800ec08 <__ieee754_pow+0x3f8>)
 800ead2:	f7f1 fbdd 	bl	8000290 <__aeabi_dsub>
 800ead6:	4680      	mov	r8, r0
 800ead8:	4689      	mov	r9, r1
 800eada:	4622      	mov	r2, r4
 800eadc:	462b      	mov	r3, r5
 800eade:	4620      	mov	r0, r4
 800eae0:	4629      	mov	r1, r5
 800eae2:	f7f1 fd8d 	bl	8000600 <__aeabi_dmul>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	4640      	mov	r0, r8
 800eaec:	4649      	mov	r1, r9
 800eaee:	f7f1 fd87 	bl	8000600 <__aeabi_dmul>
 800eaf2:	a33f      	add	r3, pc, #252	; (adr r3, 800ebf0 <__ieee754_pow+0x3e0>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f7f1 fd82 	bl	8000600 <__aeabi_dmul>
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
 800eb00:	4650      	mov	r0, sl
 800eb02:	4659      	mov	r1, fp
 800eb04:	f7f1 fbc4 	bl	8000290 <__aeabi_dsub>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4680      	mov	r8, r0
 800eb0e:	4689      	mov	r9, r1
 800eb10:	4630      	mov	r0, r6
 800eb12:	4639      	mov	r1, r7
 800eb14:	f7f1 fbbe 	bl	8000294 <__adddf3>
 800eb18:	2000      	movs	r0, #0
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	463b      	mov	r3, r7
 800eb1e:	4604      	mov	r4, r0
 800eb20:	460d      	mov	r5, r1
 800eb22:	f7f1 fbb5 	bl	8000290 <__aeabi_dsub>
 800eb26:	4602      	mov	r2, r0
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4640      	mov	r0, r8
 800eb2c:	4649      	mov	r1, r9
 800eb2e:	f7f1 fbaf 	bl	8000290 <__aeabi_dsub>
 800eb32:	9b04      	ldr	r3, [sp, #16]
 800eb34:	9a06      	ldr	r2, [sp, #24]
 800eb36:	4682      	mov	sl, r0
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	468b      	mov	fp, r1
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	f040 81e7 	bne.w	800ef10 <__ieee754_pow+0x700>
 800eb42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ebf8 <__ieee754_pow+0x3e8>
 800eb46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb4a:	2600      	movs	r6, #0
 800eb4c:	eeb0 8a47 	vmov.f32	s16, s14
 800eb50:	eef0 8a67 	vmov.f32	s17, s15
 800eb54:	463b      	mov	r3, r7
 800eb56:	4632      	mov	r2, r6
 800eb58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb5c:	f7f1 fb98 	bl	8000290 <__aeabi_dsub>
 800eb60:	4622      	mov	r2, r4
 800eb62:	462b      	mov	r3, r5
 800eb64:	f7f1 fd4c 	bl	8000600 <__aeabi_dmul>
 800eb68:	4680      	mov	r8, r0
 800eb6a:	4689      	mov	r9, r1
 800eb6c:	4650      	mov	r0, sl
 800eb6e:	4659      	mov	r1, fp
 800eb70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb74:	f7f1 fd44 	bl	8000600 <__aeabi_dmul>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	4649      	mov	r1, r9
 800eb80:	f7f1 fb88 	bl	8000294 <__adddf3>
 800eb84:	4680      	mov	r8, r0
 800eb86:	4689      	mov	r9, r1
 800eb88:	4632      	mov	r2, r6
 800eb8a:	463b      	mov	r3, r7
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	4629      	mov	r1, r5
 800eb90:	f7f1 fd36 	bl	8000600 <__aeabi_dmul>
 800eb94:	460b      	mov	r3, r1
 800eb96:	4604      	mov	r4, r0
 800eb98:	460d      	mov	r5, r1
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	4649      	mov	r1, r9
 800eb9e:	4640      	mov	r0, r8
 800eba0:	f7f1 fb78 	bl	8000294 <__adddf3>
 800eba4:	4b19      	ldr	r3, [pc, #100]	; (800ec0c <__ieee754_pow+0x3fc>)
 800eba6:	4606      	mov	r6, r0
 800eba8:	460f      	mov	r7, r1
 800ebaa:	4299      	cmp	r1, r3
 800ebac:	468b      	mov	fp, r1
 800ebae:	ec45 4b19 	vmov	d9, r4, r5
 800ebb2:	f340 82f1 	ble.w	800f198 <__ieee754_pow+0x988>
 800ebb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ebba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ebbe:	4303      	orrs	r3, r0
 800ebc0:	f000 81e4 	beq.w	800ef8c <__ieee754_pow+0x77c>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	ec51 0b18 	vmov	r0, r1, d8
 800ebcc:	f7f1 ff8a 	bl	8000ae4 <__aeabi_dcmplt>
 800ebd0:	3800      	subs	r0, #0
 800ebd2:	bf18      	it	ne
 800ebd4:	2001      	movne	r0, #1
 800ebd6:	e72b      	b.n	800ea30 <__ieee754_pow+0x220>
 800ebd8:	60000000 	.word	0x60000000
 800ebdc:	3ff71547 	.word	0x3ff71547
 800ebe0:	f85ddf44 	.word	0xf85ddf44
 800ebe4:	3e54ae0b 	.word	0x3e54ae0b
 800ebe8:	55555555 	.word	0x55555555
 800ebec:	3fd55555 	.word	0x3fd55555
 800ebf0:	652b82fe 	.word	0x652b82fe
 800ebf4:	3ff71547 	.word	0x3ff71547
 800ebf8:	00000000 	.word	0x00000000
 800ebfc:	bff00000 	.word	0xbff00000
 800ec00:	3ff00000 	.word	0x3ff00000
 800ec04:	3fd00000 	.word	0x3fd00000
 800ec08:	3fe00000 	.word	0x3fe00000
 800ec0c:	408fffff 	.word	0x408fffff
 800ec10:	4bd5      	ldr	r3, [pc, #852]	; (800ef68 <__ieee754_pow+0x758>)
 800ec12:	2200      	movs	r2, #0
 800ec14:	402b      	ands	r3, r5
 800ec16:	b92b      	cbnz	r3, 800ec24 <__ieee754_pow+0x414>
 800ec18:	4bd4      	ldr	r3, [pc, #848]	; (800ef6c <__ieee754_pow+0x75c>)
 800ec1a:	f7f1 fcf1 	bl	8000600 <__aeabi_dmul>
 800ec1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ec22:	460c      	mov	r4, r1
 800ec24:	1523      	asrs	r3, r4, #20
 800ec26:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ec2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ec32:	4413      	add	r3, r2
 800ec34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ec38:	9305      	str	r3, [sp, #20]
 800ec3a:	4bcd      	ldr	r3, [pc, #820]	; (800ef70 <__ieee754_pow+0x760>)
 800ec3c:	429c      	cmp	r4, r3
 800ec3e:	dd08      	ble.n	800ec52 <__ieee754_pow+0x442>
 800ec40:	4bcc      	ldr	r3, [pc, #816]	; (800ef74 <__ieee754_pow+0x764>)
 800ec42:	429c      	cmp	r4, r3
 800ec44:	f340 8162 	ble.w	800ef0c <__ieee754_pow+0x6fc>
 800ec48:	9b05      	ldr	r3, [sp, #20]
 800ec4a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ec4e:	3301      	adds	r3, #1
 800ec50:	9305      	str	r3, [sp, #20]
 800ec52:	2400      	movs	r4, #0
 800ec54:	00e3      	lsls	r3, r4, #3
 800ec56:	4682      	mov	sl, r0
 800ec58:	4629      	mov	r1, r5
 800ec5a:	46ab      	mov	fp, r5
 800ec5c:	9307      	str	r3, [sp, #28]
 800ec5e:	4bc6      	ldr	r3, [pc, #792]	; (800ef78 <__ieee754_pow+0x768>)
 800ec60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec64:	ed93 7b00 	vldr	d7, [r3]
 800ec68:	eeb0 9a47 	vmov.f32	s18, s14
 800ec6c:	eef0 9a67 	vmov.f32	s19, s15
 800ec70:	ec53 2b17 	vmov	r2, r3, d7
 800ec74:	f7f1 fb0c 	bl	8000290 <__aeabi_dsub>
 800ec78:	4652      	mov	r2, sl
 800ec7a:	4606      	mov	r6, r0
 800ec7c:	460f      	mov	r7, r1
 800ec7e:	462b      	mov	r3, r5
 800ec80:	106d      	asrs	r5, r5, #1
 800ec82:	ec51 0b19 	vmov	r0, r1, d9
 800ec86:	f7f1 fb05 	bl	8000294 <__adddf3>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	2000      	movs	r0, #0
 800ec90:	49ba      	ldr	r1, [pc, #744]	; (800ef7c <__ieee754_pow+0x76c>)
 800ec92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ec96:	f7f1 fddd 	bl	8000854 <__aeabi_ddiv>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eca2:	ec41 0b1a 	vmov	d10, r0, r1
 800eca6:	4630      	mov	r0, r6
 800eca8:	4639      	mov	r1, r7
 800ecaa:	f7f1 fca9 	bl	8000600 <__aeabi_dmul>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecb6:	9302      	str	r3, [sp, #8]
 800ecb8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ecbc:	4614      	mov	r4, r2
 800ecbe:	461d      	mov	r5, r3
 800ecc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ecc4:	ec41 0b18 	vmov	d8, r0, r1
 800ecc8:	4640      	mov	r0, r8
 800ecca:	4649      	mov	r1, r9
 800eccc:	f7f1 fc98 	bl	8000600 <__aeabi_dmul>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	4639      	mov	r1, r7
 800ecd8:	f7f1 fada 	bl	8000290 <__aeabi_dsub>
 800ecdc:	4606      	mov	r6, r0
 800ecde:	460f      	mov	r7, r1
 800ece0:	4620      	mov	r0, r4
 800ece2:	4629      	mov	r1, r5
 800ece4:	ec53 2b19 	vmov	r2, r3, d9
 800ece8:	f7f1 fad2 	bl	8000290 <__aeabi_dsub>
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	4650      	mov	r0, sl
 800ecf2:	4659      	mov	r1, fp
 800ecf4:	f7f1 facc 	bl	8000290 <__aeabi_dsub>
 800ecf8:	4642      	mov	r2, r8
 800ecfa:	464b      	mov	r3, r9
 800ecfc:	f7f1 fc80 	bl	8000600 <__aeabi_dmul>
 800ed00:	4602      	mov	r2, r0
 800ed02:	460b      	mov	r3, r1
 800ed04:	4630      	mov	r0, r6
 800ed06:	4639      	mov	r1, r7
 800ed08:	f7f1 fac2 	bl	8000290 <__aeabi_dsub>
 800ed0c:	ec53 2b1a 	vmov	r2, r3, d10
 800ed10:	f7f1 fc76 	bl	8000600 <__aeabi_dmul>
 800ed14:	ec53 2b18 	vmov	r2, r3, d8
 800ed18:	ec41 0b19 	vmov	d9, r0, r1
 800ed1c:	ec51 0b18 	vmov	r0, r1, d8
 800ed20:	f7f1 fc6e 	bl	8000600 <__aeabi_dmul>
 800ed24:	4604      	mov	r4, r0
 800ed26:	460d      	mov	r5, r1
 800ed28:	a37b      	add	r3, pc, #492	; (adr r3, 800ef18 <__ieee754_pow+0x708>)
 800ed2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2e:	f7f1 fc67 	bl	8000600 <__aeabi_dmul>
 800ed32:	a37b      	add	r3, pc, #492	; (adr r3, 800ef20 <__ieee754_pow+0x710>)
 800ed34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed38:	f7f1 faac 	bl	8000294 <__adddf3>
 800ed3c:	4622      	mov	r2, r4
 800ed3e:	462b      	mov	r3, r5
 800ed40:	f7f1 fc5e 	bl	8000600 <__aeabi_dmul>
 800ed44:	a378      	add	r3, pc, #480	; (adr r3, 800ef28 <__ieee754_pow+0x718>)
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f7f1 faa3 	bl	8000294 <__adddf3>
 800ed4e:	4622      	mov	r2, r4
 800ed50:	462b      	mov	r3, r5
 800ed52:	f7f1 fc55 	bl	8000600 <__aeabi_dmul>
 800ed56:	a376      	add	r3, pc, #472	; (adr r3, 800ef30 <__ieee754_pow+0x720>)
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	f7f1 fa9a 	bl	8000294 <__adddf3>
 800ed60:	4622      	mov	r2, r4
 800ed62:	462b      	mov	r3, r5
 800ed64:	f7f1 fc4c 	bl	8000600 <__aeabi_dmul>
 800ed68:	a373      	add	r3, pc, #460	; (adr r3, 800ef38 <__ieee754_pow+0x728>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fa91 	bl	8000294 <__adddf3>
 800ed72:	4622      	mov	r2, r4
 800ed74:	462b      	mov	r3, r5
 800ed76:	f7f1 fc43 	bl	8000600 <__aeabi_dmul>
 800ed7a:	a371      	add	r3, pc, #452	; (adr r3, 800ef40 <__ieee754_pow+0x730>)
 800ed7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed80:	f7f1 fa88 	bl	8000294 <__adddf3>
 800ed84:	4606      	mov	r6, r0
 800ed86:	460f      	mov	r7, r1
 800ed88:	4622      	mov	r2, r4
 800ed8a:	462b      	mov	r3, r5
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	4629      	mov	r1, r5
 800ed90:	f7f1 fc36 	bl	8000600 <__aeabi_dmul>
 800ed94:	4602      	mov	r2, r0
 800ed96:	460b      	mov	r3, r1
 800ed98:	4630      	mov	r0, r6
 800ed9a:	4639      	mov	r1, r7
 800ed9c:	f7f1 fc30 	bl	8000600 <__aeabi_dmul>
 800eda0:	4642      	mov	r2, r8
 800eda2:	4604      	mov	r4, r0
 800eda4:	460d      	mov	r5, r1
 800eda6:	464b      	mov	r3, r9
 800eda8:	ec51 0b18 	vmov	r0, r1, d8
 800edac:	f7f1 fa72 	bl	8000294 <__adddf3>
 800edb0:	ec53 2b19 	vmov	r2, r3, d9
 800edb4:	f7f1 fc24 	bl	8000600 <__aeabi_dmul>
 800edb8:	4622      	mov	r2, r4
 800edba:	462b      	mov	r3, r5
 800edbc:	f7f1 fa6a 	bl	8000294 <__adddf3>
 800edc0:	4642      	mov	r2, r8
 800edc2:	4682      	mov	sl, r0
 800edc4:	468b      	mov	fp, r1
 800edc6:	464b      	mov	r3, r9
 800edc8:	4640      	mov	r0, r8
 800edca:	4649      	mov	r1, r9
 800edcc:	f7f1 fc18 	bl	8000600 <__aeabi_dmul>
 800edd0:	2200      	movs	r2, #0
 800edd2:	4b6b      	ldr	r3, [pc, #428]	; (800ef80 <__ieee754_pow+0x770>)
 800edd4:	4606      	mov	r6, r0
 800edd6:	460f      	mov	r7, r1
 800edd8:	f7f1 fa5c 	bl	8000294 <__adddf3>
 800eddc:	4652      	mov	r2, sl
 800edde:	465b      	mov	r3, fp
 800ede0:	f7f1 fa58 	bl	8000294 <__adddf3>
 800ede4:	2000      	movs	r0, #0
 800ede6:	460d      	mov	r5, r1
 800ede8:	460b      	mov	r3, r1
 800edea:	4604      	mov	r4, r0
 800edec:	4602      	mov	r2, r0
 800edee:	4649      	mov	r1, r9
 800edf0:	4640      	mov	r0, r8
 800edf2:	f7f1 fc05 	bl	8000600 <__aeabi_dmul>
 800edf6:	2200      	movs	r2, #0
 800edf8:	4680      	mov	r8, r0
 800edfa:	4689      	mov	r9, r1
 800edfc:	4b60      	ldr	r3, [pc, #384]	; (800ef80 <__ieee754_pow+0x770>)
 800edfe:	4620      	mov	r0, r4
 800ee00:	4629      	mov	r1, r5
 800ee02:	f7f1 fa45 	bl	8000290 <__aeabi_dsub>
 800ee06:	4632      	mov	r2, r6
 800ee08:	463b      	mov	r3, r7
 800ee0a:	f7f1 fa41 	bl	8000290 <__aeabi_dsub>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	4650      	mov	r0, sl
 800ee14:	4659      	mov	r1, fp
 800ee16:	f7f1 fa3b 	bl	8000290 <__aeabi_dsub>
 800ee1a:	ec53 2b18 	vmov	r2, r3, d8
 800ee1e:	f7f1 fbef 	bl	8000600 <__aeabi_dmul>
 800ee22:	4606      	mov	r6, r0
 800ee24:	460f      	mov	r7, r1
 800ee26:	4622      	mov	r2, r4
 800ee28:	462b      	mov	r3, r5
 800ee2a:	ec51 0b19 	vmov	r0, r1, d9
 800ee2e:	f7f1 fbe7 	bl	8000600 <__aeabi_dmul>
 800ee32:	4602      	mov	r2, r0
 800ee34:	460b      	mov	r3, r1
 800ee36:	4630      	mov	r0, r6
 800ee38:	4639      	mov	r1, r7
 800ee3a:	f7f1 fa2b 	bl	8000294 <__adddf3>
 800ee3e:	4606      	mov	r6, r0
 800ee40:	460f      	mov	r7, r1
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4640      	mov	r0, r8
 800ee48:	4649      	mov	r1, r9
 800ee4a:	f7f1 fa23 	bl	8000294 <__adddf3>
 800ee4e:	2000      	movs	r0, #0
 800ee50:	460d      	mov	r5, r1
 800ee52:	4604      	mov	r4, r0
 800ee54:	a33c      	add	r3, pc, #240	; (adr r3, 800ef48 <__ieee754_pow+0x738>)
 800ee56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5a:	f7f1 fbd1 	bl	8000600 <__aeabi_dmul>
 800ee5e:	4642      	mov	r2, r8
 800ee60:	464b      	mov	r3, r9
 800ee62:	ec41 0b18 	vmov	d8, r0, r1
 800ee66:	4620      	mov	r0, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	f7f1 fa11 	bl	8000290 <__aeabi_dsub>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4630      	mov	r0, r6
 800ee74:	4639      	mov	r1, r7
 800ee76:	f7f1 fa0b 	bl	8000290 <__aeabi_dsub>
 800ee7a:	a335      	add	r3, pc, #212	; (adr r3, 800ef50 <__ieee754_pow+0x740>)
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	f7f1 fbbe 	bl	8000600 <__aeabi_dmul>
 800ee84:	4606      	mov	r6, r0
 800ee86:	460f      	mov	r7, r1
 800ee88:	4620      	mov	r0, r4
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	a332      	add	r3, pc, #200	; (adr r3, 800ef58 <__ieee754_pow+0x748>)
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	f7f1 fbb5 	bl	8000600 <__aeabi_dmul>
 800ee96:	4602      	mov	r2, r0
 800ee98:	460b      	mov	r3, r1
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	f7f1 f9f9 	bl	8000294 <__adddf3>
 800eea2:	9a07      	ldr	r2, [sp, #28]
 800eea4:	4b37      	ldr	r3, [pc, #220]	; (800ef84 <__ieee754_pow+0x774>)
 800eea6:	4413      	add	r3, r2
 800eea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeac:	f7f1 f9f2 	bl	8000294 <__adddf3>
 800eeb0:	4682      	mov	sl, r0
 800eeb2:	9805      	ldr	r0, [sp, #20]
 800eeb4:	468b      	mov	fp, r1
 800eeb6:	f7f1 fb39 	bl	800052c <__aeabi_i2d>
 800eeba:	9a07      	ldr	r2, [sp, #28]
 800eebc:	4b32      	ldr	r3, [pc, #200]	; (800ef88 <__ieee754_pow+0x778>)
 800eebe:	4606      	mov	r6, r0
 800eec0:	460f      	mov	r7, r1
 800eec2:	4413      	add	r3, r2
 800eec4:	4652      	mov	r2, sl
 800eec6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eeca:	ec51 0b18 	vmov	r0, r1, d8
 800eece:	465b      	mov	r3, fp
 800eed0:	f7f1 f9e0 	bl	8000294 <__adddf3>
 800eed4:	4642      	mov	r2, r8
 800eed6:	464b      	mov	r3, r9
 800eed8:	f7f1 f9dc 	bl	8000294 <__adddf3>
 800eedc:	4632      	mov	r2, r6
 800eede:	463b      	mov	r3, r7
 800eee0:	f7f1 f9d8 	bl	8000294 <__adddf3>
 800eee4:	2000      	movs	r0, #0
 800eee6:	4632      	mov	r2, r6
 800eee8:	463b      	mov	r3, r7
 800eeea:	4604      	mov	r4, r0
 800eeec:	460d      	mov	r5, r1
 800eeee:	f7f1 f9cf 	bl	8000290 <__aeabi_dsub>
 800eef2:	4642      	mov	r2, r8
 800eef4:	464b      	mov	r3, r9
 800eef6:	f7f1 f9cb 	bl	8000290 <__aeabi_dsub>
 800eefa:	ec53 2b18 	vmov	r2, r3, d8
 800eefe:	f7f1 f9c7 	bl	8000290 <__aeabi_dsub>
 800ef02:	4602      	mov	r2, r0
 800ef04:	460b      	mov	r3, r1
 800ef06:	4650      	mov	r0, sl
 800ef08:	4659      	mov	r1, fp
 800ef0a:	e610      	b.n	800eb2e <__ieee754_pow+0x31e>
 800ef0c:	2401      	movs	r4, #1
 800ef0e:	e6a1      	b.n	800ec54 <__ieee754_pow+0x444>
 800ef10:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ef60 <__ieee754_pow+0x750>
 800ef14:	e617      	b.n	800eb46 <__ieee754_pow+0x336>
 800ef16:	bf00      	nop
 800ef18:	4a454eef 	.word	0x4a454eef
 800ef1c:	3fca7e28 	.word	0x3fca7e28
 800ef20:	93c9db65 	.word	0x93c9db65
 800ef24:	3fcd864a 	.word	0x3fcd864a
 800ef28:	a91d4101 	.word	0xa91d4101
 800ef2c:	3fd17460 	.word	0x3fd17460
 800ef30:	518f264d 	.word	0x518f264d
 800ef34:	3fd55555 	.word	0x3fd55555
 800ef38:	db6fabff 	.word	0xdb6fabff
 800ef3c:	3fdb6db6 	.word	0x3fdb6db6
 800ef40:	33333303 	.word	0x33333303
 800ef44:	3fe33333 	.word	0x3fe33333
 800ef48:	e0000000 	.word	0xe0000000
 800ef4c:	3feec709 	.word	0x3feec709
 800ef50:	dc3a03fd 	.word	0xdc3a03fd
 800ef54:	3feec709 	.word	0x3feec709
 800ef58:	145b01f5 	.word	0x145b01f5
 800ef5c:	be3e2fe0 	.word	0xbe3e2fe0
 800ef60:	00000000 	.word	0x00000000
 800ef64:	3ff00000 	.word	0x3ff00000
 800ef68:	7ff00000 	.word	0x7ff00000
 800ef6c:	43400000 	.word	0x43400000
 800ef70:	0003988e 	.word	0x0003988e
 800ef74:	000bb679 	.word	0x000bb679
 800ef78:	0800fe38 	.word	0x0800fe38
 800ef7c:	3ff00000 	.word	0x3ff00000
 800ef80:	40080000 	.word	0x40080000
 800ef84:	0800fe58 	.word	0x0800fe58
 800ef88:	0800fe48 	.word	0x0800fe48
 800ef8c:	a3b5      	add	r3, pc, #724	; (adr r3, 800f264 <__ieee754_pow+0xa54>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	4640      	mov	r0, r8
 800ef94:	4649      	mov	r1, r9
 800ef96:	f7f1 f97d 	bl	8000294 <__adddf3>
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	462b      	mov	r3, r5
 800ef9e:	ec41 0b1a 	vmov	d10, r0, r1
 800efa2:	4630      	mov	r0, r6
 800efa4:	4639      	mov	r1, r7
 800efa6:	f7f1 f973 	bl	8000290 <__aeabi_dsub>
 800efaa:	4602      	mov	r2, r0
 800efac:	460b      	mov	r3, r1
 800efae:	ec51 0b1a 	vmov	r0, r1, d10
 800efb2:	f7f1 fdb5 	bl	8000b20 <__aeabi_dcmpgt>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	f47f ae04 	bne.w	800ebc4 <__ieee754_pow+0x3b4>
 800efbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800efc0:	4aa3      	ldr	r2, [pc, #652]	; (800f250 <__ieee754_pow+0xa40>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	f340 8108 	ble.w	800f1d8 <__ieee754_pow+0x9c8>
 800efc8:	151b      	asrs	r3, r3, #20
 800efca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800efce:	48a1      	ldr	r0, [pc, #644]	; (800f254 <__ieee754_pow+0xa44>)
 800efd0:	f1bb 0f00 	cmp.w	fp, #0
 800efd4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800efd8:	f04f 0200 	mov.w	r2, #0
 800efdc:	fa4a fa03 	asr.w	sl, sl, r3
 800efe0:	44da      	add	sl, fp
 800efe2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800efe6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800efea:	fa40 f001 	asr.w	r0, r0, r1
 800efee:	f1c1 0114 	rsb	r1, r1, #20
 800eff2:	ea00 030a 	and.w	r3, r0, sl
 800eff6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800effa:	4620      	mov	r0, r4
 800effc:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f000:	fa4a fa01 	asr.w	sl, sl, r1
 800f004:	4629      	mov	r1, r5
 800f006:	bfb8      	it	lt
 800f008:	f1ca 0a00 	rsblt	sl, sl, #0
 800f00c:	f7f1 f940 	bl	8000290 <__aeabi_dsub>
 800f010:	ec41 0b19 	vmov	d9, r0, r1
 800f014:	4642      	mov	r2, r8
 800f016:	464b      	mov	r3, r9
 800f018:	ec51 0b19 	vmov	r0, r1, d9
 800f01c:	f7f1 f93a 	bl	8000294 <__adddf3>
 800f020:	2000      	movs	r0, #0
 800f022:	460d      	mov	r5, r1
 800f024:	4604      	mov	r4, r0
 800f026:	a37a      	add	r3, pc, #488	; (adr r3, 800f210 <__ieee754_pow+0xa00>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f7f1 fae8 	bl	8000600 <__aeabi_dmul>
 800f030:	4606      	mov	r6, r0
 800f032:	460f      	mov	r7, r1
 800f034:	4620      	mov	r0, r4
 800f036:	4629      	mov	r1, r5
 800f038:	ec53 2b19 	vmov	r2, r3, d9
 800f03c:	f7f1 f928 	bl	8000290 <__aeabi_dsub>
 800f040:	4602      	mov	r2, r0
 800f042:	460b      	mov	r3, r1
 800f044:	4640      	mov	r0, r8
 800f046:	4649      	mov	r1, r9
 800f048:	f7f1 f922 	bl	8000290 <__aeabi_dsub>
 800f04c:	a372      	add	r3, pc, #456	; (adr r3, 800f218 <__ieee754_pow+0xa08>)
 800f04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f052:	f7f1 fad5 	bl	8000600 <__aeabi_dmul>
 800f056:	4680      	mov	r8, r0
 800f058:	4689      	mov	r9, r1
 800f05a:	4620      	mov	r0, r4
 800f05c:	4629      	mov	r1, r5
 800f05e:	a370      	add	r3, pc, #448	; (adr r3, 800f220 <__ieee754_pow+0xa10>)
 800f060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f064:	f7f1 facc 	bl	8000600 <__aeabi_dmul>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4640      	mov	r0, r8
 800f06e:	4649      	mov	r1, r9
 800f070:	f7f1 f910 	bl	8000294 <__adddf3>
 800f074:	4604      	mov	r4, r0
 800f076:	460d      	mov	r5, r1
 800f078:	4602      	mov	r2, r0
 800f07a:	460b      	mov	r3, r1
 800f07c:	4630      	mov	r0, r6
 800f07e:	4639      	mov	r1, r7
 800f080:	f7f1 f908 	bl	8000294 <__adddf3>
 800f084:	4632      	mov	r2, r6
 800f086:	4680      	mov	r8, r0
 800f088:	4689      	mov	r9, r1
 800f08a:	463b      	mov	r3, r7
 800f08c:	f7f1 f900 	bl	8000290 <__aeabi_dsub>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	4620      	mov	r0, r4
 800f096:	4629      	mov	r1, r5
 800f098:	f7f1 f8fa 	bl	8000290 <__aeabi_dsub>
 800f09c:	4642      	mov	r2, r8
 800f09e:	4606      	mov	r6, r0
 800f0a0:	460f      	mov	r7, r1
 800f0a2:	464b      	mov	r3, r9
 800f0a4:	4640      	mov	r0, r8
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	f7f1 faaa 	bl	8000600 <__aeabi_dmul>
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	460d      	mov	r5, r1
 800f0b0:	a35d      	add	r3, pc, #372	; (adr r3, 800f228 <__ieee754_pow+0xa18>)
 800f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b6:	f7f1 faa3 	bl	8000600 <__aeabi_dmul>
 800f0ba:	a35d      	add	r3, pc, #372	; (adr r3, 800f230 <__ieee754_pow+0xa20>)
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	f7f1 f8e6 	bl	8000290 <__aeabi_dsub>
 800f0c4:	4622      	mov	r2, r4
 800f0c6:	462b      	mov	r3, r5
 800f0c8:	f7f1 fa9a 	bl	8000600 <__aeabi_dmul>
 800f0cc:	a35a      	add	r3, pc, #360	; (adr r3, 800f238 <__ieee754_pow+0xa28>)
 800f0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d2:	f7f1 f8df 	bl	8000294 <__adddf3>
 800f0d6:	4622      	mov	r2, r4
 800f0d8:	462b      	mov	r3, r5
 800f0da:	f7f1 fa91 	bl	8000600 <__aeabi_dmul>
 800f0de:	a358      	add	r3, pc, #352	; (adr r3, 800f240 <__ieee754_pow+0xa30>)
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f7f1 f8d4 	bl	8000290 <__aeabi_dsub>
 800f0e8:	4622      	mov	r2, r4
 800f0ea:	462b      	mov	r3, r5
 800f0ec:	f7f1 fa88 	bl	8000600 <__aeabi_dmul>
 800f0f0:	a355      	add	r3, pc, #340	; (adr r3, 800f248 <__ieee754_pow+0xa38>)
 800f0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f6:	f7f1 f8cd 	bl	8000294 <__adddf3>
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	f7f1 fa7f 	bl	8000600 <__aeabi_dmul>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	4640      	mov	r0, r8
 800f108:	4649      	mov	r1, r9
 800f10a:	f7f1 f8c1 	bl	8000290 <__aeabi_dsub>
 800f10e:	4604      	mov	r4, r0
 800f110:	460d      	mov	r5, r1
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	4640      	mov	r0, r8
 800f118:	4649      	mov	r1, r9
 800f11a:	f7f1 fa71 	bl	8000600 <__aeabi_dmul>
 800f11e:	2200      	movs	r2, #0
 800f120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f124:	ec41 0b19 	vmov	d9, r0, r1
 800f128:	4620      	mov	r0, r4
 800f12a:	4629      	mov	r1, r5
 800f12c:	f7f1 f8b0 	bl	8000290 <__aeabi_dsub>
 800f130:	4602      	mov	r2, r0
 800f132:	460b      	mov	r3, r1
 800f134:	ec51 0b19 	vmov	r0, r1, d9
 800f138:	f7f1 fb8c 	bl	8000854 <__aeabi_ddiv>
 800f13c:	4632      	mov	r2, r6
 800f13e:	4604      	mov	r4, r0
 800f140:	460d      	mov	r5, r1
 800f142:	463b      	mov	r3, r7
 800f144:	4640      	mov	r0, r8
 800f146:	4649      	mov	r1, r9
 800f148:	f7f1 fa5a 	bl	8000600 <__aeabi_dmul>
 800f14c:	4632      	mov	r2, r6
 800f14e:	463b      	mov	r3, r7
 800f150:	f7f1 f8a0 	bl	8000294 <__adddf3>
 800f154:	4602      	mov	r2, r0
 800f156:	460b      	mov	r3, r1
 800f158:	4620      	mov	r0, r4
 800f15a:	4629      	mov	r1, r5
 800f15c:	f7f1 f898 	bl	8000290 <__aeabi_dsub>
 800f160:	4642      	mov	r2, r8
 800f162:	464b      	mov	r3, r9
 800f164:	f7f1 f894 	bl	8000290 <__aeabi_dsub>
 800f168:	460b      	mov	r3, r1
 800f16a:	4602      	mov	r2, r0
 800f16c:	493a      	ldr	r1, [pc, #232]	; (800f258 <__ieee754_pow+0xa48>)
 800f16e:	2000      	movs	r0, #0
 800f170:	f7f1 f88e 	bl	8000290 <__aeabi_dsub>
 800f174:	ec41 0b10 	vmov	d0, r0, r1
 800f178:	ee10 3a90 	vmov	r3, s1
 800f17c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f184:	da2b      	bge.n	800f1de <__ieee754_pow+0x9ce>
 800f186:	4650      	mov	r0, sl
 800f188:	f000 f8aa 	bl	800f2e0 <scalbn>
 800f18c:	ec51 0b10 	vmov	r0, r1, d0
 800f190:	ec53 2b18 	vmov	r2, r3, d8
 800f194:	f7ff bbed 	b.w	800e972 <__ieee754_pow+0x162>
 800f198:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f19c:	4b2f      	ldr	r3, [pc, #188]	; (800f25c <__ieee754_pow+0xa4c>)
 800f19e:	429e      	cmp	r6, r3
 800f1a0:	f77f af0c 	ble.w	800efbc <__ieee754_pow+0x7ac>
 800f1a4:	4b2e      	ldr	r3, [pc, #184]	; (800f260 <__ieee754_pow+0xa50>)
 800f1a6:	440b      	add	r3, r1
 800f1a8:	4303      	orrs	r3, r0
 800f1aa:	d009      	beq.n	800f1c0 <__ieee754_pow+0x9b0>
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	ec51 0b18 	vmov	r0, r1, d8
 800f1b4:	f7f1 fc96 	bl	8000ae4 <__aeabi_dcmplt>
 800f1b8:	3800      	subs	r0, #0
 800f1ba:	bf18      	it	ne
 800f1bc:	2001      	movne	r0, #1
 800f1be:	e447      	b.n	800ea50 <__ieee754_pow+0x240>
 800f1c0:	4622      	mov	r2, r4
 800f1c2:	462b      	mov	r3, r5
 800f1c4:	f7f1 f864 	bl	8000290 <__aeabi_dsub>
 800f1c8:	4642      	mov	r2, r8
 800f1ca:	464b      	mov	r3, r9
 800f1cc:	f7f1 fc9e 	bl	8000b0c <__aeabi_dcmpge>
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	f43f aef3 	beq.w	800efbc <__ieee754_pow+0x7ac>
 800f1d6:	e7e9      	b.n	800f1ac <__ieee754_pow+0x99c>
 800f1d8:	f04f 0a00 	mov.w	sl, #0
 800f1dc:	e71a      	b.n	800f014 <__ieee754_pow+0x804>
 800f1de:	ec51 0b10 	vmov	r0, r1, d0
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	e7d4      	b.n	800f190 <__ieee754_pow+0x980>
 800f1e6:	2000      	movs	r0, #0
 800f1e8:	491b      	ldr	r1, [pc, #108]	; (800f258 <__ieee754_pow+0xa48>)
 800f1ea:	f7ff bb30 	b.w	800e84e <__ieee754_pow+0x3e>
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	f7ff bb2c 	b.w	800e84e <__ieee754_pow+0x3e>
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	f7ff bb28 	b.w	800e84e <__ieee754_pow+0x3e>
 800f1fe:	9204      	str	r2, [sp, #16]
 800f200:	f7ff bb7a 	b.w	800e8f8 <__ieee754_pow+0xe8>
 800f204:	2300      	movs	r3, #0
 800f206:	f7ff bb64 	b.w	800e8d2 <__ieee754_pow+0xc2>
 800f20a:	bf00      	nop
 800f20c:	f3af 8000 	nop.w
 800f210:	00000000 	.word	0x00000000
 800f214:	3fe62e43 	.word	0x3fe62e43
 800f218:	fefa39ef 	.word	0xfefa39ef
 800f21c:	3fe62e42 	.word	0x3fe62e42
 800f220:	0ca86c39 	.word	0x0ca86c39
 800f224:	be205c61 	.word	0xbe205c61
 800f228:	72bea4d0 	.word	0x72bea4d0
 800f22c:	3e663769 	.word	0x3e663769
 800f230:	c5d26bf1 	.word	0xc5d26bf1
 800f234:	3ebbbd41 	.word	0x3ebbbd41
 800f238:	af25de2c 	.word	0xaf25de2c
 800f23c:	3f11566a 	.word	0x3f11566a
 800f240:	16bebd93 	.word	0x16bebd93
 800f244:	3f66c16c 	.word	0x3f66c16c
 800f248:	5555553e 	.word	0x5555553e
 800f24c:	3fc55555 	.word	0x3fc55555
 800f250:	3fe00000 	.word	0x3fe00000
 800f254:	fff00000 	.word	0xfff00000
 800f258:	3ff00000 	.word	0x3ff00000
 800f25c:	4090cbff 	.word	0x4090cbff
 800f260:	3f6f3400 	.word	0x3f6f3400
 800f264:	652b82fe 	.word	0x652b82fe
 800f268:	3c971547 	.word	0x3c971547

0800f26c <with_errno>:
 800f26c:	b570      	push	{r4, r5, r6, lr}
 800f26e:	4604      	mov	r4, r0
 800f270:	460d      	mov	r5, r1
 800f272:	4616      	mov	r6, r2
 800f274:	f7fc fdb0 	bl	800bdd8 <__errno>
 800f278:	4629      	mov	r1, r5
 800f27a:	6006      	str	r6, [r0, #0]
 800f27c:	4620      	mov	r0, r4
 800f27e:	bd70      	pop	{r4, r5, r6, pc}

0800f280 <xflow>:
 800f280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f282:	4614      	mov	r4, r2
 800f284:	461d      	mov	r5, r3
 800f286:	b108      	cbz	r0, 800f28c <xflow+0xc>
 800f288:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f28c:	4620      	mov	r0, r4
 800f28e:	4629      	mov	r1, r5
 800f290:	e9cd 2300 	strd	r2, r3, [sp]
 800f294:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f298:	f7f1 f9b2 	bl	8000600 <__aeabi_dmul>
 800f29c:	2222      	movs	r2, #34	; 0x22
 800f29e:	b003      	add	sp, #12
 800f2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2a4:	f7ff bfe2 	b.w	800f26c <with_errno>

0800f2a8 <__math_uflow>:
 800f2a8:	b508      	push	{r3, lr}
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f2b0:	f7ff ffe6 	bl	800f280 <xflow>
 800f2b4:	ec41 0b10 	vmov	d0, r0, r1
 800f2b8:	bd08      	pop	{r3, pc}

0800f2ba <__math_oflow>:
 800f2ba:	b508      	push	{r3, lr}
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f2c2:	f7ff ffdd 	bl	800f280 <xflow>
 800f2c6:	ec41 0b10 	vmov	d0, r0, r1
 800f2ca:	bd08      	pop	{r3, pc}

0800f2cc <fabs>:
 800f2cc:	ec51 0b10 	vmov	r0, r1, d0
 800f2d0:	ee10 2a10 	vmov	r2, s0
 800f2d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f2d8:	ec43 2b10 	vmov	d0, r2, r3
 800f2dc:	4770      	bx	lr
	...

0800f2e0 <scalbn>:
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	ec55 4b10 	vmov	r4, r5, d0
 800f2e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f2ea:	4606      	mov	r6, r0
 800f2ec:	462b      	mov	r3, r5
 800f2ee:	b999      	cbnz	r1, 800f318 <scalbn+0x38>
 800f2f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f2f4:	4323      	orrs	r3, r4
 800f2f6:	d03f      	beq.n	800f378 <scalbn+0x98>
 800f2f8:	4b35      	ldr	r3, [pc, #212]	; (800f3d0 <scalbn+0xf0>)
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	ee10 0a10 	vmov	r0, s0
 800f302:	f7f1 f97d 	bl	8000600 <__aeabi_dmul>
 800f306:	4b33      	ldr	r3, [pc, #204]	; (800f3d4 <scalbn+0xf4>)
 800f308:	4604      	mov	r4, r0
 800f30a:	460d      	mov	r5, r1
 800f30c:	429e      	cmp	r6, r3
 800f30e:	da10      	bge.n	800f332 <scalbn+0x52>
 800f310:	a327      	add	r3, pc, #156	; (adr r3, 800f3b0 <scalbn+0xd0>)
 800f312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f316:	e01f      	b.n	800f358 <scalbn+0x78>
 800f318:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f31c:	4291      	cmp	r1, r2
 800f31e:	d10c      	bne.n	800f33a <scalbn+0x5a>
 800f320:	ee10 2a10 	vmov	r2, s0
 800f324:	4620      	mov	r0, r4
 800f326:	4629      	mov	r1, r5
 800f328:	f7f0 ffb4 	bl	8000294 <__adddf3>
 800f32c:	4604      	mov	r4, r0
 800f32e:	460d      	mov	r5, r1
 800f330:	e022      	b.n	800f378 <scalbn+0x98>
 800f332:	460b      	mov	r3, r1
 800f334:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f338:	3936      	subs	r1, #54	; 0x36
 800f33a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f33e:	4296      	cmp	r6, r2
 800f340:	dd0d      	ble.n	800f35e <scalbn+0x7e>
 800f342:	2d00      	cmp	r5, #0
 800f344:	a11c      	add	r1, pc, #112	; (adr r1, 800f3b8 <scalbn+0xd8>)
 800f346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f34a:	da02      	bge.n	800f352 <scalbn+0x72>
 800f34c:	a11c      	add	r1, pc, #112	; (adr r1, 800f3c0 <scalbn+0xe0>)
 800f34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f352:	a319      	add	r3, pc, #100	; (adr r3, 800f3b8 <scalbn+0xd8>)
 800f354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f358:	f7f1 f952 	bl	8000600 <__aeabi_dmul>
 800f35c:	e7e6      	b.n	800f32c <scalbn+0x4c>
 800f35e:	1872      	adds	r2, r6, r1
 800f360:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f364:	428a      	cmp	r2, r1
 800f366:	dcec      	bgt.n	800f342 <scalbn+0x62>
 800f368:	2a00      	cmp	r2, #0
 800f36a:	dd08      	ble.n	800f37e <scalbn+0x9e>
 800f36c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f370:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f374:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f378:	ec45 4b10 	vmov	d0, r4, r5
 800f37c:	bd70      	pop	{r4, r5, r6, pc}
 800f37e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f382:	da08      	bge.n	800f396 <scalbn+0xb6>
 800f384:	2d00      	cmp	r5, #0
 800f386:	a10a      	add	r1, pc, #40	; (adr r1, 800f3b0 <scalbn+0xd0>)
 800f388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f38c:	dac0      	bge.n	800f310 <scalbn+0x30>
 800f38e:	a10e      	add	r1, pc, #56	; (adr r1, 800f3c8 <scalbn+0xe8>)
 800f390:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f394:	e7bc      	b.n	800f310 <scalbn+0x30>
 800f396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f39a:	3236      	adds	r2, #54	; 0x36
 800f39c:	4620      	mov	r0, r4
 800f39e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f3a2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	4b0b      	ldr	r3, [pc, #44]	; (800f3d8 <scalbn+0xf8>)
 800f3aa:	e7d5      	b.n	800f358 <scalbn+0x78>
 800f3ac:	f3af 8000 	nop.w
 800f3b0:	c2f8f359 	.word	0xc2f8f359
 800f3b4:	01a56e1f 	.word	0x01a56e1f
 800f3b8:	8800759c 	.word	0x8800759c
 800f3bc:	7e37e43c 	.word	0x7e37e43c
 800f3c0:	8800759c 	.word	0x8800759c
 800f3c4:	fe37e43c 	.word	0xfe37e43c
 800f3c8:	c2f8f359 	.word	0xc2f8f359
 800f3cc:	81a56e1f 	.word	0x81a56e1f
 800f3d0:	43500000 	.word	0x43500000
 800f3d4:	ffff3cb0 	.word	0xffff3cb0
 800f3d8:	3c900000 	.word	0x3c900000

0800f3dc <_init>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	bf00      	nop
 800f3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e2:	bc08      	pop	{r3}
 800f3e4:	469e      	mov	lr, r3
 800f3e6:	4770      	bx	lr

0800f3e8 <_fini>:
 800f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ea:	bf00      	nop
 800f3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ee:	bc08      	pop	{r3}
 800f3f0:	469e      	mov	lr, r3
 800f3f2:	4770      	bx	lr
 800f3f4:	0000      	movs	r0, r0
	...
